
TesteCANN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ccc  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  08005f64  08005f64  00015f64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005ff8  08005ff8  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08005ff8  08005ff8  00015ff8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006000  08006000  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006000  08006000  00016000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006004  08006004  00016004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  24000000  08006008  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000204  24000010  08006018  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  24000214  08006018  00020214  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c180  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000029d0  00000000  00000000  0003c1be  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000e78  00000000  00000000  0003eb90  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000d70  00000000  00000000  0003fa08  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0003654e  00000000  00000000  00040778  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000bd5e  00000000  00000000  00076cc6  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0015d938  00000000  00000000  00082a24  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001e035c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d14  00000000  00000000  001e03d8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08005f4c 	.word	0x08005f4c

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	08005f4c 	.word	0x08005f4c

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b972 	b.w	80005d4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9e08      	ldr	r6, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	4688      	mov	r8, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	d14b      	bne.n	80003ae <__udivmoddi4+0xa6>
 8000316:	428a      	cmp	r2, r1
 8000318:	4615      	mov	r5, r2
 800031a:	d967      	bls.n	80003ec <__udivmoddi4+0xe4>
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	b14a      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000322:	f1c2 0720 	rsb	r7, r2, #32
 8000326:	fa01 f302 	lsl.w	r3, r1, r2
 800032a:	fa20 f707 	lsr.w	r7, r0, r7
 800032e:	4095      	lsls	r5, r2
 8000330:	ea47 0803 	orr.w	r8, r7, r3
 8000334:	4094      	lsls	r4, r2
 8000336:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000340:	fa1f fc85 	uxth.w	ip, r5
 8000344:	fb0e 8817 	mls	r8, lr, r7, r8
 8000348:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800034c:	fb07 f10c 	mul.w	r1, r7, ip
 8000350:	4299      	cmp	r1, r3
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x60>
 8000354:	18eb      	adds	r3, r5, r3
 8000356:	f107 30ff 	add.w	r0, r7, #4294967295
 800035a:	f080 811b 	bcs.w	8000594 <__udivmoddi4+0x28c>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 8118 	bls.w	8000594 <__udivmoddi4+0x28c>
 8000364:	3f02      	subs	r7, #2
 8000366:	442b      	add	r3, r5
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000370:	fb0e 3310 	mls	r3, lr, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 fc0c 	mul.w	ip, r0, ip
 800037c:	45a4      	cmp	ip, r4
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x8c>
 8000380:	192c      	adds	r4, r5, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	f080 8107 	bcs.w	8000598 <__udivmoddi4+0x290>
 800038a:	45a4      	cmp	ip, r4
 800038c:	f240 8104 	bls.w	8000598 <__udivmoddi4+0x290>
 8000390:	3802      	subs	r0, #2
 8000392:	442c      	add	r4, r5
 8000394:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000398:	eba4 040c 	sub.w	r4, r4, ip
 800039c:	2700      	movs	r7, #0
 800039e:	b11e      	cbz	r6, 80003a8 <__udivmoddi4+0xa0>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c6 4300 	strd	r4, r3, [r6]
 80003a8:	4639      	mov	r1, r7
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d909      	bls.n	80003c6 <__udivmoddi4+0xbe>
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	f000 80eb 	beq.w	800058e <__udivmoddi4+0x286>
 80003b8:	2700      	movs	r7, #0
 80003ba:	e9c6 0100 	strd	r0, r1, [r6]
 80003be:	4638      	mov	r0, r7
 80003c0:	4639      	mov	r1, r7
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	fab3 f783 	clz	r7, r3
 80003ca:	2f00      	cmp	r7, #0
 80003cc:	d147      	bne.n	800045e <__udivmoddi4+0x156>
 80003ce:	428b      	cmp	r3, r1
 80003d0:	d302      	bcc.n	80003d8 <__udivmoddi4+0xd0>
 80003d2:	4282      	cmp	r2, r0
 80003d4:	f200 80fa 	bhi.w	80005cc <__udivmoddi4+0x2c4>
 80003d8:	1a84      	subs	r4, r0, r2
 80003da:	eb61 0303 	sbc.w	r3, r1, r3
 80003de:	2001      	movs	r0, #1
 80003e0:	4698      	mov	r8, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d0e0      	beq.n	80003a8 <__udivmoddi4+0xa0>
 80003e6:	e9c6 4800 	strd	r4, r8, [r6]
 80003ea:	e7dd      	b.n	80003a8 <__udivmoddi4+0xa0>
 80003ec:	b902      	cbnz	r2, 80003f0 <__udivmoddi4+0xe8>
 80003ee:	deff      	udf	#255	; 0xff
 80003f0:	fab2 f282 	clz	r2, r2
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	f040 808f 	bne.w	8000518 <__udivmoddi4+0x210>
 80003fa:	1b49      	subs	r1, r1, r5
 80003fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000400:	fa1f f885 	uxth.w	r8, r5
 8000404:	2701      	movs	r7, #1
 8000406:	fbb1 fcfe 	udiv	ip, r1, lr
 800040a:	0c23      	lsrs	r3, r4, #16
 800040c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000410:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000414:	fb08 f10c 	mul.w	r1, r8, ip
 8000418:	4299      	cmp	r1, r3
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x124>
 800041c:	18eb      	adds	r3, r5, r3
 800041e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x122>
 8000424:	4299      	cmp	r1, r3
 8000426:	f200 80cd 	bhi.w	80005c4 <__udivmoddi4+0x2bc>
 800042a:	4684      	mov	ip, r0
 800042c:	1a59      	subs	r1, r3, r1
 800042e:	b2a3      	uxth	r3, r4
 8000430:	fbb1 f0fe 	udiv	r0, r1, lr
 8000434:	fb0e 1410 	mls	r4, lr, r0, r1
 8000438:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800043c:	fb08 f800 	mul.w	r8, r8, r0
 8000440:	45a0      	cmp	r8, r4
 8000442:	d907      	bls.n	8000454 <__udivmoddi4+0x14c>
 8000444:	192c      	adds	r4, r5, r4
 8000446:	f100 33ff 	add.w	r3, r0, #4294967295
 800044a:	d202      	bcs.n	8000452 <__udivmoddi4+0x14a>
 800044c:	45a0      	cmp	r8, r4
 800044e:	f200 80b6 	bhi.w	80005be <__udivmoddi4+0x2b6>
 8000452:	4618      	mov	r0, r3
 8000454:	eba4 0408 	sub.w	r4, r4, r8
 8000458:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800045c:	e79f      	b.n	800039e <__udivmoddi4+0x96>
 800045e:	f1c7 0c20 	rsb	ip, r7, #32
 8000462:	40bb      	lsls	r3, r7
 8000464:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000468:	ea4e 0e03 	orr.w	lr, lr, r3
 800046c:	fa01 f407 	lsl.w	r4, r1, r7
 8000470:	fa20 f50c 	lsr.w	r5, r0, ip
 8000474:	fa21 f30c 	lsr.w	r3, r1, ip
 8000478:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800047c:	4325      	orrs	r5, r4
 800047e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000482:	0c2c      	lsrs	r4, r5, #16
 8000484:	fb08 3319 	mls	r3, r8, r9, r3
 8000488:	fa1f fa8e 	uxth.w	sl, lr
 800048c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000490:	fb09 f40a 	mul.w	r4, r9, sl
 8000494:	429c      	cmp	r4, r3
 8000496:	fa02 f207 	lsl.w	r2, r2, r7
 800049a:	fa00 f107 	lsl.w	r1, r0, r7
 800049e:	d90b      	bls.n	80004b8 <__udivmoddi4+0x1b0>
 80004a0:	eb1e 0303 	adds.w	r3, lr, r3
 80004a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004a8:	f080 8087 	bcs.w	80005ba <__udivmoddi4+0x2b2>
 80004ac:	429c      	cmp	r4, r3
 80004ae:	f240 8084 	bls.w	80005ba <__udivmoddi4+0x2b2>
 80004b2:	f1a9 0902 	sub.w	r9, r9, #2
 80004b6:	4473      	add	r3, lr
 80004b8:	1b1b      	subs	r3, r3, r4
 80004ba:	b2ad      	uxth	r5, r5
 80004bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c0:	fb08 3310 	mls	r3, r8, r0, r3
 80004c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80004cc:	45a2      	cmp	sl, r4
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x1da>
 80004d0:	eb1e 0404 	adds.w	r4, lr, r4
 80004d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80004d8:	d26b      	bcs.n	80005b2 <__udivmoddi4+0x2aa>
 80004da:	45a2      	cmp	sl, r4
 80004dc:	d969      	bls.n	80005b2 <__udivmoddi4+0x2aa>
 80004de:	3802      	subs	r0, #2
 80004e0:	4474      	add	r4, lr
 80004e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004e6:	fba0 8902 	umull	r8, r9, r0, r2
 80004ea:	eba4 040a 	sub.w	r4, r4, sl
 80004ee:	454c      	cmp	r4, r9
 80004f0:	46c2      	mov	sl, r8
 80004f2:	464b      	mov	r3, r9
 80004f4:	d354      	bcc.n	80005a0 <__udivmoddi4+0x298>
 80004f6:	d051      	beq.n	800059c <__udivmoddi4+0x294>
 80004f8:	2e00      	cmp	r6, #0
 80004fa:	d069      	beq.n	80005d0 <__udivmoddi4+0x2c8>
 80004fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000500:	eb64 0403 	sbc.w	r4, r4, r3
 8000504:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000508:	40fd      	lsrs	r5, r7
 800050a:	40fc      	lsrs	r4, r7
 800050c:	ea4c 0505 	orr.w	r5, ip, r5
 8000510:	e9c6 5400 	strd	r5, r4, [r6]
 8000514:	2700      	movs	r7, #0
 8000516:	e747      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000518:	f1c2 0320 	rsb	r3, r2, #32
 800051c:	fa20 f703 	lsr.w	r7, r0, r3
 8000520:	4095      	lsls	r5, r2
 8000522:	fa01 f002 	lsl.w	r0, r1, r2
 8000526:	fa21 f303 	lsr.w	r3, r1, r3
 800052a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800052e:	4338      	orrs	r0, r7
 8000530:	0c01      	lsrs	r1, r0, #16
 8000532:	fbb3 f7fe 	udiv	r7, r3, lr
 8000536:	fa1f f885 	uxth.w	r8, r5
 800053a:	fb0e 3317 	mls	r3, lr, r7, r3
 800053e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000542:	fb07 f308 	mul.w	r3, r7, r8
 8000546:	428b      	cmp	r3, r1
 8000548:	fa04 f402 	lsl.w	r4, r4, r2
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x256>
 800054e:	1869      	adds	r1, r5, r1
 8000550:	f107 3cff 	add.w	ip, r7, #4294967295
 8000554:	d22f      	bcs.n	80005b6 <__udivmoddi4+0x2ae>
 8000556:	428b      	cmp	r3, r1
 8000558:	d92d      	bls.n	80005b6 <__udivmoddi4+0x2ae>
 800055a:	3f02      	subs	r7, #2
 800055c:	4429      	add	r1, r5
 800055e:	1acb      	subs	r3, r1, r3
 8000560:	b281      	uxth	r1, r0
 8000562:	fbb3 f0fe 	udiv	r0, r3, lr
 8000566:	fb0e 3310 	mls	r3, lr, r0, r3
 800056a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056e:	fb00 f308 	mul.w	r3, r0, r8
 8000572:	428b      	cmp	r3, r1
 8000574:	d907      	bls.n	8000586 <__udivmoddi4+0x27e>
 8000576:	1869      	adds	r1, r5, r1
 8000578:	f100 3cff 	add.w	ip, r0, #4294967295
 800057c:	d217      	bcs.n	80005ae <__udivmoddi4+0x2a6>
 800057e:	428b      	cmp	r3, r1
 8000580:	d915      	bls.n	80005ae <__udivmoddi4+0x2a6>
 8000582:	3802      	subs	r0, #2
 8000584:	4429      	add	r1, r5
 8000586:	1ac9      	subs	r1, r1, r3
 8000588:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800058c:	e73b      	b.n	8000406 <__udivmoddi4+0xfe>
 800058e:	4637      	mov	r7, r6
 8000590:	4630      	mov	r0, r6
 8000592:	e709      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000594:	4607      	mov	r7, r0
 8000596:	e6e7      	b.n	8000368 <__udivmoddi4+0x60>
 8000598:	4618      	mov	r0, r3
 800059a:	e6fb      	b.n	8000394 <__udivmoddi4+0x8c>
 800059c:	4541      	cmp	r1, r8
 800059e:	d2ab      	bcs.n	80004f8 <__udivmoddi4+0x1f0>
 80005a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80005a4:	eb69 020e 	sbc.w	r2, r9, lr
 80005a8:	3801      	subs	r0, #1
 80005aa:	4613      	mov	r3, r2
 80005ac:	e7a4      	b.n	80004f8 <__udivmoddi4+0x1f0>
 80005ae:	4660      	mov	r0, ip
 80005b0:	e7e9      	b.n	8000586 <__udivmoddi4+0x27e>
 80005b2:	4618      	mov	r0, r3
 80005b4:	e795      	b.n	80004e2 <__udivmoddi4+0x1da>
 80005b6:	4667      	mov	r7, ip
 80005b8:	e7d1      	b.n	800055e <__udivmoddi4+0x256>
 80005ba:	4681      	mov	r9, r0
 80005bc:	e77c      	b.n	80004b8 <__udivmoddi4+0x1b0>
 80005be:	3802      	subs	r0, #2
 80005c0:	442c      	add	r4, r5
 80005c2:	e747      	b.n	8000454 <__udivmoddi4+0x14c>
 80005c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c8:	442b      	add	r3, r5
 80005ca:	e72f      	b.n	800042c <__udivmoddi4+0x124>
 80005cc:	4638      	mov	r0, r7
 80005ce:	e708      	b.n	80003e2 <__udivmoddi4+0xda>
 80005d0:	4637      	mov	r7, r6
 80005d2:	e6e9      	b.n	80003a8 <__udivmoddi4+0xa0>

080005d4 <__aeabi_idiv0>:
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <initialize_CAN>:

#include "CAN_handler.h"


//função para inicializar a CAN
void initialize_CAN(FDCAN_HandleTypeDef* hfdcan, void (* CAN_receive_callback)(FDCAN_HandleTypeDef* hfdcan, uint32_t RxFifo0ITs), FDCAN_TxHeaderTypeDef* TxHeader) {
 80005d8:	b580      	push	{r7, lr}
 80005da:	b084      	sub	sp, #16
 80005dc:	af00      	add	r7, sp, #0
 80005de:	60f8      	str	r0, [r7, #12]
 80005e0:	60b9      	str	r1, [r7, #8]
 80005e2:	607a      	str	r2, [r7, #4]

	if (HAL_FDCAN_RegisterRxFifo0Callback(hfdcan, CAN_receive_callback) != HAL_OK) { //função para registrar a função de callback
 80005e4:	68b9      	ldr	r1, [r7, #8]
 80005e6:	68f8      	ldr	r0, [r7, #12]
 80005e8:	f001 f882 	bl	80016f0 <HAL_FDCAN_RegisterRxFifo0Callback>
 80005ec:	4603      	mov	r3, r0
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d001      	beq.n	80005f6 <initialize_CAN+0x1e>
		/* Callback Register Error */
		Error_Handler();
 80005f2:	f000 fac3 	bl	8000b7c <Error_Handler>
	}

	if (HAL_FDCAN_Start(hfdcan) != HAL_OK) {
 80005f6:	68f8      	ldr	r0, [r7, #12]
 80005f8:	f001 f8aa 	bl	8001750 <HAL_FDCAN_Start>
 80005fc:	4603      	mov	r3, r0
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d001      	beq.n	8000606 <initialize_CAN+0x2e>
		/* Start Error */
		Error_Handler();
 8000602:	f000 fabb 	bl	8000b7c <Error_Handler>
	}

	if (HAL_FDCAN_ActivateNotification(hfdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK) {
 8000606:	2200      	movs	r2, #0
 8000608:	2101      	movs	r1, #1
 800060a:	68f8      	ldr	r0, [r7, #12]
 800060c:	f001 fa2a 	bl	8001a64 <HAL_FDCAN_ActivateNotification>
 8000610:	4603      	mov	r3, r0
 8000612:	2b00      	cmp	r3, #0
 8000614:	d001      	beq.n	800061a <initialize_CAN+0x42>
		/* Notification Error */
		Error_Handler();
 8000616:	f000 fab1 	bl	8000b7c <Error_Handler>
	}

//	TxHeader.Identifier = 0x321;
	TxHeader->IdType = FDCAN_STANDARD_ID;
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	2200      	movs	r2, #0
 800061e:	605a      	str	r2, [r3, #4]
	TxHeader->TxFrameType = FDCAN_DATA_FRAME;
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	2200      	movs	r2, #0
 8000624:	609a      	str	r2, [r3, #8]
	TxHeader->DataLength = FDCAN_DLC_BYTES_8;
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800062c:	60da      	str	r2, [r3, #12]
	TxHeader->ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	2200      	movs	r2, #0
 8000632:	611a      	str	r2, [r3, #16]
	TxHeader->BitRateSwitch = FDCAN_BRS_OFF;
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	2200      	movs	r2, #0
 8000638:	615a      	str	r2, [r3, #20]
	TxHeader->FDFormat = FDCAN_CLASSIC_CAN;
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	2200      	movs	r2, #0
 800063e:	619a      	str	r2, [r3, #24]
	TxHeader->TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	2200      	movs	r2, #0
 8000644:	61da      	str	r2, [r3, #28]
	TxHeader->MessageMarker = 0;
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	2200      	movs	r2, #0
 800064a:	621a      	str	r2, [r3, #32]
}
 800064c:	bf00      	nop
 800064e:	3710      	adds	r7, #16
 8000650:	46bd      	mov	sp, r7
 8000652:	bd80      	pop	{r7, pc}

08000654 <init_CAN>:
*/
//}

extern FDCAN_HandleTypeDef hfdcan1;

void init_CAN() {
 8000654:	b580      	push	{r7, lr}
 8000656:	af00      	add	r7, sp, #0
	  initialize_general_CAN(&hfdcan1);
 8000658:	4802      	ldr	r0, [pc, #8]	; (8000664 <init_CAN+0x10>)
 800065a:	f000 f805 	bl	8000668 <initialize_general_CAN>
	  //initialize_CAN_IDs();
}
 800065e:	bf00      	nop
 8000660:	bd80      	pop	{r7, pc}
 8000662:	bf00      	nop
 8000664:	24000090 	.word	0x24000090

08000668 <initialize_general_CAN>:
uint32_t idgeneral;



//função que inicializa a can geral, chamada em initializer.c
void initialize_general_CAN(FDCAN_HandleTypeDef* can_ref) {
 8000668:	b580      	push	{r7, lr}
 800066a:	b082      	sub	sp, #8
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
	can_ptr = can_ref;
 8000670:	4a06      	ldr	r2, [pc, #24]	; (800068c <initialize_general_CAN+0x24>)
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	6013      	str	r3, [r2, #0]
	void CAN_general_receive_callback(FDCAN_HandleTypeDef*, uint32_t);
	initialize_CAN(can_ptr, CAN_general_receive_callback, &TxHeader);
 8000676:	4b05      	ldr	r3, [pc, #20]	; (800068c <initialize_general_CAN+0x24>)
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	4a05      	ldr	r2, [pc, #20]	; (8000690 <initialize_general_CAN+0x28>)
 800067c:	4905      	ldr	r1, [pc, #20]	; (8000694 <initialize_general_CAN+0x2c>)
 800067e:	4618      	mov	r0, r3
 8000680:	f7ff ffaa 	bl	80005d8 <initialize_CAN>
}
 8000684:	bf00      	nop
 8000686:	3708      	adds	r7, #8
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}
 800068c:	2400002c 	.word	0x2400002c
 8000690:	24000030 	.word	0x24000030
 8000694:	08000699 	.word	0x08000699

08000698 <CAN_general_receive_callback>:
}



//função de callback, chamada quando chega qualquer mensagem, de qualquer ID
void CAN_general_receive_callback(FDCAN_HandleTypeDef* hfdcan, uint32_t RxFifo0ITs)  {
 8000698:	b580      	push	{r7, lr}
 800069a:	b084      	sub	sp, #16
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
 80006a0:	6039      	str	r1, [r7, #0]
	if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET) {
 80006a2:	683b      	ldr	r3, [r7, #0]
 80006a4:	f003 0301 	and.w	r3, r3, #1
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d03e      	beq.n	800072a <CAN_general_receive_callback+0x92>
		GPIOD->ODR &= ~ (1<<6); //reseta o pino PD6
 80006ac:	4b21      	ldr	r3, [pc, #132]	; (8000734 <CAN_general_receive_callback+0x9c>)
 80006ae:	695b      	ldr	r3, [r3, #20]
 80006b0:	4a20      	ldr	r2, [pc, #128]	; (8000734 <CAN_general_receive_callback+0x9c>)
 80006b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80006b6:	6153      	str	r3, [r2, #20]
		if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK) {
 80006b8:	4b1f      	ldr	r3, [pc, #124]	; (8000738 <CAN_general_receive_callback+0xa0>)
 80006ba:	4a20      	ldr	r2, [pc, #128]	; (800073c <CAN_general_receive_callback+0xa4>)
 80006bc:	2140      	movs	r1, #64	; 0x40
 80006be:	6878      	ldr	r0, [r7, #4]
 80006c0:	f001 f872 	bl	80017a8 <HAL_FDCAN_GetRxMessage>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d001      	beq.n	80006ce <CAN_general_receive_callback+0x36>
			/* Reception Error */
			Error_Handler();
 80006ca:	f000 fa57 	bl	8000b7c <Error_Handler>

		//TESTAR APAGAR A LED OU SALVAR O VALOR DE UMA VARIÁVEL PRA VER NO DEBUG SE PASSA AQUI

		//TENTAR SETAR A LED APAGADA ANTES DA MAIN, USANDO REGISTRADOR E A LÓGICA INVERTIDA DO CÓDIGO DO LAB 2 DE EMBUTIDOS

		idgeneral = RxHeader.Identifier;
 80006ce:	4b1b      	ldr	r3, [pc, #108]	; (800073c <CAN_general_receive_callback+0xa4>)
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	4a1b      	ldr	r2, [pc, #108]	; (8000740 <CAN_general_receive_callback+0xa8>)
 80006d4:	6013      	str	r3, [r2, #0]
		for(int i = 0; i < 8; i += 2){
 80006d6:	2300      	movs	r3, #0
 80006d8:	60fb      	str	r3, [r7, #12]
 80006da:	e019      	b.n	8000710 <CAN_general_receive_callback+0x78>
			datageneral[i/2] = (RxData[i+1] << 8) | RxData[i];
 80006dc:	68fb      	ldr	r3, [r7, #12]
 80006de:	3301      	adds	r3, #1
 80006e0:	4a15      	ldr	r2, [pc, #84]	; (8000738 <CAN_general_receive_callback+0xa0>)
 80006e2:	5cd3      	ldrb	r3, [r2, r3]
 80006e4:	021b      	lsls	r3, r3, #8
 80006e6:	b219      	sxth	r1, r3
 80006e8:	4a13      	ldr	r2, [pc, #76]	; (8000738 <CAN_general_receive_callback+0xa0>)
 80006ea:	68fb      	ldr	r3, [r7, #12]
 80006ec:	4413      	add	r3, r2
 80006ee:	781b      	ldrb	r3, [r3, #0]
 80006f0:	b21a      	sxth	r2, r3
 80006f2:	68fb      	ldr	r3, [r7, #12]
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	da00      	bge.n	80006fa <CAN_general_receive_callback+0x62>
 80006f8:	3301      	adds	r3, #1
 80006fa:	105b      	asrs	r3, r3, #1
 80006fc:	4618      	mov	r0, r3
 80006fe:	ea41 0302 	orr.w	r3, r1, r2
 8000702:	b21a      	sxth	r2, r3
 8000704:	4b0f      	ldr	r3, [pc, #60]	; (8000744 <CAN_general_receive_callback+0xac>)
 8000706:	f823 2010 	strh.w	r2, [r3, r0, lsl #1]
		for(int i = 0; i < 8; i += 2){
 800070a:	68fb      	ldr	r3, [r7, #12]
 800070c:	3302      	adds	r3, #2
 800070e:	60fb      	str	r3, [r7, #12]
 8000710:	68fb      	ldr	r3, [r7, #12]
 8000712:	2b07      	cmp	r3, #7
 8000714:	dde2      	ble.n	80006dc <CAN_general_receive_callback+0x44>
		}
		//TODO: implementar lógica de colocar as mensagens nas variáveis certas

		if (HAL_FDCAN_ActivateNotification(hfdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK) {
 8000716:	2200      	movs	r2, #0
 8000718:	2101      	movs	r1, #1
 800071a:	6878      	ldr	r0, [r7, #4]
 800071c:	f001 f9a2 	bl	8001a64 <HAL_FDCAN_ActivateNotification>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <CAN_general_receive_callback+0x92>
			/* Notification Error */
			Error_Handler();
 8000726:	f000 fa29 	bl	8000b7c <Error_Handler>
		}
	}
}
 800072a:	bf00      	nop
 800072c:	3710      	adds	r7, #16
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	58020c00 	.word	0x58020c00
 8000738:	24000060 	.word	0x24000060
 800073c:	24000068 	.word	0x24000068
 8000740:	24000054 	.word	0x24000054
 8000744:	24000058 	.word	0x24000058

08000748 <LED>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
//o reset vai acender e o set vai apagar, por conta da lógica eletrônica (ver easyeda)
void LED (uint32_t c)
{
 8000748:	b480      	push	{r7}
 800074a:	b083      	sub	sp, #12
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
	if(c == 1)
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	2b01      	cmp	r3, #1
 8000754:	d105      	bne.n	8000762 <LED+0x1a>
		GPIOD->ODR &= ~ (1<<6); //reseta o pino PD6
 8000756:	4b0a      	ldr	r3, [pc, #40]	; (8000780 <LED+0x38>)
 8000758:	695b      	ldr	r3, [r3, #20]
 800075a:	4a09      	ldr	r2, [pc, #36]	; (8000780 <LED+0x38>)
 800075c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000760:	6153      	str	r3, [r2, #20]
	if(c == 0)
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	2b00      	cmp	r3, #0
 8000766:	d105      	bne.n	8000774 <LED+0x2c>
		GPIOD->ODR |= (1<<6); //seta o pino PD6
 8000768:	4b05      	ldr	r3, [pc, #20]	; (8000780 <LED+0x38>)
 800076a:	695b      	ldr	r3, [r3, #20]
 800076c:	4a04      	ldr	r2, [pc, #16]	; (8000780 <LED+0x38>)
 800076e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000772:	6153      	str	r3, [r2, #20]
}
 8000774:	bf00      	nop
 8000776:	370c      	adds	r7, #12
 8000778:	46bd      	mov	sp, r7
 800077a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077e:	4770      	bx	lr
 8000780:	58020c00 	.word	0x58020c00

08000784 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000788:	f000 fbae 	bl	8000ee8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800078c:	f000 f82e 	bl	80007ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000790:	f000 f9bc 	bl	8000b0c <MX_GPIO_Init>
  MX_FDCAN1_Init();
 8000794:	f000 f90a 	bl	80009ac <MX_FDCAN1_Init>
  MX_UART4_Init();
 8000798:	f000 f96c 	bl	8000a74 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */
  RCC->AHB4ENR |= (1<<3); //habilita o clock do GPIO
 800079c:	4b11      	ldr	r3, [pc, #68]	; (80007e4 <main+0x60>)
 800079e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007a2:	4a10      	ldr	r2, [pc, #64]	; (80007e4 <main+0x60>)
 80007a4:	f043 0308 	orr.w	r3, r3, #8
 80007a8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  GPIOD->MODER = (GPIOD->MODER & 0xFFFFDFFF); //seta o pino GPIOD6 como output
 80007ac:	4b0e      	ldr	r3, [pc, #56]	; (80007e8 <main+0x64>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	4a0d      	ldr	r2, [pc, #52]	; (80007e8 <main+0x64>)
 80007b2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80007b6:	6013      	str	r3, [r2, #0]
  GPIOD->OTYPER &= ~(0<<6); //configura o pino GPIOD6 como output push-pull
 80007b8:	4b0b      	ldr	r3, [pc, #44]	; (80007e8 <main+0x64>)
 80007ba:	4a0b      	ldr	r2, [pc, #44]	; (80007e8 <main+0x64>)
 80007bc:	685b      	ldr	r3, [r3, #4]
 80007be:	6053      	str	r3, [r2, #4]
  GPIOD->OSPEEDR |= (1<<13); //configura a velocidade do pino GPIOD6como high speed
 80007c0:	4b09      	ldr	r3, [pc, #36]	; (80007e8 <main+0x64>)
 80007c2:	689b      	ldr	r3, [r3, #8]
 80007c4:	4a08      	ldr	r2, [pc, #32]	; (80007e8 <main+0x64>)
 80007c6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80007ca:	6093      	str	r3, [r2, #8]
  GPIOD->PUPDR &= ~((1<<13) | (1<<12)); //configura o pino GPIOD6 como no pull-up no pull-down
 80007cc:	4b06      	ldr	r3, [pc, #24]	; (80007e8 <main+0x64>)
 80007ce:	68db      	ldr	r3, [r3, #12]
 80007d0:	4a05      	ldr	r2, [pc, #20]	; (80007e8 <main+0x64>)
 80007d2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80007d6:	60d3      	str	r3, [r2, #12]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  LED(0);
 80007d8:	2000      	movs	r0, #0
 80007da:	f7ff ffb5 	bl	8000748 <LED>

  init_CAN();
 80007de:	f7ff ff39 	bl	8000654 <init_CAN>
  /* USER CODE END 2 */



  while (1)
 80007e2:	e7fe      	b.n	80007e2 <main+0x5e>
 80007e4:	58024400 	.word	0x58024400
 80007e8:	58020c00 	.word	0x58020c00

080007ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b0cc      	sub	sp, #304	; 0x130
 80007f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007f2:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80007f6:	224c      	movs	r2, #76	; 0x4c
 80007f8:	2100      	movs	r1, #0
 80007fa:	4618      	mov	r0, r3
 80007fc:	f005 fb9d 	bl	8005f3a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000800:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000804:	2220      	movs	r2, #32
 8000806:	2100      	movs	r1, #0
 8000808:	4618      	mov	r0, r3
 800080a:	f005 fb96 	bl	8005f3a <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800080e:	f107 0308 	add.w	r3, r7, #8
 8000812:	4618      	mov	r0, r3
 8000814:	23bc      	movs	r3, #188	; 0xbc
 8000816:	461a      	mov	r2, r3
 8000818:	2100      	movs	r1, #0
 800081a:	f005 fb8e 	bl	8005f3a <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800081e:	2002      	movs	r0, #2
 8000820:	f002 f806 	bl	8002830 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000824:	1d3b      	adds	r3, r7, #4
 8000826:	2200      	movs	r2, #0
 8000828:	601a      	str	r2, [r3, #0]
 800082a:	4b5d      	ldr	r3, [pc, #372]	; (80009a0 <SystemClock_Config+0x1b4>)
 800082c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800082e:	4a5c      	ldr	r2, [pc, #368]	; (80009a0 <SystemClock_Config+0x1b4>)
 8000830:	f023 0301 	bic.w	r3, r3, #1
 8000834:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000836:	4b5a      	ldr	r3, [pc, #360]	; (80009a0 <SystemClock_Config+0x1b4>)
 8000838:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800083a:	f003 0201 	and.w	r2, r3, #1
 800083e:	1d3b      	adds	r3, r7, #4
 8000840:	601a      	str	r2, [r3, #0]
 8000842:	4b58      	ldr	r3, [pc, #352]	; (80009a4 <SystemClock_Config+0x1b8>)
 8000844:	699b      	ldr	r3, [r3, #24]
 8000846:	4a57      	ldr	r2, [pc, #348]	; (80009a4 <SystemClock_Config+0x1b8>)
 8000848:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800084c:	6193      	str	r3, [r2, #24]
 800084e:	4b55      	ldr	r3, [pc, #340]	; (80009a4 <SystemClock_Config+0x1b8>)
 8000850:	699b      	ldr	r3, [r3, #24]
 8000852:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 8000856:	1d3b      	adds	r3, r7, #4
 8000858:	601a      	str	r2, [r3, #0]
 800085a:	1d3b      	adds	r3, r7, #4
 800085c:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800085e:	bf00      	nop
 8000860:	4b50      	ldr	r3, [pc, #320]	; (80009a4 <SystemClock_Config+0x1b8>)
 8000862:	699b      	ldr	r3, [r3, #24]
 8000864:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000868:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800086c:	d1f8      	bne.n	8000860 <SystemClock_Config+0x74>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 800086e:	4b4e      	ldr	r3, [pc, #312]	; (80009a8 <SystemClock_Config+0x1bc>)
 8000870:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000872:	f023 0303 	bic.w	r3, r3, #3
 8000876:	4a4c      	ldr	r2, [pc, #304]	; (80009a8 <SystemClock_Config+0x1bc>)
 8000878:	f043 0302 	orr.w	r3, r3, #2
 800087c:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800087e:	2301      	movs	r3, #1
 8000880:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000884:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000888:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800088c:	2302      	movs	r3, #2
 800088e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000892:	2302      	movs	r3, #2
 8000894:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000898:	2301      	movs	r3, #1
 800089a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 100;
 800089e:	2364      	movs	r3, #100	; 0x64
 80008a0:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 80008a4:	2302      	movs	r3, #2
 80008a6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80008aa:	2304      	movs	r3, #4
 80008ac:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80008b0:	2302      	movs	r3, #2
 80008b2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80008b6:	230c      	movs	r3, #12
 80008b8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80008bc:	2300      	movs	r3, #0
 80008be:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80008c2:	2300      	movs	r3, #0
 80008c4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008c8:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80008cc:	4618      	mov	r0, r3
 80008ce:	f001 ffe9 	bl	80028a4 <HAL_RCC_OscConfig>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d001      	beq.n	80008dc <SystemClock_Config+0xf0>
  {
    Error_Handler();
 80008d8:	f000 f950 	bl	8000b7c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008dc:	233f      	movs	r3, #63	; 0x3f
 80008de:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008e2:	2303      	movs	r3, #3
 80008e4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80008e8:	2300      	movs	r3, #0
 80008ea:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80008ee:	2308      	movs	r3, #8
 80008f0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80008f4:	2340      	movs	r3, #64	; 0x40
 80008f6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80008fa:	2340      	movs	r3, #64	; 0x40
 80008fc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000900:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000904:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000908:	2340      	movs	r3, #64	; 0x40
 800090a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800090e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000912:	2102      	movs	r1, #2
 8000914:	4618      	mov	r0, r3
 8000916:	f002 fbd5 	bl	80030c4 <HAL_RCC_ClockConfig>
 800091a:	4603      	mov	r3, r0
 800091c:	2b00      	cmp	r3, #0
 800091e:	d001      	beq.n	8000924 <SystemClock_Config+0x138>
  {
    Error_Handler();
 8000920:	f000 f92c 	bl	8000b7c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4|RCC_PERIPHCLK_FDCAN;
 8000924:	f107 0308 	add.w	r3, r7, #8
 8000928:	f248 0202 	movw	r2, #32770	; 0x8002
 800092c:	601a      	str	r2, [r3, #0]
  PeriphClkInitStruct.PLL2.PLL2M = 1;
 800092e:	f107 0308 	add.w	r3, r7, #8
 8000932:	2201      	movs	r2, #1
 8000934:	605a      	str	r2, [r3, #4]
  PeriphClkInitStruct.PLL2.PLL2N = 20;
 8000936:	f107 0308 	add.w	r3, r7, #8
 800093a:	2214      	movs	r2, #20
 800093c:	609a      	str	r2, [r3, #8]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 800093e:	f107 0308 	add.w	r3, r7, #8
 8000942:	2202      	movs	r2, #2
 8000944:	60da      	str	r2, [r3, #12]
  PeriphClkInitStruct.PLL2.PLL2Q = 4;
 8000946:	f107 0308 	add.w	r3, r7, #8
 800094a:	2204      	movs	r2, #4
 800094c:	611a      	str	r2, [r3, #16]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 800094e:	f107 0308 	add.w	r3, r7, #8
 8000952:	2202      	movs	r2, #2
 8000954:	615a      	str	r2, [r3, #20]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000956:	f107 0308 	add.w	r3, r7, #8
 800095a:	22c0      	movs	r2, #192	; 0xc0
 800095c:	619a      	str	r2, [r3, #24]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 800095e:	f107 0308 	add.w	r3, r7, #8
 8000962:	2220      	movs	r2, #32
 8000964:	61da      	str	r2, [r3, #28]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000966:	f107 0308 	add.w	r3, r7, #8
 800096a:	2200      	movs	r2, #0
 800096c:	621a      	str	r2, [r3, #32]
  PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL2;
 800096e:	f107 0308 	add.w	r3, r7, #8
 8000972:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8000976:	66da      	str	r2, [r3, #108]	; 0x6c
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000978:	f107 0308 	add.w	r3, r7, #8
 800097c:	2200      	movs	r2, #0
 800097e:	675a      	str	r2, [r3, #116]	; 0x74
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000980:	f107 0308 	add.w	r3, r7, #8
 8000984:	4618      	mov	r0, r3
 8000986:	f002 ff21 	bl	80037cc <HAL_RCCEx_PeriphCLKConfig>
 800098a:	4603      	mov	r3, r0
 800098c:	2b00      	cmp	r3, #0
 800098e:	d001      	beq.n	8000994 <SystemClock_Config+0x1a8>
  {
    Error_Handler();
 8000990:	f000 f8f4 	bl	8000b7c <Error_Handler>
  }
}
 8000994:	bf00      	nop
 8000996:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	58000400 	.word	0x58000400
 80009a4:	58024800 	.word	0x58024800
 80009a8:	58024400 	.word	0x58024400

080009ac <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 80009b0:	4b2e      	ldr	r3, [pc, #184]	; (8000a6c <MX_FDCAN1_Init+0xc0>)
 80009b2:	4a2f      	ldr	r2, [pc, #188]	; (8000a70 <MX_FDCAN1_Init+0xc4>)
 80009b4:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80009b6:	4b2d      	ldr	r3, [pc, #180]	; (8000a6c <MX_FDCAN1_Init+0xc0>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80009bc:	4b2b      	ldr	r3, [pc, #172]	; (8000a6c <MX_FDCAN1_Init+0xc0>)
 80009be:	2200      	movs	r2, #0
 80009c0:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 80009c2:	4b2a      	ldr	r3, [pc, #168]	; (8000a6c <MX_FDCAN1_Init+0xc0>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 80009c8:	4b28      	ldr	r3, [pc, #160]	; (8000a6c <MX_FDCAN1_Init+0xc0>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 80009ce:	4b27      	ldr	r3, [pc, #156]	; (8000a6c <MX_FDCAN1_Init+0xc0>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 80009d4:	4b25      	ldr	r3, [pc, #148]	; (8000a6c <MX_FDCAN1_Init+0xc0>)
 80009d6:	2201      	movs	r2, #1
 80009d8:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 2;
 80009da:	4b24      	ldr	r3, [pc, #144]	; (8000a6c <MX_FDCAN1_Init+0xc0>)
 80009dc:	2202      	movs	r2, #2
 80009de:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 13;
 80009e0:	4b22      	ldr	r3, [pc, #136]	; (8000a6c <MX_FDCAN1_Init+0xc0>)
 80009e2:	220d      	movs	r2, #13
 80009e4:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 80009e6:	4b21      	ldr	r3, [pc, #132]	; (8000a6c <MX_FDCAN1_Init+0xc0>)
 80009e8:	2202      	movs	r2, #2
 80009ea:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 80009ec:	4b1f      	ldr	r3, [pc, #124]	; (8000a6c <MX_FDCAN1_Init+0xc0>)
 80009ee:	2201      	movs	r2, #1
 80009f0:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 2;
 80009f2:	4b1e      	ldr	r3, [pc, #120]	; (8000a6c <MX_FDCAN1_Init+0xc0>)
 80009f4:	2202      	movs	r2, #2
 80009f6:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 13;
 80009f8:	4b1c      	ldr	r3, [pc, #112]	; (8000a6c <MX_FDCAN1_Init+0xc0>)
 80009fa:	220d      	movs	r2, #13
 80009fc:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 2;
 80009fe:	4b1b      	ldr	r3, [pc, #108]	; (8000a6c <MX_FDCAN1_Init+0xc0>)
 8000a00:	2202      	movs	r2, #2
 8000a02:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8000a04:	4b19      	ldr	r3, [pc, #100]	; (8000a6c <MX_FDCAN1_Init+0xc0>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 8000a0a:	4b18      	ldr	r3, [pc, #96]	; (8000a6c <MX_FDCAN1_Init+0xc0>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000a10:	4b16      	ldr	r3, [pc, #88]	; (8000a6c <MX_FDCAN1_Init+0xc0>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 0;
 8000a16:	4b15      	ldr	r3, [pc, #84]	; (8000a6c <MX_FDCAN1_Init+0xc0>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000a1c:	4b13      	ldr	r3, [pc, #76]	; (8000a6c <MX_FDCAN1_Init+0xc0>)
 8000a1e:	2204      	movs	r2, #4
 8000a20:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8000a22:	4b12      	ldr	r3, [pc, #72]	; (8000a6c <MX_FDCAN1_Init+0xc0>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000a28:	4b10      	ldr	r3, [pc, #64]	; (8000a6c <MX_FDCAN1_Init+0xc0>)
 8000a2a:	2204      	movs	r2, #4
 8000a2c:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8000a2e:	4b0f      	ldr	r3, [pc, #60]	; (8000a6c <MX_FDCAN1_Init+0xc0>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000a34:	4b0d      	ldr	r3, [pc, #52]	; (8000a6c <MX_FDCAN1_Init+0xc0>)
 8000a36:	2204      	movs	r2, #4
 8000a38:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8000a3a:	4b0c      	ldr	r3, [pc, #48]	; (8000a6c <MX_FDCAN1_Init+0xc0>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8000a40:	4b0a      	ldr	r3, [pc, #40]	; (8000a6c <MX_FDCAN1_Init+0xc0>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 8000a46:	4b09      	ldr	r3, [pc, #36]	; (8000a6c <MX_FDCAN1_Init+0xc0>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000a4c:	4b07      	ldr	r3, [pc, #28]	; (8000a6c <MX_FDCAN1_Init+0xc0>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000a52:	4b06      	ldr	r3, [pc, #24]	; (8000a6c <MX_FDCAN1_Init+0xc0>)
 8000a54:	2204      	movs	r2, #4
 8000a56:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000a58:	4804      	ldr	r0, [pc, #16]	; (8000a6c <MX_FDCAN1_Init+0xc0>)
 8000a5a:	f000 fbf3 	bl	8001244 <HAL_FDCAN_Init>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d001      	beq.n	8000a68 <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 8000a64:	f000 f88a 	bl	8000b7c <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000a68:	bf00      	nop
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	24000090 	.word	0x24000090
 8000a70:	4000a000 	.word	0x4000a000

08000a74 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000a78:	4b22      	ldr	r3, [pc, #136]	; (8000b04 <MX_UART4_Init+0x90>)
 8000a7a:	4a23      	ldr	r2, [pc, #140]	; (8000b08 <MX_UART4_Init+0x94>)
 8000a7c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000a7e:	4b21      	ldr	r3, [pc, #132]	; (8000b04 <MX_UART4_Init+0x90>)
 8000a80:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a84:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000a86:	4b1f      	ldr	r3, [pc, #124]	; (8000b04 <MX_UART4_Init+0x90>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000a8c:	4b1d      	ldr	r3, [pc, #116]	; (8000b04 <MX_UART4_Init+0x90>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000a92:	4b1c      	ldr	r3, [pc, #112]	; (8000b04 <MX_UART4_Init+0x90>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000a98:	4b1a      	ldr	r3, [pc, #104]	; (8000b04 <MX_UART4_Init+0x90>)
 8000a9a:	220c      	movs	r2, #12
 8000a9c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a9e:	4b19      	ldr	r3, [pc, #100]	; (8000b04 <MX_UART4_Init+0x90>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000aa4:	4b17      	ldr	r3, [pc, #92]	; (8000b04 <MX_UART4_Init+0x90>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000aaa:	4b16      	ldr	r3, [pc, #88]	; (8000b04 <MX_UART4_Init+0x90>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ab0:	4b14      	ldr	r3, [pc, #80]	; (8000b04 <MX_UART4_Init+0x90>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ab6:	4b13      	ldr	r3, [pc, #76]	; (8000b04 <MX_UART4_Init+0x90>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000abc:	4811      	ldr	r0, [pc, #68]	; (8000b04 <MX_UART4_Init+0x90>)
 8000abe:	f004 f985 	bl	8004dcc <HAL_UART_Init>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d001      	beq.n	8000acc <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8000ac8:	f000 f858 	bl	8000b7c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000acc:	2100      	movs	r1, #0
 8000ace:	480d      	ldr	r0, [pc, #52]	; (8000b04 <MX_UART4_Init+0x90>)
 8000ad0:	f005 f91f 	bl	8005d12 <HAL_UARTEx_SetTxFifoThreshold>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d001      	beq.n	8000ade <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8000ada:	f000 f84f 	bl	8000b7c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ade:	2100      	movs	r1, #0
 8000ae0:	4808      	ldr	r0, [pc, #32]	; (8000b04 <MX_UART4_Init+0x90>)
 8000ae2:	f005 f954 	bl	8005d8e <HAL_UARTEx_SetRxFifoThreshold>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d001      	beq.n	8000af0 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8000aec:	f000 f846 	bl	8000b7c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8000af0:	4804      	ldr	r0, [pc, #16]	; (8000b04 <MX_UART4_Init+0x90>)
 8000af2:	f005 f8d5 	bl	8005ca0 <HAL_UARTEx_DisableFifoMode>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d001      	beq.n	8000b00 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8000afc:	f000 f83e 	bl	8000b7c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000b00:	bf00      	nop
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	24000184 	.word	0x24000184
 8000b08:	40004c00 	.word	0x40004c00

08000b0c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	b085      	sub	sp, #20
 8000b10:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b12:	4b19      	ldr	r3, [pc, #100]	; (8000b78 <MX_GPIO_Init+0x6c>)
 8000b14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b18:	4a17      	ldr	r2, [pc, #92]	; (8000b78 <MX_GPIO_Init+0x6c>)
 8000b1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b1e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b22:	4b15      	ldr	r3, [pc, #84]	; (8000b78 <MX_GPIO_Init+0x6c>)
 8000b24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b2c:	60fb      	str	r3, [r7, #12]
 8000b2e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b30:	4b11      	ldr	r3, [pc, #68]	; (8000b78 <MX_GPIO_Init+0x6c>)
 8000b32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b36:	4a10      	ldr	r2, [pc, #64]	; (8000b78 <MX_GPIO_Init+0x6c>)
 8000b38:	f043 0301 	orr.w	r3, r3, #1
 8000b3c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b40:	4b0d      	ldr	r3, [pc, #52]	; (8000b78 <MX_GPIO_Init+0x6c>)
 8000b42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b46:	f003 0301 	and.w	r3, r3, #1
 8000b4a:	60bb      	str	r3, [r7, #8]
 8000b4c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b4e:	4b0a      	ldr	r3, [pc, #40]	; (8000b78 <MX_GPIO_Init+0x6c>)
 8000b50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b54:	4a08      	ldr	r2, [pc, #32]	; (8000b78 <MX_GPIO_Init+0x6c>)
 8000b56:	f043 0302 	orr.w	r3, r3, #2
 8000b5a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b5e:	4b06      	ldr	r3, [pc, #24]	; (8000b78 <MX_GPIO_Init+0x6c>)
 8000b60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b64:	f003 0302 	and.w	r3, r3, #2
 8000b68:	607b      	str	r3, [r7, #4]
 8000b6a:	687b      	ldr	r3, [r7, #4]

}
 8000b6c:	bf00      	nop
 8000b6e:	3714      	adds	r7, #20
 8000b70:	46bd      	mov	sp, r7
 8000b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b76:	4770      	bx	lr
 8000b78:	58024400 	.word	0x58024400

08000b7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b80:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b82:	e7fe      	b.n	8000b82 <Error_Handler+0x6>

08000b84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	b083      	sub	sp, #12
 8000b88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b8a:	4b0a      	ldr	r3, [pc, #40]	; (8000bb4 <HAL_MspInit+0x30>)
 8000b8c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000b90:	4a08      	ldr	r2, [pc, #32]	; (8000bb4 <HAL_MspInit+0x30>)
 8000b92:	f043 0302 	orr.w	r3, r3, #2
 8000b96:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000b9a:	4b06      	ldr	r3, [pc, #24]	; (8000bb4 <HAL_MspInit+0x30>)
 8000b9c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000ba0:	f003 0302 	and.w	r3, r3, #2
 8000ba4:	607b      	str	r3, [r7, #4]
 8000ba6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ba8:	bf00      	nop
 8000baa:	370c      	adds	r7, #12
 8000bac:	46bd      	mov	sp, r7
 8000bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb2:	4770      	bx	lr
 8000bb4:	58024400 	.word	0x58024400

08000bb8 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b08a      	sub	sp, #40	; 0x28
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc0:	f107 0314 	add.w	r3, r7, #20
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	601a      	str	r2, [r3, #0]
 8000bc8:	605a      	str	r2, [r3, #4]
 8000bca:	609a      	str	r2, [r3, #8]
 8000bcc:	60da      	str	r2, [r3, #12]
 8000bce:	611a      	str	r2, [r3, #16]
  if(hfdcan->Instance==FDCAN1)
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	4a22      	ldr	r2, [pc, #136]	; (8000c60 <HAL_FDCAN_MspInit+0xa8>)
 8000bd6:	4293      	cmp	r3, r2
 8000bd8:	d13e      	bne.n	8000c58 <HAL_FDCAN_MspInit+0xa0>
  {
  /* USER CODE BEGIN FDCAN1_MspInit 0 */

  /* USER CODE END FDCAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000bda:	4b22      	ldr	r3, [pc, #136]	; (8000c64 <HAL_FDCAN_MspInit+0xac>)
 8000bdc:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8000be0:	4a20      	ldr	r2, [pc, #128]	; (8000c64 <HAL_FDCAN_MspInit+0xac>)
 8000be2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000be6:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8000bea:	4b1e      	ldr	r3, [pc, #120]	; (8000c64 <HAL_FDCAN_MspInit+0xac>)
 8000bec:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8000bf0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000bf4:	613b      	str	r3, [r7, #16]
 8000bf6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bf8:	4b1a      	ldr	r3, [pc, #104]	; (8000c64 <HAL_FDCAN_MspInit+0xac>)
 8000bfa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bfe:	4a19      	ldr	r2, [pc, #100]	; (8000c64 <HAL_FDCAN_MspInit+0xac>)
 8000c00:	f043 0302 	orr.w	r3, r3, #2
 8000c04:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c08:	4b16      	ldr	r3, [pc, #88]	; (8000c64 <HAL_FDCAN_MspInit+0xac>)
 8000c0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c0e:	f003 0302 	and.w	r3, r3, #2
 8000c12:	60fb      	str	r3, [r7, #12]
 8000c14:	68fb      	ldr	r3, [r7, #12]
    /**FDCAN1 GPIO Configuration
    PB8     ------> FDCAN1_RX
    PB9     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000c16:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000c1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c1c:	2302      	movs	r3, #2
 8000c1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c20:	2300      	movs	r3, #0
 8000c22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c24:	2300      	movs	r3, #0
 8000c26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000c28:	2309      	movs	r3, #9
 8000c2a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c2c:	f107 0314 	add.w	r3, r7, #20
 8000c30:	4619      	mov	r1, r3
 8000c32:	480d      	ldr	r0, [pc, #52]	; (8000c68 <HAL_FDCAN_MspInit+0xb0>)
 8000c34:	f001 fc4c 	bl	80024d0 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8000c38:	2200      	movs	r2, #0
 8000c3a:	2100      	movs	r1, #0
 8000c3c:	2013      	movs	r0, #19
 8000c3e:	f000 facc 	bl	80011da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8000c42:	2013      	movs	r0, #19
 8000c44:	f000 fae3 	bl	800120e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN1_IT1_IRQn, 0, 0);
 8000c48:	2200      	movs	r2, #0
 8000c4a:	2100      	movs	r1, #0
 8000c4c:	2015      	movs	r0, #21
 8000c4e:	f000 fac4 	bl	80011da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
 8000c52:	2015      	movs	r0, #21
 8000c54:	f000 fadb 	bl	800120e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 8000c58:	bf00      	nop
 8000c5a:	3728      	adds	r7, #40	; 0x28
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}
 8000c60:	4000a000 	.word	0x4000a000
 8000c64:	58024400 	.word	0x58024400
 8000c68:	58020400 	.word	0x58020400

08000c6c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b08a      	sub	sp, #40	; 0x28
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c74:	f107 0314 	add.w	r3, r7, #20
 8000c78:	2200      	movs	r2, #0
 8000c7a:	601a      	str	r2, [r3, #0]
 8000c7c:	605a      	str	r2, [r3, #4]
 8000c7e:	609a      	str	r2, [r3, #8]
 8000c80:	60da      	str	r2, [r3, #12]
 8000c82:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	4a1a      	ldr	r2, [pc, #104]	; (8000cf4 <HAL_UART_MspInit+0x88>)
 8000c8a:	4293      	cmp	r3, r2
 8000c8c:	d12d      	bne.n	8000cea <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000c8e:	4b1a      	ldr	r3, [pc, #104]	; (8000cf8 <HAL_UART_MspInit+0x8c>)
 8000c90:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c94:	4a18      	ldr	r2, [pc, #96]	; (8000cf8 <HAL_UART_MspInit+0x8c>)
 8000c96:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000c9a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000c9e:	4b16      	ldr	r3, [pc, #88]	; (8000cf8 <HAL_UART_MspInit+0x8c>)
 8000ca0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000ca4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000ca8:	613b      	str	r3, [r7, #16]
 8000caa:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cac:	4b12      	ldr	r3, [pc, #72]	; (8000cf8 <HAL_UART_MspInit+0x8c>)
 8000cae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cb2:	4a11      	ldr	r2, [pc, #68]	; (8000cf8 <HAL_UART_MspInit+0x8c>)
 8000cb4:	f043 0301 	orr.w	r3, r3, #1
 8000cb8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cbc:	4b0e      	ldr	r3, [pc, #56]	; (8000cf8 <HAL_UART_MspInit+0x8c>)
 8000cbe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cc2:	f003 0301 	and.w	r3, r3, #1
 8000cc6:	60fb      	str	r3, [r7, #12]
 8000cc8:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000cca:	2303      	movs	r3, #3
 8000ccc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cce:	2302      	movs	r3, #2
 8000cd0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000cda:	2308      	movs	r3, #8
 8000cdc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cde:	f107 0314 	add.w	r3, r7, #20
 8000ce2:	4619      	mov	r1, r3
 8000ce4:	4805      	ldr	r0, [pc, #20]	; (8000cfc <HAL_UART_MspInit+0x90>)
 8000ce6:	f001 fbf3 	bl	80024d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 8000cea:	bf00      	nop
 8000cec:	3728      	adds	r7, #40	; 0x28
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	40004c00 	.word	0x40004c00
 8000cf8:	58024400 	.word	0x58024400
 8000cfc:	58020000 	.word	0x58020000

08000d00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d04:	e7fe      	b.n	8000d04 <NMI_Handler+0x4>

08000d06 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d06:	b480      	push	{r7}
 8000d08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d0a:	e7fe      	b.n	8000d0a <HardFault_Handler+0x4>

08000d0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d10:	e7fe      	b.n	8000d10 <MemManage_Handler+0x4>

08000d12 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d12:	b480      	push	{r7}
 8000d14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d16:	e7fe      	b.n	8000d16 <BusFault_Handler+0x4>

08000d18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d1c:	e7fe      	b.n	8000d1c <UsageFault_Handler+0x4>

08000d1e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d1e:	b480      	push	{r7}
 8000d20:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d22:	bf00      	nop
 8000d24:	46bd      	mov	sp, r7
 8000d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2a:	4770      	bx	lr

08000d2c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d30:	bf00      	nop
 8000d32:	46bd      	mov	sp, r7
 8000d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d38:	4770      	bx	lr

08000d3a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d3a:	b480      	push	{r7}
 8000d3c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d3e:	bf00      	nop
 8000d40:	46bd      	mov	sp, r7
 8000d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d46:	4770      	bx	lr

08000d48 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d4c:	f000 f93e 	bl	8000fcc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d50:	bf00      	nop
 8000d52:	bd80      	pop	{r7, pc}

08000d54 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8000d58:	4802      	ldr	r0, [pc, #8]	; (8000d64 <FDCAN1_IT0_IRQHandler+0x10>)
 8000d5a:	f000 fefd 	bl	8001b58 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8000d5e:	bf00      	nop
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	24000090 	.word	0x24000090

08000d68 <FDCAN1_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 1.
  */
void FDCAN1_IT1_IRQHandler(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 0 */

  /* USER CODE END FDCAN1_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8000d6c:	4802      	ldr	r0, [pc, #8]	; (8000d78 <FDCAN1_IT1_IRQHandler+0x10>)
 8000d6e:	f000 fef3 	bl	8001b58 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 1 */

  /* USER CODE END FDCAN1_IT1_IRQn 1 */
}
 8000d72:	bf00      	nop
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	24000090 	.word	0x24000090

08000d7c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000d80:	4b39      	ldr	r3, [pc, #228]	; (8000e68 <SystemInit+0xec>)
 8000d82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d86:	4a38      	ldr	r2, [pc, #224]	; (8000e68 <SystemInit+0xec>)
 8000d88:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d8c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000d90:	4b36      	ldr	r3, [pc, #216]	; (8000e6c <SystemInit+0xf0>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	f003 030f 	and.w	r3, r3, #15
 8000d98:	2b06      	cmp	r3, #6
 8000d9a:	d807      	bhi.n	8000dac <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000d9c:	4b33      	ldr	r3, [pc, #204]	; (8000e6c <SystemInit+0xf0>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	f023 030f 	bic.w	r3, r3, #15
 8000da4:	4a31      	ldr	r2, [pc, #196]	; (8000e6c <SystemInit+0xf0>)
 8000da6:	f043 0307 	orr.w	r3, r3, #7
 8000daa:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000dac:	4b30      	ldr	r3, [pc, #192]	; (8000e70 <SystemInit+0xf4>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	4a2f      	ldr	r2, [pc, #188]	; (8000e70 <SystemInit+0xf4>)
 8000db2:	f043 0301 	orr.w	r3, r3, #1
 8000db6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000db8:	4b2d      	ldr	r3, [pc, #180]	; (8000e70 <SystemInit+0xf4>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000dbe:	4b2c      	ldr	r3, [pc, #176]	; (8000e70 <SystemInit+0xf4>)
 8000dc0:	681a      	ldr	r2, [r3, #0]
 8000dc2:	492b      	ldr	r1, [pc, #172]	; (8000e70 <SystemInit+0xf4>)
 8000dc4:	4b2b      	ldr	r3, [pc, #172]	; (8000e74 <SystemInit+0xf8>)
 8000dc6:	4013      	ands	r3, r2
 8000dc8:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000dca:	4b28      	ldr	r3, [pc, #160]	; (8000e6c <SystemInit+0xf0>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	f003 030f 	and.w	r3, r3, #15
 8000dd2:	2b07      	cmp	r3, #7
 8000dd4:	d907      	bls.n	8000de6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000dd6:	4b25      	ldr	r3, [pc, #148]	; (8000e6c <SystemInit+0xf0>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	f023 030f 	bic.w	r3, r3, #15
 8000dde:	4a23      	ldr	r2, [pc, #140]	; (8000e6c <SystemInit+0xf0>)
 8000de0:	f043 0307 	orr.w	r3, r3, #7
 8000de4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000de6:	4b22      	ldr	r3, [pc, #136]	; (8000e70 <SystemInit+0xf4>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000dec:	4b20      	ldr	r3, [pc, #128]	; (8000e70 <SystemInit+0xf4>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000df2:	4b1f      	ldr	r3, [pc, #124]	; (8000e70 <SystemInit+0xf4>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000df8:	4b1d      	ldr	r3, [pc, #116]	; (8000e70 <SystemInit+0xf4>)
 8000dfa:	4a1f      	ldr	r2, [pc, #124]	; (8000e78 <SystemInit+0xfc>)
 8000dfc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000dfe:	4b1c      	ldr	r3, [pc, #112]	; (8000e70 <SystemInit+0xf4>)
 8000e00:	4a1e      	ldr	r2, [pc, #120]	; (8000e7c <SystemInit+0x100>)
 8000e02:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000e04:	4b1a      	ldr	r3, [pc, #104]	; (8000e70 <SystemInit+0xf4>)
 8000e06:	4a1e      	ldr	r2, [pc, #120]	; (8000e80 <SystemInit+0x104>)
 8000e08:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000e0a:	4b19      	ldr	r3, [pc, #100]	; (8000e70 <SystemInit+0xf4>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000e10:	4b17      	ldr	r3, [pc, #92]	; (8000e70 <SystemInit+0xf4>)
 8000e12:	4a1b      	ldr	r2, [pc, #108]	; (8000e80 <SystemInit+0x104>)
 8000e14:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000e16:	4b16      	ldr	r3, [pc, #88]	; (8000e70 <SystemInit+0xf4>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000e1c:	4b14      	ldr	r3, [pc, #80]	; (8000e70 <SystemInit+0xf4>)
 8000e1e:	4a18      	ldr	r2, [pc, #96]	; (8000e80 <SystemInit+0x104>)
 8000e20:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000e22:	4b13      	ldr	r3, [pc, #76]	; (8000e70 <SystemInit+0xf4>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000e28:	4b11      	ldr	r3, [pc, #68]	; (8000e70 <SystemInit+0xf4>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	4a10      	ldr	r2, [pc, #64]	; (8000e70 <SystemInit+0xf4>)
 8000e2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e32:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000e34:	4b0e      	ldr	r3, [pc, #56]	; (8000e70 <SystemInit+0xf4>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000e3a:	4b12      	ldr	r3, [pc, #72]	; (8000e84 <SystemInit+0x108>)
 8000e3c:	681a      	ldr	r2, [r3, #0]
 8000e3e:	4b12      	ldr	r3, [pc, #72]	; (8000e88 <SystemInit+0x10c>)
 8000e40:	4013      	ands	r3, r2
 8000e42:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000e46:	d202      	bcs.n	8000e4e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000e48:	4b10      	ldr	r3, [pc, #64]	; (8000e8c <SystemInit+0x110>)
 8000e4a:	2201      	movs	r2, #1
 8000e4c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000e4e:	4b10      	ldr	r3, [pc, #64]	; (8000e90 <SystemInit+0x114>)
 8000e50:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000e54:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000e56:	4b04      	ldr	r3, [pc, #16]	; (8000e68 <SystemInit+0xec>)
 8000e58:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000e5c:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8000e5e:	bf00      	nop
 8000e60:	46bd      	mov	sp, r7
 8000e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e66:	4770      	bx	lr
 8000e68:	e000ed00 	.word	0xe000ed00
 8000e6c:	52002000 	.word	0x52002000
 8000e70:	58024400 	.word	0x58024400
 8000e74:	eaf6ed7f 	.word	0xeaf6ed7f
 8000e78:	02020200 	.word	0x02020200
 8000e7c:	01ff0000 	.word	0x01ff0000
 8000e80:	01010280 	.word	0x01010280
 8000e84:	5c001000 	.word	0x5c001000
 8000e88:	ffff0000 	.word	0xffff0000
 8000e8c:	51008108 	.word	0x51008108
 8000e90:	52004000 	.word	0x52004000

08000e94 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000e94:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ecc <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000e98:	f7ff ff70 	bl	8000d7c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000e9c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000e9e:	e003      	b.n	8000ea8 <LoopCopyDataInit>

08000ea0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000ea0:	4b0b      	ldr	r3, [pc, #44]	; (8000ed0 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 8000ea2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000ea4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000ea6:	3104      	adds	r1, #4

08000ea8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000ea8:	480a      	ldr	r0, [pc, #40]	; (8000ed4 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 8000eaa:	4b0b      	ldr	r3, [pc, #44]	; (8000ed8 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 8000eac:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000eae:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000eb0:	d3f6      	bcc.n	8000ea0 <CopyDataInit>
  ldr  r2, =_sbss
 8000eb2:	4a0a      	ldr	r2, [pc, #40]	; (8000edc <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8000eb4:	e002      	b.n	8000ebc <LoopFillZerobss>

08000eb6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000eb6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000eb8:	f842 3b04 	str.w	r3, [r2], #4

08000ebc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000ebc:	4b08      	ldr	r3, [pc, #32]	; (8000ee0 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 8000ebe:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000ec0:	d3f9      	bcc.n	8000eb6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ec2:	f005 f80b 	bl	8005edc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ec6:	f7ff fc5d 	bl	8000784 <main>
  bx  lr    
 8000eca:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000ecc:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 8000ed0:	08006008 	.word	0x08006008
  ldr  r0, =_sdata
 8000ed4:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 8000ed8:	24000010 	.word	0x24000010
  ldr  r2, =_sbss
 8000edc:	24000010 	.word	0x24000010
  ldr  r3, = _ebss
 8000ee0:	24000214 	.word	0x24000214

08000ee4 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ee4:	e7fe      	b.n	8000ee4 <ADC3_IRQHandler>
	...

08000ee8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b082      	sub	sp, #8
 8000eec:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000eee:	2003      	movs	r0, #3
 8000ef0:	f000 f968 	bl	80011c4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000ef4:	f002 fa9c 	bl	8003430 <HAL_RCC_GetSysClockFreq>
 8000ef8:	4601      	mov	r1, r0
 8000efa:	4b15      	ldr	r3, [pc, #84]	; (8000f50 <HAL_Init+0x68>)
 8000efc:	699b      	ldr	r3, [r3, #24]
 8000efe:	0a1b      	lsrs	r3, r3, #8
 8000f00:	f003 030f 	and.w	r3, r3, #15
 8000f04:	4a13      	ldr	r2, [pc, #76]	; (8000f54 <HAL_Init+0x6c>)
 8000f06:	5cd3      	ldrb	r3, [r2, r3]
 8000f08:	f003 031f 	and.w	r3, r3, #31
 8000f0c:	fa21 f303 	lsr.w	r3, r1, r3
 8000f10:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000f12:	4b0f      	ldr	r3, [pc, #60]	; (8000f50 <HAL_Init+0x68>)
 8000f14:	699b      	ldr	r3, [r3, #24]
 8000f16:	f003 030f 	and.w	r3, r3, #15
 8000f1a:	4a0e      	ldr	r2, [pc, #56]	; (8000f54 <HAL_Init+0x6c>)
 8000f1c:	5cd3      	ldrb	r3, [r2, r3]
 8000f1e:	f003 031f 	and.w	r3, r3, #31
 8000f22:	687a      	ldr	r2, [r7, #4]
 8000f24:	fa22 f303 	lsr.w	r3, r2, r3
 8000f28:	4a0b      	ldr	r2, [pc, #44]	; (8000f58 <HAL_Init+0x70>)
 8000f2a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000f2c:	4a0b      	ldr	r2, [pc, #44]	; (8000f5c <HAL_Init+0x74>)
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f32:	2000      	movs	r0, #0
 8000f34:	f000 f814 	bl	8000f60 <HAL_InitTick>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d001      	beq.n	8000f42 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000f3e:	2301      	movs	r3, #1
 8000f40:	e002      	b.n	8000f48 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000f42:	f7ff fe1f 	bl	8000b84 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f46:	2300      	movs	r3, #0
}
 8000f48:	4618      	mov	r0, r3
 8000f4a:	3708      	adds	r7, #8
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	58024400 	.word	0x58024400
 8000f54:	08005fc0 	.word	0x08005fc0
 8000f58:	24000004 	.word	0x24000004
 8000f5c:	24000000 	.word	0x24000000

08000f60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000f68:	4b15      	ldr	r3, [pc, #84]	; (8000fc0 <HAL_InitTick+0x60>)
 8000f6a:	781b      	ldrb	r3, [r3, #0]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d101      	bne.n	8000f74 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000f70:	2301      	movs	r3, #1
 8000f72:	e021      	b.n	8000fb8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000f74:	4b13      	ldr	r3, [pc, #76]	; (8000fc4 <HAL_InitTick+0x64>)
 8000f76:	681a      	ldr	r2, [r3, #0]
 8000f78:	4b11      	ldr	r3, [pc, #68]	; (8000fc0 <HAL_InitTick+0x60>)
 8000f7a:	781b      	ldrb	r3, [r3, #0]
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f82:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f86:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f000 f94d 	bl	800122a <HAL_SYSTICK_Config>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d001      	beq.n	8000f9a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000f96:	2301      	movs	r3, #1
 8000f98:	e00e      	b.n	8000fb8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	2b0f      	cmp	r3, #15
 8000f9e:	d80a      	bhi.n	8000fb6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	6879      	ldr	r1, [r7, #4]
 8000fa4:	f04f 30ff 	mov.w	r0, #4294967295
 8000fa8:	f000 f917 	bl	80011da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fac:	4a06      	ldr	r2, [pc, #24]	; (8000fc8 <HAL_InitTick+0x68>)
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	e000      	b.n	8000fb8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000fb6:	2301      	movs	r3, #1
}
 8000fb8:	4618      	mov	r0, r3
 8000fba:	3708      	adds	r7, #8
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	2400000c 	.word	0x2400000c
 8000fc4:	24000000 	.word	0x24000000
 8000fc8:	24000008 	.word	0x24000008

08000fcc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000fd0:	4b06      	ldr	r3, [pc, #24]	; (8000fec <HAL_IncTick+0x20>)
 8000fd2:	781b      	ldrb	r3, [r3, #0]
 8000fd4:	461a      	mov	r2, r3
 8000fd6:	4b06      	ldr	r3, [pc, #24]	; (8000ff0 <HAL_IncTick+0x24>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	4413      	add	r3, r2
 8000fdc:	4a04      	ldr	r2, [pc, #16]	; (8000ff0 <HAL_IncTick+0x24>)
 8000fde:	6013      	str	r3, [r2, #0]
}
 8000fe0:	bf00      	nop
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop
 8000fec:	2400000c 	.word	0x2400000c
 8000ff0:	24000210 	.word	0x24000210

08000ff4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ff8:	4b03      	ldr	r3, [pc, #12]	; (8001008 <HAL_GetTick+0x14>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
}
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	46bd      	mov	sp, r7
 8001000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop
 8001008:	24000210 	.word	0x24000210

0800100c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001010:	4b03      	ldr	r3, [pc, #12]	; (8001020 <HAL_GetREVID+0x14>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	0c1b      	lsrs	r3, r3, #16
}
 8001016:	4618      	mov	r0, r3
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr
 8001020:	5c001000 	.word	0x5c001000

08001024 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001024:	b480      	push	{r7}
 8001026:	b085      	sub	sp, #20
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	f003 0307 	and.w	r3, r3, #7
 8001032:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001034:	4b0b      	ldr	r3, [pc, #44]	; (8001064 <__NVIC_SetPriorityGrouping+0x40>)
 8001036:	68db      	ldr	r3, [r3, #12]
 8001038:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800103a:	68ba      	ldr	r2, [r7, #8]
 800103c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001040:	4013      	ands	r3, r2
 8001042:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001048:	68bb      	ldr	r3, [r7, #8]
 800104a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800104c:	4b06      	ldr	r3, [pc, #24]	; (8001068 <__NVIC_SetPriorityGrouping+0x44>)
 800104e:	4313      	orrs	r3, r2
 8001050:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001052:	4a04      	ldr	r2, [pc, #16]	; (8001064 <__NVIC_SetPriorityGrouping+0x40>)
 8001054:	68bb      	ldr	r3, [r7, #8]
 8001056:	60d3      	str	r3, [r2, #12]
}
 8001058:	bf00      	nop
 800105a:	3714      	adds	r7, #20
 800105c:	46bd      	mov	sp, r7
 800105e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001062:	4770      	bx	lr
 8001064:	e000ed00 	.word	0xe000ed00
 8001068:	05fa0000 	.word	0x05fa0000

0800106c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001070:	4b04      	ldr	r3, [pc, #16]	; (8001084 <__NVIC_GetPriorityGrouping+0x18>)
 8001072:	68db      	ldr	r3, [r3, #12]
 8001074:	0a1b      	lsrs	r3, r3, #8
 8001076:	f003 0307 	and.w	r3, r3, #7
}
 800107a:	4618      	mov	r0, r3
 800107c:	46bd      	mov	sp, r7
 800107e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001082:	4770      	bx	lr
 8001084:	e000ed00 	.word	0xe000ed00

08001088 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001088:	b480      	push	{r7}
 800108a:	b083      	sub	sp, #12
 800108c:	af00      	add	r7, sp, #0
 800108e:	4603      	mov	r3, r0
 8001090:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001092:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001096:	2b00      	cmp	r3, #0
 8001098:	db0b      	blt.n	80010b2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800109a:	88fb      	ldrh	r3, [r7, #6]
 800109c:	f003 021f 	and.w	r2, r3, #31
 80010a0:	4907      	ldr	r1, [pc, #28]	; (80010c0 <__NVIC_EnableIRQ+0x38>)
 80010a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010a6:	095b      	lsrs	r3, r3, #5
 80010a8:	2001      	movs	r0, #1
 80010aa:	fa00 f202 	lsl.w	r2, r0, r2
 80010ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80010b2:	bf00      	nop
 80010b4:	370c      	adds	r7, #12
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr
 80010be:	bf00      	nop
 80010c0:	e000e100 	.word	0xe000e100

080010c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b083      	sub	sp, #12
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	4603      	mov	r3, r0
 80010cc:	6039      	str	r1, [r7, #0]
 80010ce:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80010d0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	db0a      	blt.n	80010ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	b2da      	uxtb	r2, r3
 80010dc:	490c      	ldr	r1, [pc, #48]	; (8001110 <__NVIC_SetPriority+0x4c>)
 80010de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010e2:	0112      	lsls	r2, r2, #4
 80010e4:	b2d2      	uxtb	r2, r2
 80010e6:	440b      	add	r3, r1
 80010e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010ec:	e00a      	b.n	8001104 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	b2da      	uxtb	r2, r3
 80010f2:	4908      	ldr	r1, [pc, #32]	; (8001114 <__NVIC_SetPriority+0x50>)
 80010f4:	88fb      	ldrh	r3, [r7, #6]
 80010f6:	f003 030f 	and.w	r3, r3, #15
 80010fa:	3b04      	subs	r3, #4
 80010fc:	0112      	lsls	r2, r2, #4
 80010fe:	b2d2      	uxtb	r2, r2
 8001100:	440b      	add	r3, r1
 8001102:	761a      	strb	r2, [r3, #24]
}
 8001104:	bf00      	nop
 8001106:	370c      	adds	r7, #12
 8001108:	46bd      	mov	sp, r7
 800110a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110e:	4770      	bx	lr
 8001110:	e000e100 	.word	0xe000e100
 8001114:	e000ed00 	.word	0xe000ed00

08001118 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001118:	b480      	push	{r7}
 800111a:	b089      	sub	sp, #36	; 0x24
 800111c:	af00      	add	r7, sp, #0
 800111e:	60f8      	str	r0, [r7, #12]
 8001120:	60b9      	str	r1, [r7, #8]
 8001122:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	f003 0307 	and.w	r3, r3, #7
 800112a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800112c:	69fb      	ldr	r3, [r7, #28]
 800112e:	f1c3 0307 	rsb	r3, r3, #7
 8001132:	2b04      	cmp	r3, #4
 8001134:	bf28      	it	cs
 8001136:	2304      	movcs	r3, #4
 8001138:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800113a:	69fb      	ldr	r3, [r7, #28]
 800113c:	3304      	adds	r3, #4
 800113e:	2b06      	cmp	r3, #6
 8001140:	d902      	bls.n	8001148 <NVIC_EncodePriority+0x30>
 8001142:	69fb      	ldr	r3, [r7, #28]
 8001144:	3b03      	subs	r3, #3
 8001146:	e000      	b.n	800114a <NVIC_EncodePriority+0x32>
 8001148:	2300      	movs	r3, #0
 800114a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800114c:	f04f 32ff 	mov.w	r2, #4294967295
 8001150:	69bb      	ldr	r3, [r7, #24]
 8001152:	fa02 f303 	lsl.w	r3, r2, r3
 8001156:	43da      	mvns	r2, r3
 8001158:	68bb      	ldr	r3, [r7, #8]
 800115a:	401a      	ands	r2, r3
 800115c:	697b      	ldr	r3, [r7, #20]
 800115e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001160:	f04f 31ff 	mov.w	r1, #4294967295
 8001164:	697b      	ldr	r3, [r7, #20]
 8001166:	fa01 f303 	lsl.w	r3, r1, r3
 800116a:	43d9      	mvns	r1, r3
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001170:	4313      	orrs	r3, r2
         );
}
 8001172:	4618      	mov	r0, r3
 8001174:	3724      	adds	r7, #36	; 0x24
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr
	...

08001180 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	3b01      	subs	r3, #1
 800118c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001190:	d301      	bcc.n	8001196 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001192:	2301      	movs	r3, #1
 8001194:	e00f      	b.n	80011b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001196:	4a0a      	ldr	r2, [pc, #40]	; (80011c0 <SysTick_Config+0x40>)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	3b01      	subs	r3, #1
 800119c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800119e:	210f      	movs	r1, #15
 80011a0:	f04f 30ff 	mov.w	r0, #4294967295
 80011a4:	f7ff ff8e 	bl	80010c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011a8:	4b05      	ldr	r3, [pc, #20]	; (80011c0 <SysTick_Config+0x40>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011ae:	4b04      	ldr	r3, [pc, #16]	; (80011c0 <SysTick_Config+0x40>)
 80011b0:	2207      	movs	r2, #7
 80011b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011b4:	2300      	movs	r3, #0
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	3708      	adds	r7, #8
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	e000e010 	.word	0xe000e010

080011c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b082      	sub	sp, #8
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011cc:	6878      	ldr	r0, [r7, #4]
 80011ce:	f7ff ff29 	bl	8001024 <__NVIC_SetPriorityGrouping>
}
 80011d2:	bf00      	nop
 80011d4:	3708      	adds	r7, #8
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}

080011da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011da:	b580      	push	{r7, lr}
 80011dc:	b086      	sub	sp, #24
 80011de:	af00      	add	r7, sp, #0
 80011e0:	4603      	mov	r3, r0
 80011e2:	60b9      	str	r1, [r7, #8]
 80011e4:	607a      	str	r2, [r7, #4]
 80011e6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80011e8:	f7ff ff40 	bl	800106c <__NVIC_GetPriorityGrouping>
 80011ec:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011ee:	687a      	ldr	r2, [r7, #4]
 80011f0:	68b9      	ldr	r1, [r7, #8]
 80011f2:	6978      	ldr	r0, [r7, #20]
 80011f4:	f7ff ff90 	bl	8001118 <NVIC_EncodePriority>
 80011f8:	4602      	mov	r2, r0
 80011fa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80011fe:	4611      	mov	r1, r2
 8001200:	4618      	mov	r0, r3
 8001202:	f7ff ff5f 	bl	80010c4 <__NVIC_SetPriority>
}
 8001206:	bf00      	nop
 8001208:	3718      	adds	r7, #24
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}

0800120e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800120e:	b580      	push	{r7, lr}
 8001210:	b082      	sub	sp, #8
 8001212:	af00      	add	r7, sp, #0
 8001214:	4603      	mov	r3, r0
 8001216:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001218:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800121c:	4618      	mov	r0, r3
 800121e:	f7ff ff33 	bl	8001088 <__NVIC_EnableIRQ>
}
 8001222:	bf00      	nop
 8001224:	3708      	adds	r7, #8
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}

0800122a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800122a:	b580      	push	{r7, lr}
 800122c:	b082      	sub	sp, #8
 800122e:	af00      	add	r7, sp, #0
 8001230:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001232:	6878      	ldr	r0, [r7, #4]
 8001234:	f7ff ffa4 	bl	8001180 <SysTick_Config>
 8001238:	4603      	mov	r3, r0
}
 800123a:	4618      	mov	r0, r3
 800123c:	3708      	adds	r7, #8
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
	...

08001244 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b098      	sub	sp, #96	; 0x60
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 800124c:	4a99      	ldr	r2, [pc, #612]	; (80014b4 <HAL_FDCAN_Init+0x270>)
 800124e:	f107 030c 	add.w	r3, r7, #12
 8001252:	4611      	mov	r1, r2
 8001254:	224c      	movs	r2, #76	; 0x4c
 8001256:	4618      	mov	r0, r3
 8001258:	f004 fe64 	bl	8005f24 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d101      	bne.n	8001266 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8001262:	2301      	movs	r3, #1
 8001264:	e23d      	b.n	80016e2 <HAL_FDCAN_Init+0x49e>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	4a93      	ldr	r2, [pc, #588]	; (80014b8 <HAL_FDCAN_Init+0x274>)
 800126c:	4293      	cmp	r3, r2
 800126e:	d106      	bne.n	800127e <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001278:	461a      	mov	r2, r3
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	605a      	str	r2, [r3, #4]
  {
    assert_param(IS_FDCAN_DATA_SIZE(hfdcan->Init.TxElmtSize));
  }

#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8001284:	b2db      	uxtb	r3, r3
 8001286:	2b00      	cmp	r3, #0
 8001288:	d155      	bne.n	8001336 <HAL_FDCAN_Init+0xf2>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	2200      	movs	r2, #0
 800128e:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Reset callbacks to legacy functions */
    hfdcan->ClockCalibrationCallback    = HAL_FDCAN_ClockCalibrationCallback;    /* Legacy weak ClockCalibrationCallback    */
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	4a89      	ldr	r2, [pc, #548]	; (80014bc <HAL_FDCAN_Init+0x278>)
 8001296:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    hfdcan->TxEventFifoCallback         = HAL_FDCAN_TxEventFifoCallback;         /* Legacy weak TxEventFifoCallback         */
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	4a88      	ldr	r2, [pc, #544]	; (80014c0 <HAL_FDCAN_Init+0x27c>)
 800129e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
    hfdcan->RxFifo0Callback             = HAL_FDCAN_RxFifo0Callback;             /* Legacy weak RxFifo0Callback             */
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	4a87      	ldr	r2, [pc, #540]	; (80014c4 <HAL_FDCAN_Init+0x280>)
 80012a6:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
    hfdcan->RxFifo1Callback             = HAL_FDCAN_RxFifo1Callback;             /* Legacy weak RxFifo1Callback             */
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	4a86      	ldr	r2, [pc, #536]	; (80014c8 <HAL_FDCAN_Init+0x284>)
 80012ae:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
    hfdcan->TxFifoEmptyCallback         = HAL_FDCAN_TxFifoEmptyCallback;         /* Legacy weak TxFifoEmptyCallback         */
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	4a85      	ldr	r2, [pc, #532]	; (80014cc <HAL_FDCAN_Init+0x288>)
 80012b6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
    hfdcan->TxBufferCompleteCallback    = HAL_FDCAN_TxBufferCompleteCallback;    /* Legacy weak TxBufferCompleteCallback    */
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	4a84      	ldr	r2, [pc, #528]	; (80014d0 <HAL_FDCAN_Init+0x28c>)
 80012be:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
    hfdcan->TxBufferAbortCallback       = HAL_FDCAN_TxBufferAbortCallback;       /* Legacy weak TxBufferAbortCallback       */
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	4a83      	ldr	r2, [pc, #524]	; (80014d4 <HAL_FDCAN_Init+0x290>)
 80012c6:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
    hfdcan->RxBufferNewMessageCallback  = HAL_FDCAN_RxBufferNewMessageCallback;  /* Legacy weak RxBufferNewMessageCallback  */
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	4a82      	ldr	r2, [pc, #520]	; (80014d8 <HAL_FDCAN_Init+0x294>)
 80012ce:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
    hfdcan->HighPriorityMessageCallback = HAL_FDCAN_HighPriorityMessageCallback; /* Legacy weak HighPriorityMessageCallback */
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	4a81      	ldr	r2, [pc, #516]	; (80014dc <HAL_FDCAN_Init+0x298>)
 80012d6:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    hfdcan->TimestampWraparoundCallback = HAL_FDCAN_TimestampWraparoundCallback; /* Legacy weak TimestampWraparoundCallback */
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	4a80      	ldr	r2, [pc, #512]	; (80014e0 <HAL_FDCAN_Init+0x29c>)
 80012de:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
    hfdcan->TimeoutOccurredCallback     = HAL_FDCAN_TimeoutOccurredCallback;     /* Legacy weak TimeoutOccurredCallback     */
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	4a7f      	ldr	r2, [pc, #508]	; (80014e4 <HAL_FDCAN_Init+0x2a0>)
 80012e6:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
    hfdcan->ErrorCallback               = HAL_FDCAN_ErrorCallback;               /* Legacy weak ErrorCallback               */
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	4a7e      	ldr	r2, [pc, #504]	; (80014e8 <HAL_FDCAN_Init+0x2a4>)
 80012ee:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
    hfdcan->ErrorStatusCallback         = HAL_FDCAN_ErrorStatusCallback;         /* Legacy weak ErrorStatusCallback         */
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	4a7d      	ldr	r2, [pc, #500]	; (80014ec <HAL_FDCAN_Init+0x2a8>)
 80012f6:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
    hfdcan->TT_ScheduleSyncCallback     = HAL_FDCAN_TT_ScheduleSyncCallback;     /* Legacy weak TT_ScheduleSyncCallback     */
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	4a7c      	ldr	r2, [pc, #496]	; (80014f0 <HAL_FDCAN_Init+0x2ac>)
 80012fe:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
    hfdcan->TT_TimeMarkCallback         = HAL_FDCAN_TT_TimeMarkCallback;         /* Legacy weak TT_TimeMarkCallback         */
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	4a7b      	ldr	r2, [pc, #492]	; (80014f4 <HAL_FDCAN_Init+0x2b0>)
 8001306:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
    hfdcan->TT_StopWatchCallback        = HAL_FDCAN_TT_StopWatchCallback;        /* Legacy weak TT_StopWatchCallback        */
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	4a7a      	ldr	r2, [pc, #488]	; (80014f8 <HAL_FDCAN_Init+0x2b4>)
 800130e:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    hfdcan->TT_GlobalTimeCallback       = HAL_FDCAN_TT_GlobalTimeCallback;       /* Legacy weak TT_GlobalTimeCallback       */
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	4a79      	ldr	r2, [pc, #484]	; (80014fc <HAL_FDCAN_Init+0x2b8>)
 8001316:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0

    if (hfdcan->MspInitCallback == NULL)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8001320:	2b00      	cmp	r3, #0
 8001322:	d103      	bne.n	800132c <HAL_FDCAN_Init+0xe8>
    {
      hfdcan->MspInitCallback = HAL_FDCAN_MspInit;  /* Legacy weak MspInit */
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	4a76      	ldr	r2, [pc, #472]	; (8001500 <HAL_FDCAN_Init+0x2bc>)
 8001328:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    }

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8001332:	6878      	ldr	r0, [r7, #4]
 8001334:	4798      	blx	r3
    HAL_FDCAN_MspInit(hfdcan);
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	699a      	ldr	r2, [r3, #24]
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f022 0210 	bic.w	r2, r2, #16
 8001344:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001346:	f7ff fe55 	bl	8000ff4 <HAL_GetTick>
 800134a:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800134c:	e014      	b.n	8001378 <HAL_FDCAN_Init+0x134>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800134e:	f7ff fe51 	bl	8000ff4 <HAL_GetTick>
 8001352:	4602      	mov	r2, r0
 8001354:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001356:	1ad3      	subs	r3, r2, r3
 8001358:	2b0a      	cmp	r3, #10
 800135a:	d90d      	bls.n	8001378 <HAL_FDCAN_Init+0x134>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001362:	f043 0201 	orr.w	r2, r3, #1
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	2203      	movs	r2, #3
 8001370:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8001374:	2301      	movs	r3, #1
 8001376:	e1b4      	b.n	80016e2 <HAL_FDCAN_Init+0x49e>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	699b      	ldr	r3, [r3, #24]
 800137e:	f003 0308 	and.w	r3, r3, #8
 8001382:	2b08      	cmp	r3, #8
 8001384:	d0e3      	beq.n	800134e <HAL_FDCAN_Init+0x10a>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	699a      	ldr	r2, [r3, #24]
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f042 0201 	orr.w	r2, r2, #1
 8001394:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001396:	f7ff fe2d 	bl	8000ff4 <HAL_GetTick>
 800139a:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800139c:	e014      	b.n	80013c8 <HAL_FDCAN_Init+0x184>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800139e:	f7ff fe29 	bl	8000ff4 <HAL_GetTick>
 80013a2:	4602      	mov	r2, r0
 80013a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80013a6:	1ad3      	subs	r3, r2, r3
 80013a8:	2b0a      	cmp	r3, #10
 80013aa:	d90d      	bls.n	80013c8 <HAL_FDCAN_Init+0x184>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80013b2:	f043 0201 	orr.w	r2, r3, #1
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	2203      	movs	r2, #3
 80013c0:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 80013c4:	2301      	movs	r3, #1
 80013c6:	e18c      	b.n	80016e2 <HAL_FDCAN_Init+0x49e>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	699b      	ldr	r3, [r3, #24]
 80013ce:	f003 0301 	and.w	r3, r3, #1
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d0e3      	beq.n	800139e <HAL_FDCAN_Init+0x15a>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	699a      	ldr	r2, [r3, #24]
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f042 0202 	orr.w	r2, r2, #2
 80013e4:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	7c1b      	ldrb	r3, [r3, #16]
 80013ea:	2b01      	cmp	r3, #1
 80013ec:	d108      	bne.n	8001400 <HAL_FDCAN_Init+0x1bc>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	699a      	ldr	r2, [r3, #24]
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80013fc:	619a      	str	r2, [r3, #24]
 80013fe:	e007      	b.n	8001410 <HAL_FDCAN_Init+0x1cc>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	699a      	ldr	r2, [r3, #24]
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800140e:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	7c5b      	ldrb	r3, [r3, #17]
 8001414:	2b01      	cmp	r3, #1
 8001416:	d108      	bne.n	800142a <HAL_FDCAN_Init+0x1e6>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	699a      	ldr	r2, [r3, #24]
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001426:	619a      	str	r2, [r3, #24]
 8001428:	e007      	b.n	800143a <HAL_FDCAN_Init+0x1f6>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	699a      	ldr	r2, [r3, #24]
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001438:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	7c9b      	ldrb	r3, [r3, #18]
 800143e:	2b01      	cmp	r3, #1
 8001440:	d108      	bne.n	8001454 <HAL_FDCAN_Init+0x210>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	699a      	ldr	r2, [r3, #24]
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001450:	619a      	str	r2, [r3, #24]
 8001452:	e007      	b.n	8001464 <HAL_FDCAN_Init+0x220>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	699a      	ldr	r2, [r3, #24]
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001462:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	699b      	ldr	r3, [r3, #24]
 800146a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	689a      	ldr	r2, [r3, #8]
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	430a      	orrs	r2, r1
 8001478:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	699a      	ldr	r2, [r3, #24]
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8001488:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	691a      	ldr	r2, [r3, #16]
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f022 0210 	bic.w	r2, r2, #16
 8001498:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	68db      	ldr	r3, [r3, #12]
 800149e:	2b01      	cmp	r3, #1
 80014a0:	d130      	bne.n	8001504 <HAL_FDCAN_Init+0x2c0>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	699a      	ldr	r2, [r3, #24]
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f042 0204 	orr.w	r2, r2, #4
 80014b0:	619a      	str	r2, [r3, #24]
 80014b2:	e054      	b.n	800155e <HAL_FDCAN_Init+0x31a>
 80014b4:	08005f64 	.word	0x08005f64
 80014b8:	4000a000 	.word	0x4000a000
 80014bc:	08002059 	.word	0x08002059
 80014c0:	0800206f 	.word	0x0800206f
 80014c4:	08002085 	.word	0x08002085
 80014c8:	0800209b 	.word	0x0800209b
 80014cc:	080020b1 	.word	0x080020b1
 80014d0:	080020c5 	.word	0x080020c5
 80014d4:	080020db 	.word	0x080020db
 80014d8:	080020f1 	.word	0x080020f1
 80014dc:	0800212d 	.word	0x0800212d
 80014e0:	08002105 	.word	0x08002105
 80014e4:	08002119 	.word	0x08002119
 80014e8:	08002141 	.word	0x08002141
 80014ec:	08002155 	.word	0x08002155
 80014f0:	0800216b 	.word	0x0800216b
 80014f4:	08002181 	.word	0x08002181
 80014f8:	08002197 	.word	0x08002197
 80014fc:	080021af 	.word	0x080021af
 8001500:	08000bb9 	.word	0x08000bb9
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	68db      	ldr	r3, [r3, #12]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d028      	beq.n	800155e <HAL_FDCAN_Init+0x31a>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	68db      	ldr	r3, [r3, #12]
 8001510:	2b02      	cmp	r3, #2
 8001512:	d01c      	beq.n	800154e <HAL_FDCAN_Init+0x30a>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	699a      	ldr	r2, [r3, #24]
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001522:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	691a      	ldr	r2, [r3, #16]
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f042 0210 	orr.w	r2, r2, #16
 8001532:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	68db      	ldr	r3, [r3, #12]
 8001538:	2b03      	cmp	r3, #3
 800153a:	d110      	bne.n	800155e <HAL_FDCAN_Init+0x31a>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	699a      	ldr	r2, [r3, #24]
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f042 0220 	orr.w	r2, r2, #32
 800154a:	619a      	str	r2, [r3, #24]
 800154c:	e007      	b.n	800155e <HAL_FDCAN_Init+0x31a>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	699a      	ldr	r2, [r3, #24]
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f042 0220 	orr.w	r2, r2, #32
 800155c:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	699b      	ldr	r3, [r3, #24]
 8001562:	3b01      	subs	r3, #1
 8001564:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	69db      	ldr	r3, [r3, #28]
 800156a:	3b01      	subs	r3, #1
 800156c:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800156e:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	6a1b      	ldr	r3, [r3, #32]
 8001574:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001576:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	695b      	ldr	r3, [r3, #20]
 800157e:	3b01      	subs	r3, #1
 8001580:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001586:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001588:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	689b      	ldr	r3, [r3, #8]
 800158e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001592:	d115      	bne.n	80015c0 <HAL_FDCAN_Init+0x37c>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001598:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800159e:	3b01      	subs	r3, #1
 80015a0:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80015a2:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a8:	3b01      	subs	r3, #1
 80015aa:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 80015ac:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015b4:	3b01      	subs	r3, #1
 80015b6:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 80015bc:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80015be:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d00a      	beq.n	80015de <HAL_FDCAN_Init+0x39a>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	430a      	orrs	r2, r1
 80015da:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015e6:	4413      	add	r3, r2
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d012      	beq.n	8001612 <HAL_FDCAN_Init+0x3ce>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80015f4:	f023 0107 	bic.w	r1, r3, #7
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80015fc:	009b      	lsls	r3, r3, #2
 80015fe:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001602:	4413      	add	r3, r2
 8001604:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	430a      	orrs	r2, r1
 800160e:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001616:	2b00      	cmp	r3, #0
 8001618:	d012      	beq.n	8001640 <HAL_FDCAN_Init+0x3fc>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8001622:	f023 0107 	bic.w	r1, r3, #7
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800162a:	009b      	lsls	r3, r3, #2
 800162c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001630:	4413      	add	r3, r2
 8001632:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	430a      	orrs	r2, r1
 800163c:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001644:	2b00      	cmp	r3, #0
 8001646:	d013      	beq.n	8001670 <HAL_FDCAN_Init+0x42c>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8001650:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001658:	009b      	lsls	r3, r3, #2
 800165a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800165e:	4413      	add	r3, r2
 8001660:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8001664:	011a      	lsls	r2, r3, #4
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	430a      	orrs	r2, r1
 800166c:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001674:	2b00      	cmp	r3, #0
 8001676:	d013      	beq.n	80016a0 <HAL_FDCAN_Init+0x45c>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8001680:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001688:	009b      	lsls	r3, r3, #2
 800168a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800168e:	4413      	add	r3, r2
 8001690:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8001694:	021a      	lsls	r2, r3, #8
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	430a      	orrs	r2, r1
 800169c:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4a11      	ldr	r2, [pc, #68]	; (80016ec <HAL_FDCAN_Init+0x4a8>)
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d107      	bne.n	80016ba <HAL_FDCAN_Init+0x476>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	689a      	ldr	r2, [r3, #8]
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	f022 0203 	bic.w	r2, r2, #3
 80016b8:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	2200      	movs	r2, #0
 80016be:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	2200      	movs	r2, #0
 80016c6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	2201      	movs	r2, #1
 80016ce:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80016d2:	6878      	ldr	r0, [r7, #4]
 80016d4:	f000 fd76 	bl	80021c4 <FDCAN_CalcultateRamBlockAddresses>
 80016d8:	4603      	mov	r3, r0
 80016da:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 80016de:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	3760      	adds	r7, #96	; 0x60
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	4000a000 	.word	0x4000a000

080016f0 <HAL_FDCAN_RegisterRxFifo0Callback>:
  * @param  hfdcan FDCAN handle
  * @param  pCallback pointer to the Rx Fifo 0 Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_RegisterRxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, pFDCAN_RxFifo0CallbackTypeDef pCallback)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b085      	sub	sp, #20
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
 80016f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80016fa:	2300      	movs	r3, #0
 80016fc:	73fb      	strb	r3, [r7, #15]

  if (pCallback == NULL)
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	2b00      	cmp	r3, #0
 8001702:	d109      	bne.n	8001718 <HAL_FDCAN_RegisterRxFifo0Callback+0x28>
  {
    /* Update the error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_INVALID_CALLBACK;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800170a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    return HAL_ERROR;
 8001714:	2301      	movs	r3, #1
 8001716:	e015      	b.n	8001744 <HAL_FDCAN_RegisterRxFifo0Callback+0x54>
  }

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800171e:	b2db      	uxtb	r3, r3
 8001720:	2b01      	cmp	r3, #1
 8001722:	d104      	bne.n	800172e <HAL_FDCAN_RegisterRxFifo0Callback+0x3e>
  {
    hfdcan->RxFifo0Callback = pCallback;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	683a      	ldr	r2, [r7, #0]
 8001728:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 800172c:	e009      	b.n	8001742 <HAL_FDCAN_RegisterRxFifo0Callback+0x52>
  }
  else
  {
    /* Update the error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_INVALID_CALLBACK;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001734:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Return error status */
    status =  HAL_ERROR;
 800173e:	2301      	movs	r3, #1
 8001740:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8001742:	7bfb      	ldrb	r3, [r7, #15]
}
 8001744:	4618      	mov	r0, r3
 8001746:	3714      	adds	r7, #20
 8001748:	46bd      	mov	sp, r7
 800174a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174e:	4770      	bx	lr

08001750 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8001750:	b480      	push	{r7}
 8001752:	b083      	sub	sp, #12
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800175e:	b2db      	uxtb	r3, r3
 8001760:	2b01      	cmp	r3, #1
 8001762:	d111      	bne.n	8001788 <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	2202      	movs	r2, #2
 8001768:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	699a      	ldr	r2, [r3, #24]
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f022 0201 	bic.w	r2, r2, #1
 800177a:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2200      	movs	r2, #0
 8001780:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Return function status */
    return HAL_OK;
 8001784:	2300      	movs	r3, #0
 8001786:	e008      	b.n	800179a <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800178e:	f043 0204 	orr.w	r2, r3, #4
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8001798:	2301      	movs	r3, #1
  }
}
 800179a:	4618      	mov	r0, r3
 800179c:	370c      	adds	r7, #12
 800179e:	46bd      	mov	sp, r7
 80017a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a4:	4770      	bx	lr
	...

080017a8 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxHeader pointer to a FDCAN_RxHeaderTypeDef structure.
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation, FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b08b      	sub	sp, #44	; 0x2c
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	60f8      	str	r0, [r7, #12]
 80017b0:	60b9      	str	r1, [r7, #8]
 80017b2:	607a      	str	r2, [r7, #4]
 80017b4:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 80017b6:	2300      	movs	r3, #0
 80017b8:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80017c0:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 80017c2:	7efb      	ldrb	r3, [r7, #27]
 80017c4:	2b02      	cmp	r3, #2
 80017c6:	f040 813b 	bne.w	8001a40 <HAL_FDCAN_GetRxMessage+0x298>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80017ca:	68bb      	ldr	r3, [r7, #8]
 80017cc:	2b40      	cmp	r3, #64	; 0x40
 80017ce:	d145      	bne.n	800185c <HAL_FDCAN_GetRxMessage+0xb4>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80017d8:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d109      	bne.n	80017f4 <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80017e6:	f043 0220 	orr.w	r2, r3, #32
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 80017f0:	2301      	movs	r3, #1
 80017f2:	e12e      	b.n	8001a52 <HAL_FDCAN_GetRxMessage+0x2aa>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80017fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001800:	2b00      	cmp	r3, #0
 8001802:	d109      	bne.n	8001818 <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800180a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8001814:	2301      	movs	r3, #1
 8001816:	e11c      	b.n	8001a52 <HAL_FDCAN_GetRxMessage+0x2aa>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001820:	0e1b      	lsrs	r3, r3, #24
 8001822:	f003 0301 	and.w	r3, r3, #1
 8001826:	2b01      	cmp	r3, #1
 8001828:	d103      	bne.n	8001832 <HAL_FDCAN_GetRxMessage+0x8a>
        {
          if(((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
            GetIndex = 1U;
          }
        }

        /* Calculate Rx FIFO 0 element index*/
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800183a:	0a1b      	lsrs	r3, r3, #8
 800183c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001840:	69fa      	ldr	r2, [r7, #28]
 8001842:	4413      	add	r3, r2
 8001844:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800184e:	69f9      	ldr	r1, [r7, #28]
 8001850:	fb01 f303 	mul.w	r3, r1, r3
 8001854:	009b      	lsls	r3, r3, #2
 8001856:	4413      	add	r3, r2
 8001858:	627b      	str	r3, [r7, #36]	; 0x24
 800185a:	e061      	b.n	8001920 <HAL_FDCAN_GetRxMessage+0x178>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 800185c:	68bb      	ldr	r3, [r7, #8]
 800185e:	2b41      	cmp	r3, #65	; 0x41
 8001860:	d145      	bne.n	80018ee <HAL_FDCAN_GetRxMessage+0x146>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800186a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800186e:	2b00      	cmp	r3, #0
 8001870:	d109      	bne.n	8001886 <HAL_FDCAN_GetRxMessage+0xde>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001878:	f043 0220 	orr.w	r2, r3, #32
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8001882:	2301      	movs	r3, #1
 8001884:	e0e5      	b.n	8001a52 <HAL_FDCAN_GetRxMessage+0x2aa>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800188e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001892:	2b00      	cmp	r3, #0
 8001894:	d109      	bne.n	80018aa <HAL_FDCAN_GetRxMessage+0x102>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800189c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 80018a6:	2301      	movs	r3, #1
 80018a8:	e0d3      	b.n	8001a52 <HAL_FDCAN_GetRxMessage+0x2aa>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80018b2:	0e1b      	lsrs	r3, r3, #24
 80018b4:	f003 0301 	and.w	r3, r3, #1
 80018b8:	2b01      	cmp	r3, #1
 80018ba:	d103      	bne.n	80018c4 <HAL_FDCAN_GetRxMessage+0x11c>
        {
          if(((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
            GetIndex = 1U;
          }
        }

        /* Calculate Rx FIFO 1 element index*/
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80018cc:	0a1b      	lsrs	r3, r3, #8
 80018ce:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80018d2:	69fa      	ldr	r2, [r7, #28]
 80018d4:	4413      	add	r3, r2
 80018d6:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018e0:	69f9      	ldr	r1, [r7, #28]
 80018e2:	fb01 f303 	mul.w	r3, r1, r3
 80018e6:	009b      	lsls	r3, r3, #2
 80018e8:	4413      	add	r3, r2
 80018ea:	627b      	str	r3, [r7, #36]	; 0x24
 80018ec:	e018      	b.n	8001920 <HAL_FDCAN_GetRxMessage+0x178>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80018f2:	68ba      	ldr	r2, [r7, #8]
 80018f4:	429a      	cmp	r2, r3
 80018f6:	d309      	bcc.n	800190c <HAL_FDCAN_GetRxMessage+0x164>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80018fe:	f043 0220 	orr.w	r2, r3, #32
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8001908:	2301      	movs	r3, #1
 800190a:	e0a2      	b.n	8001a52 <HAL_FDCAN_GetRxMessage+0x2aa>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001914:	68b9      	ldr	r1, [r7, #8]
 8001916:	fb01 f303 	mul.w	r3, r1, r3
 800191a:	009b      	lsls	r3, r3, #2
 800191c:	4413      	add	r3, r2
 800191e:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8001920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d107      	bne.n	8001944 <HAL_FDCAN_GetRxMessage+0x19c>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18);
 8001934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	0c9b      	lsrs	r3, r3, #18
 800193a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	601a      	str	r2, [r3, #0]
 8001942:	e005      	b.n	8001950 <HAL_FDCAN_GetRxMessage+0x1a8>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8001944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8001950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 800195c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8001968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800196a:	3304      	adds	r3, #4
 800196c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 800196e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	b29a      	uxth	r2, r3
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 8001978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8001984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8001990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24);
 800199c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	0e1b      	lsrs	r3, r3, #24
 80019a2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31);
 80019aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	0fda      	lsrs	r2, r3, #31
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 80019b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b6:	3304      	adds	r3, #4
 80019b8:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 80019ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019bc:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 80019be:	2300      	movs	r3, #0
 80019c0:	623b      	str	r3, [r7, #32]
 80019c2:	e00a      	b.n	80019da <HAL_FDCAN_GetRxMessage+0x232>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 80019c4:	697a      	ldr	r2, [r7, #20]
 80019c6:	6a3b      	ldr	r3, [r7, #32]
 80019c8:	441a      	add	r2, r3
 80019ca:	6839      	ldr	r1, [r7, #0]
 80019cc:	6a3b      	ldr	r3, [r7, #32]
 80019ce:	440b      	add	r3, r1
 80019d0:	7812      	ldrb	r2, [r2, #0]
 80019d2:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 80019d4:	6a3b      	ldr	r3, [r7, #32]
 80019d6:	3301      	adds	r3, #1
 80019d8:	623b      	str	r3, [r7, #32]
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	68db      	ldr	r3, [r3, #12]
 80019de:	0c1b      	lsrs	r3, r3, #16
 80019e0:	4a1f      	ldr	r2, [pc, #124]	; (8001a60 <HAL_FDCAN_GetRxMessage+0x2b8>)
 80019e2:	5cd3      	ldrb	r3, [r2, r3]
 80019e4:	461a      	mov	r2, r3
 80019e6:	6a3b      	ldr	r3, [r7, #32]
 80019e8:	4293      	cmp	r3, r2
 80019ea:	d3eb      	bcc.n	80019c4 <HAL_FDCAN_GetRxMessage+0x21c>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80019ec:	68bb      	ldr	r3, [r7, #8]
 80019ee:	2b40      	cmp	r3, #64	; 0x40
 80019f0:	d105      	bne.n	80019fe <HAL_FDCAN_GetRxMessage+0x256>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	69fa      	ldr	r2, [r7, #28]
 80019f8:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 80019fc:	e01e      	b.n	8001a3c <HAL_FDCAN_GetRxMessage+0x294>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 80019fe:	68bb      	ldr	r3, [r7, #8]
 8001a00:	2b41      	cmp	r3, #65	; 0x41
 8001a02:	d105      	bne.n	8001a10 <HAL_FDCAN_GetRxMessage+0x268>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	69fa      	ldr	r2, [r7, #28]
 8001a0a:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 8001a0e:	e015      	b.n	8001a3c <HAL_FDCAN_GetRxMessage+0x294>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 8001a10:	68bb      	ldr	r3, [r7, #8]
 8001a12:	2b1f      	cmp	r3, #31
 8001a14:	d808      	bhi.n	8001a28 <HAL_FDCAN_GetRxMessage+0x280>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1 << RxLocation);
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	2101      	movs	r1, #1
 8001a1c:	68ba      	ldr	r2, [r7, #8]
 8001a1e:	fa01 f202 	lsl.w	r2, r1, r2
 8001a22:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 8001a26:	e009      	b.n	8001a3c <HAL_FDCAN_GetRxMessage+0x294>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1 << (RxLocation & 0x1FU));
 8001a28:	68bb      	ldr	r3, [r7, #8]
 8001a2a:	f003 021f 	and.w	r2, r3, #31
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	2101      	movs	r1, #1
 8001a34:	fa01 f202 	lsl.w	r2, r1, r2
 8001a38:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	e008      	b.n	8001a52 <HAL_FDCAN_GetRxMessage+0x2aa>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001a46:	f043 0208 	orr.w	r2, r3, #8
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8001a50:	2301      	movs	r3, #1
  }
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	372c      	adds	r7, #44	; 0x2c
 8001a56:	46bd      	mov	sp, r7
 8001a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5c:	4770      	bx	lr
 8001a5e:	bf00      	nop
 8001a60:	08005fd0 	.word	0x08005fd0

08001a64 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_COMPLETE
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs, uint32_t BufferIndexes)
{
 8001a64:	b480      	push	{r7}
 8001a66:	b087      	sub	sp, #28
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	60f8      	str	r0, [r7, #12]
 8001a6c:	60b9      	str	r1, [r7, #8]
 8001a6e:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8001a76:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8001a78:	7dfb      	ldrb	r3, [r7, #23]
 8001a7a:	2b01      	cmp	r3, #1
 8001a7c:	d002      	beq.n	8001a84 <HAL_FDCAN_ActivateNotification+0x20>
 8001a7e:	7dfb      	ldrb	r3, [r7, #23]
 8001a80:	2b02      	cmp	r3, #2
 8001a82:	d155      	bne.n	8001b30 <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001a8a:	68bb      	ldr	r3, [r7, #8]
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d108      	bne.n	8001aa4 <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f042 0201 	orr.w	r2, r2, #1
 8001aa0:	65da      	str	r2, [r3, #92]	; 0x5c
 8001aa2:	e014      	b.n	8001ace <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001aaa:	68bb      	ldr	r3, [r7, #8]
 8001aac:	4013      	ands	r3, r2
 8001aae:	68ba      	ldr	r2, [r7, #8]
 8001ab0:	429a      	cmp	r2, r3
 8001ab2:	d108      	bne.n	8001ac6 <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f042 0202 	orr.w	r2, r2, #2
 8001ac2:	65da      	str	r2, [r3, #92]	; 0x5c
 8001ac4:	e003      	b.n	8001ace <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	2203      	movs	r2, #3
 8001acc:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8001ace:	68bb      	ldr	r3, [r7, #8]
 8001ad0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d009      	beq.n	8001aec <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occure if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	687a      	ldr	r2, [r7, #4]
 8001ae6:	430a      	orrs	r2, r1
 8001ae8:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8001aec:	68bb      	ldr	r3, [r7, #8]
 8001aee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d009      	beq.n	8001b0a <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occure if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f8d3 10e4 	ldr.w	r1, [r3, #228]	; 0xe4
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	687a      	ldr	r2, [r7, #4]
 8001b04:	430a      	orrs	r2, r1
 8001b06:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8001b10:	68ba      	ldr	r2, [r7, #8]
 8001b12:	4b0f      	ldr	r3, [pc, #60]	; (8001b50 <HAL_FDCAN_ActivateNotification+0xec>)
 8001b14:	4013      	ands	r3, r2
 8001b16:	68fa      	ldr	r2, [r7, #12]
 8001b18:	6812      	ldr	r2, [r2, #0]
 8001b1a:	430b      	orrs	r3, r1
 8001b1c:	6553      	str	r3, [r2, #84]	; 0x54
 8001b1e:	4b0d      	ldr	r3, [pc, #52]	; (8001b54 <HAL_FDCAN_ActivateNotification+0xf0>)
 8001b20:	695a      	ldr	r2, [r3, #20]
 8001b22:	68bb      	ldr	r3, [r7, #8]
 8001b24:	0f9b      	lsrs	r3, r3, #30
 8001b26:	490b      	ldr	r1, [pc, #44]	; (8001b54 <HAL_FDCAN_ActivateNotification+0xf0>)
 8001b28:	4313      	orrs	r3, r2
 8001b2a:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	e008      	b.n	8001b42 <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001b36:	f043 0202 	orr.w	r2, r3, #2
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8001b40:	2301      	movs	r3, #1
  }
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	371c      	adds	r7, #28
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr
 8001b4e:	bf00      	nop
 8001b50:	3fcfffff 	.word	0x3fcfffff
 8001b54:	4000a800 	.word	0x4000a800

08001b58 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b092      	sub	sp, #72	; 0x48
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  uint32_t TTDistErrors;
  uint32_t TTFatalErrors;
  uint32_t SWTime;
  uint32_t SWCycleCount;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 8001b60:	4b98      	ldr	r3, [pc, #608]	; (8001dc4 <HAL_FDCAN_IRQHandler+0x26c>)
 8001b62:	691b      	ldr	r3, [r3, #16]
 8001b64:	079b      	lsls	r3, r3, #30
 8001b66:	647b      	str	r3, [r7, #68]	; 0x44
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 8001b68:	4b96      	ldr	r3, [pc, #600]	; (8001dc4 <HAL_FDCAN_IRQHandler+0x26c>)
 8001b6a:	695b      	ldr	r3, [r3, #20]
 8001b6c:	079b      	lsls	r3, r3, #30
 8001b6e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001b70:	4013      	ands	r3, r2
 8001b72:	647b      	str	r3, [r7, #68]	; 0x44
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b7a:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8001b7e:	643b      	str	r3, [r7, #64]	; 0x40
  TxEventFifoITs &= hfdcan->Instance->IE;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b86:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001b88:	4013      	ands	r3, r2
 8001b8a:	643b      	str	r3, [r7, #64]	; 0x40
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b92:	f003 030f 	and.w	r3, r3, #15
 8001b96:	63fb      	str	r3, [r7, #60]	; 0x3c
  RxFifo0ITs &= hfdcan->Instance->IE;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b9e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001baa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001bae:	63bb      	str	r3, [r7, #56]	; 0x38
  RxFifo1ITs &= hfdcan->Instance->IE;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bb6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001bb8:	4013      	ands	r3, r2
 8001bba:	63bb      	str	r3, [r7, #56]	; 0x38
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001bc2:	f003 5371 	and.w	r3, r3, #1010827264	; 0x3c400000
 8001bc6:	637b      	str	r3, [r7, #52]	; 0x34
  Errors &= hfdcan->Instance->IE;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	637b      	str	r3, [r7, #52]	; 0x34
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001bda:	f003 7360 	and.w	r3, r3, #58720256	; 0x3800000
 8001bde:	633b      	str	r3, [r7, #48]	; 0x30
  ErrorStatusITs &= hfdcan->Instance->IE;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001be6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001be8:	4013      	ands	r3, r2
 8001bea:	633b      	str	r3, [r7, #48]	; 0x30

  /* High Priority Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bf2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d013      	beq.n	8001c22 <HAL_FDCAN_IRQHandler+0xca>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d00c      	beq.n	8001c22 <HAL_FDCAN_IRQHandler+0xca>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c10:	651a      	str	r2, [r3, #80]	; 0x50
 8001c12:	4b6c      	ldr	r3, [pc, #432]	; (8001dc4 <HAL_FDCAN_IRQHandler+0x26c>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	611a      	str	r2, [r3, #16]

#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001c1e:	6878      	ldr	r0, [r7, #4]
 8001c20:	4798      	blx	r3
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d020      	beq.n	8001c72 <HAL_FDCAN_IRQHandler+0x11a>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d019      	beq.n	8001c72 <HAL_FDCAN_IRQHandler+0x11a>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8001c46:	62fb      	str	r3, [r7, #44]	; 0x2c
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8001c50:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c52:	4013      	ands	r3, r2
 8001c54:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c5e:	651a      	str	r2, [r3, #80]	; 0x50
 8001c60:	4b58      	ldr	r3, [pc, #352]	; (8001dc4 <HAL_FDCAN_IRQHandler+0x26c>)
 8001c62:	2200      	movs	r2, #0
 8001c64:	611a      	str	r2, [r3, #16]

#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8001c6c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001c6e:	6878      	ldr	r0, [r7, #4]
 8001c70:	4798      	blx	r3
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 8001c72:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d00f      	beq.n	8001c98 <HAL_FDCAN_IRQHandler+0x140>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681a      	ldr	r2, [r3, #0]
 8001c7c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001c7e:	4b52      	ldr	r3, [pc, #328]	; (8001dc8 <HAL_FDCAN_IRQHandler+0x270>)
 8001c80:	400b      	ands	r3, r1
 8001c82:	6513      	str	r3, [r2, #80]	; 0x50
 8001c84:	4a4f      	ldr	r2, [pc, #316]	; (8001dc4 <HAL_FDCAN_IRQHandler+0x26c>)
 8001c86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c88:	0f9b      	lsrs	r3, r3, #30
 8001c8a:	6113      	str	r3, [r2, #16]

#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8001c92:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001c94:	6878      	ldr	r0, [r7, #4]
 8001c96:	4798      	blx	r3
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8001c98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d00f      	beq.n	8001cbe <HAL_FDCAN_IRQHandler+0x166>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681a      	ldr	r2, [r3, #0]
 8001ca2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8001ca4:	4b48      	ldr	r3, [pc, #288]	; (8001dc8 <HAL_FDCAN_IRQHandler+0x270>)
 8001ca6:	400b      	ands	r3, r1
 8001ca8:	6513      	str	r3, [r2, #80]	; 0x50
 8001caa:	4a46      	ldr	r2, [pc, #280]	; (8001dc4 <HAL_FDCAN_IRQHandler+0x26c>)
 8001cac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001cae:	0f9b      	lsrs	r3, r3, #30
 8001cb0:	6113      	str	r3, [r2, #16]

#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001cb8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8001cba:	6878      	ldr	r0, [r7, #4]
 8001cbc:	4798      	blx	r3
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8001cbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d00f      	beq.n	8001ce4 <HAL_FDCAN_IRQHandler+0x18c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681a      	ldr	r2, [r3, #0]
 8001cc8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001cca:	4b3f      	ldr	r3, [pc, #252]	; (8001dc8 <HAL_FDCAN_IRQHandler+0x270>)
 8001ccc:	400b      	ands	r3, r1
 8001cce:	6513      	str	r3, [r2, #80]	; 0x50
 8001cd0:	4a3c      	ldr	r2, [pc, #240]	; (8001dc4 <HAL_FDCAN_IRQHandler+0x26c>)
 8001cd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001cd4:	0f9b      	lsrs	r3, r3, #30
 8001cd6:	6113      	str	r3, [r2, #16]

#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8001cde:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001ce0:	6878      	ldr	r0, [r7, #4]
 8001ce2:	4798      	blx	r3
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8001ce4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d00f      	beq.n	8001d0a <HAL_FDCAN_IRQHandler+0x1b2>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681a      	ldr	r2, [r3, #0]
 8001cee:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001cf0:	4b35      	ldr	r3, [pc, #212]	; (8001dc8 <HAL_FDCAN_IRQHandler+0x270>)
 8001cf2:	400b      	ands	r3, r1
 8001cf4:	6513      	str	r3, [r2, #80]	; 0x50
 8001cf6:	4a33      	ldr	r2, [pc, #204]	; (8001dc4 <HAL_FDCAN_IRQHandler+0x26c>)
 8001cf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001cfa:	0f9b      	lsrs	r3, r3, #30
 8001cfc:	6113      	str	r3, [r2, #16]

#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8001d04:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001d06:	6878      	ldr	r0, [r7, #4]
 8001d08:	4798      	blx	r3
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d10:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d013      	beq.n	8001d40 <HAL_FDCAN_IRQHandler+0x1e8>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d1e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d00c      	beq.n	8001d40 <HAL_FDCAN_IRQHandler+0x1e8>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001d2e:	651a      	str	r2, [r3, #80]	; 0x50
 8001d30:	4b24      	ldr	r3, [pc, #144]	; (8001dc4 <HAL_FDCAN_IRQHandler+0x26c>)
 8001d32:	2200      	movs	r2, #0
 8001d34:	611a      	str	r2, [r3, #16]

#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8001d3c:	6878      	ldr	r0, [r7, #4]
 8001d3e:	4798      	blx	r3
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d46:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d020      	beq.n	8001d90 <HAL_FDCAN_IRQHandler+0x238>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d54:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d019      	beq.n	8001d90 <HAL_FDCAN_IRQHandler+0x238>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001d64:	62bb      	str	r3, [r7, #40]	; 0x28
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d6e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001d70:	4013      	ands	r3, r2
 8001d72:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d7c:	651a      	str	r2, [r3, #80]	; 0x50
 8001d7e:	4b11      	ldr	r3, [pc, #68]	; (8001dc4 <HAL_FDCAN_IRQHandler+0x26c>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	611a      	str	r2, [r3, #16]

#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8001d8a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001d8c:	6878      	ldr	r0, [r7, #4]
 8001d8e:	4798      	blx	r3
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != 0U)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d96:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d018      	beq.n	8001dd0 <HAL_FDCAN_IRQHandler+0x278>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != 0U)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001da4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d011      	beq.n	8001dd0 <HAL_FDCAN_IRQHandler+0x278>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001db4:	651a      	str	r2, [r3, #80]	; 0x50
 8001db6:	4b03      	ldr	r3, [pc, #12]	; (8001dc4 <HAL_FDCAN_IRQHandler+0x26c>)
 8001db8:	2200      	movs	r2, #0
 8001dba:	611a      	str	r2, [r3, #16]

#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8001dc2:	e003      	b.n	8001dcc <HAL_FDCAN_IRQHandler+0x274>
 8001dc4:	4000a800 	.word	0x4000a800
 8001dc8:	3fcfffff 	.word	0x3fcfffff
 8001dcc:	6878      	ldr	r0, [r7, #4]
 8001dce:	4798      	blx	r3
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dd6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d013      	beq.n	8001e06 <HAL_FDCAN_IRQHandler+0x2ae>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001de4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d00c      	beq.n	8001e06 <HAL_FDCAN_IRQHandler+0x2ae>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001df4:	651a      	str	r2, [r3, #80]	; 0x50
 8001df6:	4b95      	ldr	r3, [pc, #596]	; (800204c <HAL_FDCAN_IRQHandler+0x4f4>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	611a      	str	r2, [r3, #16]

#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8001e02:	6878      	ldr	r0, [r7, #4]
 8001e04:	4798      	blx	r3
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e0c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d013      	beq.n	8001e3c <HAL_FDCAN_IRQHandler+0x2e4>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e1a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d00c      	beq.n	8001e3c <HAL_FDCAN_IRQHandler+0x2e4>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001e2a:	651a      	str	r2, [r3, #80]	; 0x50
 8001e2c:	4b87      	ldr	r3, [pc, #540]	; (800204c <HAL_FDCAN_IRQHandler+0x4f4>)
 8001e2e:	2200      	movs	r2, #0
 8001e30:	611a      	str	r2, [r3, #16]

#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8001e38:	6878      	ldr	r0, [r7, #4]
 8001e3a:	4798      	blx	r3
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d016      	beq.n	8001e78 <HAL_FDCAN_IRQHandler+0x320>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d00f      	beq.n	8001e78 <HAL_FDCAN_IRQHandler+0x320>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001e60:	651a      	str	r2, [r3, #80]	; 0x50
 8001e62:	4b7a      	ldr	r3, [pc, #488]	; (800204c <HAL_FDCAN_IRQHandler+0x4f4>)
 8001e64:	2200      	movs	r2, #0
 8001e66:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001e6e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8001e78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d00f      	beq.n	8001e9e <HAL_FDCAN_IRQHandler+0x346>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681a      	ldr	r2, [r3, #0]
 8001e82:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001e84:	4b72      	ldr	r3, [pc, #456]	; (8002050 <HAL_FDCAN_IRQHandler+0x4f8>)
 8001e86:	400b      	ands	r3, r1
 8001e88:	6513      	str	r3, [r2, #80]	; 0x50
 8001e8a:	4a70      	ldr	r2, [pc, #448]	; (800204c <HAL_FDCAN_IRQHandler+0x4f4>)
 8001e8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e8e:	0f9b      	lsrs	r3, r3, #30
 8001e90:	6113      	str	r3, [r2, #16]

#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8001e98:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001e9a:	6878      	ldr	r0, [r7, #4]
 8001e9c:	4798      	blx	r3
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8001e9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d011      	beq.n	8001ec8 <HAL_FDCAN_IRQHandler+0x370>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681a      	ldr	r2, [r3, #0]
 8001ea8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001eaa:	4b69      	ldr	r3, [pc, #420]	; (8002050 <HAL_FDCAN_IRQHandler+0x4f8>)
 8001eac:	400b      	ands	r3, r1
 8001eae:	6513      	str	r3, [r2, #80]	; 0x50
 8001eb0:	4a66      	ldr	r2, [pc, #408]	; (800204c <HAL_FDCAN_IRQHandler+0x4f4>)
 8001eb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001eb4:	0f9b      	lsrs	r3, r3, #30
 8001eb6:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8001ebe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ec0:	431a      	orrs	r2, r3
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a61      	ldr	r2, [pc, #388]	; (8002054 <HAL_FDCAN_IRQHandler+0x4fc>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	f040 80ae 	bne.w	8002030 <HAL_FDCAN_IRQHandler+0x4d8>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	689b      	ldr	r3, [r3, #8]
 8001eda:	f003 0303 	and.w	r3, r3, #3
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	f000 80a6 	beq.w	8002030 <HAL_FDCAN_IRQHandler+0x4d8>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	6a1b      	ldr	r3, [r3, #32]
 8001eea:	f003 030f 	and.w	r3, r3, #15
 8001eee:	627b      	str	r3, [r7, #36]	; 0x24
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ef6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ef8:	4013      	ands	r3, r2
 8001efa:	627b      	str	r3, [r7, #36]	; 0x24
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	6a1b      	ldr	r3, [r3, #32]
 8001f02:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001f06:	623b      	str	r3, [r7, #32]
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f0e:	6a3a      	ldr	r2, [r7, #32]
 8001f10:	4013      	ands	r3, r2
 8001f12:	623b      	str	r3, [r7, #32]
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	6a1b      	ldr	r3, [r3, #32]
 8001f1a:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8001f1e:	61fb      	str	r3, [r7, #28]
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f26:	69fa      	ldr	r2, [r7, #28]
 8001f28:	4013      	ands	r3, r2
 8001f2a:	61fb      	str	r3, [r7, #28]
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	6a1b      	ldr	r3, [r3, #32]
 8001f32:	f403 43fc 	and.w	r3, r3, #32256	; 0x7e00
 8001f36:	61bb      	str	r3, [r7, #24]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f3e:	69ba      	ldr	r2, [r7, #24]
 8001f40:	4013      	ands	r3, r2
 8001f42:	61bb      	str	r3, [r7, #24]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	6a1b      	ldr	r3, [r3, #32]
 8001f4a:	f403 23f0 	and.w	r3, r3, #491520	; 0x78000
 8001f4e:	617b      	str	r3, [r7, #20]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f56:	697a      	ldr	r2, [r7, #20]
 8001f58:	4013      	ands	r3, r2
 8001f5a:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 8001f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d009      	beq.n	8001f76 <HAL_FDCAN_IRQHandler+0x41e>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f68:	621a      	str	r2, [r3, #32]

#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001f70:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001f72:	6878      	ldr	r0, [r7, #4]
 8001f74:	4798      	blx	r3
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 8001f76:	6a3b      	ldr	r3, [r7, #32]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d009      	beq.n	8001f90 <HAL_FDCAN_IRQHandler+0x438>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	6a3a      	ldr	r2, [r7, #32]
 8001f82:	621a      	str	r2, [r3, #32]

#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001f8a:	6a39      	ldr	r1, [r7, #32]
 8001f8c:	6878      	ldr	r0, [r7, #4]
 8001f8e:	4798      	blx	r3
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (__HAL_FDCAN_TT_GET_IT_SOURCE(hfdcan, FDCAN_TT_IT_STOP_WATCH) != 0U)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d01d      	beq.n	8001fda <HAL_FDCAN_IRQHandler+0x482>
      {
        if (__HAL_FDCAN_TT_GET_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH) != 0U)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	6a1b      	ldr	r3, [r3, #32]
 8001fa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d016      	beq.n	8001fda <HAL_FDCAN_IRQHandler+0x482>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fb2:	0c1b      	lsrs	r3, r3, #16
 8001fb4:	b29b      	uxth	r3, r3
 8001fb6:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fbe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001fc2:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	2240      	movs	r2, #64	; 0x40
 8001fca:	621a      	str	r2, [r3, #32]

#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8001fd2:	68fa      	ldr	r2, [r7, #12]
 8001fd4:	6939      	ldr	r1, [r7, #16]
 8001fd6:	6878      	ldr	r0, [r7, #4]
 8001fd8:	4798      	blx	r3
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 8001fda:	69fb      	ldr	r3, [r7, #28]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d009      	beq.n	8001ff4 <HAL_FDCAN_IRQHandler+0x49c>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	69fa      	ldr	r2, [r7, #28]
 8001fe6:	621a      	str	r2, [r3, #32]

#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fee:	69f9      	ldr	r1, [r7, #28]
 8001ff0:	6878      	ldr	r0, [r7, #4]
 8001ff2:	4798      	blx	r3
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 8001ff4:	69bb      	ldr	r3, [r7, #24]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d00b      	beq.n	8002012 <HAL_FDCAN_IRQHandler+0x4ba>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	69ba      	ldr	r2, [r7, #24]
 8002000:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8002008:	69bb      	ldr	r3, [r7, #24]
 800200a:	431a      	orrs	r2, r3
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 8002012:	697b      	ldr	r3, [r7, #20]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d00b      	beq.n	8002030 <HAL_FDCAN_IRQHandler+0x4d8>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	697a      	ldr	r2, [r7, #20]
 800201e:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8002026:	697b      	ldr	r3, [r7, #20]
 8002028:	431a      	orrs	r2, r3
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002036:	2b00      	cmp	r3, #0
 8002038:	d004      	beq.n	8002044 <HAL_FDCAN_IRQHandler+0x4ec>
  {
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8002040:	6878      	ldr	r0, [r7, #4]
 8002042:	4798      	blx	r3
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8002044:	bf00      	nop
 8002046:	3748      	adds	r7, #72	; 0x48
 8002048:	46bd      	mov	sp, r7
 800204a:	bd80      	pop	{r7, pc}
 800204c:	4000a800 	.word	0x4000a800
 8002050:	3fcfffff 	.word	0x3fcfffff
 8002054:	4000a000 	.word	0x4000a000

08002058 <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 8002058:	b480      	push	{r7}
 800205a:	b083      	sub	sp, #12
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
 8002060:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 8002062:	bf00      	nop
 8002064:	370c      	adds	r7, #12
 8002066:	46bd      	mov	sp, r7
 8002068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206c:	4770      	bx	lr

0800206e <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 800206e:	b480      	push	{r7}
 8002070:	b083      	sub	sp, #12
 8002072:	af00      	add	r7, sp, #0
 8002074:	6078      	str	r0, [r7, #4]
 8002076:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8002078:	bf00      	nop
 800207a:	370c      	adds	r7, #12
 800207c:	46bd      	mov	sp, r7
 800207e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002082:	4770      	bx	lr

08002084 <HAL_FDCAN_RxFifo0Callback>:
  * @param  RxFifo0ITs indicates which Rx FIFO 0 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo0_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8002084:	b480      	push	{r7}
 8002086:	b083      	sub	sp, #12
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
 800208c:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo0ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo0Callback could be implemented in the user file
   */
}
 800208e:	bf00      	nop
 8002090:	370c      	adds	r7, #12
 8002092:	46bd      	mov	sp, r7
 8002094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002098:	4770      	bx	lr

0800209a <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 800209a:	b480      	push	{r7}
 800209c:	b083      	sub	sp, #12
 800209e:	af00      	add	r7, sp, #0
 80020a0:	6078      	str	r0, [r7, #4]
 80020a2:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 80020a4:	bf00      	nop
 80020a6:	370c      	adds	r7, #12
 80020a8:	46bd      	mov	sp, r7
 80020aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ae:	4770      	bx	lr

080020b0 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b083      	sub	sp, #12
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 80020b8:	bf00      	nop
 80020ba:	370c      	adds	r7, #12
 80020bc:	46bd      	mov	sp, r7
 80020be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c2:	4770      	bx	lr

080020c4 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80020c4:	b480      	push	{r7}
 80020c6:	b083      	sub	sp, #12
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
 80020cc:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 80020ce:	bf00      	nop
 80020d0:	370c      	adds	r7, #12
 80020d2:	46bd      	mov	sp, r7
 80020d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d8:	4770      	bx	lr

080020da <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80020da:	b480      	push	{r7}
 80020dc:	b083      	sub	sp, #12
 80020de:	af00      	add	r7, sp, #0
 80020e0:	6078      	str	r0, [r7, #4]
 80020e2:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 80020e4:	bf00      	nop
 80020e6:	370c      	adds	r7, #12
 80020e8:	46bd      	mov	sp, r7
 80020ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ee:	4770      	bx	lr

080020f0 <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b083      	sub	sp, #12
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 80020f8:	bf00      	nop
 80020fa:	370c      	adds	r7, #12
 80020fc:	46bd      	mov	sp, r7
 80020fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002102:	4770      	bx	lr

08002104 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002104:	b480      	push	{r7}
 8002106:	b083      	sub	sp, #12
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 800210c:	bf00      	nop
 800210e:	370c      	adds	r7, #12
 8002110:	46bd      	mov	sp, r7
 8002112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002116:	4770      	bx	lr

08002118 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002118:	b480      	push	{r7}
 800211a:	b083      	sub	sp, #12
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8002120:	bf00      	nop
 8002122:	370c      	adds	r7, #12
 8002124:	46bd      	mov	sp, r7
 8002126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212a:	4770      	bx	lr

0800212c <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800212c:	b480      	push	{r7}
 800212e:	b083      	sub	sp, #12
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8002134:	bf00      	nop
 8002136:	370c      	adds	r7, #12
 8002138:	46bd      	mov	sp, r7
 800213a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213e:	4770      	bx	lr

08002140 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002140:	b480      	push	{r7}
 8002142:	b083      	sub	sp, #12
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8002148:	bf00      	nop
 800214a:	370c      	adds	r7, #12
 800214c:	46bd      	mov	sp, r7
 800214e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002152:	4770      	bx	lr

08002154 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8002154:	b480      	push	{r7}
 8002156:	b083      	sub	sp, #12
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
 800215c:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 800215e:	bf00      	nop
 8002160:	370c      	adds	r7, #12
 8002162:	46bd      	mov	sp, r7
 8002164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002168:	4770      	bx	lr

0800216a <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 800216a:	b480      	push	{r7}
 800216c:	b083      	sub	sp, #12
 800216e:	af00      	add	r7, sp, #0
 8002170:	6078      	str	r0, [r7, #4]
 8002172:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 8002174:	bf00      	nop
 8002176:	370c      	adds	r7, #12
 8002178:	46bd      	mov	sp, r7
 800217a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217e:	4770      	bx	lr

08002180 <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 8002180:	b480      	push	{r7}
 8002182:	b083      	sub	sp, #12
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
 8002188:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 800218a:	bf00      	nop
 800218c:	370c      	adds	r7, #12
 800218e:	46bd      	mov	sp, r7
 8002190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002194:	4770      	bx	lr

08002196 <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 8002196:	b480      	push	{r7}
 8002198:	b085      	sub	sp, #20
 800219a:	af00      	add	r7, sp, #0
 800219c:	60f8      	str	r0, [r7, #12]
 800219e:	60b9      	str	r1, [r7, #8]
 80021a0:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 80021a2:	bf00      	nop
 80021a4:	3714      	adds	r7, #20
 80021a6:	46bd      	mov	sp, r7
 80021a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ac:	4770      	bx	lr

080021ae <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 80021ae:	b480      	push	{r7}
 80021b0:	b083      	sub	sp, #12
 80021b2:	af00      	add	r7, sp, #0
 80021b4:	6078      	str	r0, [r7, #4]
 80021b6:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 80021b8:	bf00      	nop
 80021ba:	370c      	adds	r7, #12
 80021bc:	46bd      	mov	sp, r7
 80021be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c2:	4770      	bx	lr

080021c4 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b085      	sub	sp, #20
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021d0:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80021da:	4ba7      	ldr	r3, [pc, #668]	; (8002478 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80021dc:	4013      	ands	r3, r2
 80021de:	68ba      	ldr	r2, [r7, #8]
 80021e0:	0091      	lsls	r1, r2, #2
 80021e2:	687a      	ldr	r2, [r7, #4]
 80021e4:	6812      	ldr	r2, [r2, #0]
 80021e6:	430b      	orrs	r3, r1
 80021e8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80021f4:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021fc:	041a      	lsls	r2, r3, #16
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	430a      	orrs	r2, r1
 8002204:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800220c:	68ba      	ldr	r2, [r7, #8]
 800220e:	4413      	add	r3, r2
 8002210:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800221a:	4b97      	ldr	r3, [pc, #604]	; (8002478 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800221c:	4013      	ands	r3, r2
 800221e:	68ba      	ldr	r2, [r7, #8]
 8002220:	0091      	lsls	r1, r2, #2
 8002222:	687a      	ldr	r2, [r7, #4]
 8002224:	6812      	ldr	r2, [r2, #0]
 8002226:	430b      	orrs	r3, r1
 8002228:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002234:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800223c:	041a      	lsls	r2, r3, #16
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	430a      	orrs	r2, r1
 8002244:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800224c:	005b      	lsls	r3, r3, #1
 800224e:	68ba      	ldr	r2, [r7, #8]
 8002250:	4413      	add	r3, r2
 8002252:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800225c:	4b86      	ldr	r3, [pc, #536]	; (8002478 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800225e:	4013      	ands	r3, r2
 8002260:	68ba      	ldr	r2, [r7, #8]
 8002262:	0091      	lsls	r1, r2, #2
 8002264:	687a      	ldr	r2, [r7, #4]
 8002266:	6812      	ldr	r2, [r2, #0]
 8002268:	430b      	orrs	r3, r1
 800226a:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002276:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800227e:	041a      	lsls	r2, r3, #16
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	430a      	orrs	r2, r1
 8002286:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800228e:	687a      	ldr	r2, [r7, #4]
 8002290:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002292:	fb02 f303 	mul.w	r3, r2, r3
 8002296:	68ba      	ldr	r2, [r7, #8]
 8002298:	4413      	add	r3, r2
 800229a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80022a4:	4b74      	ldr	r3, [pc, #464]	; (8002478 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80022a6:	4013      	ands	r3, r2
 80022a8:	68ba      	ldr	r2, [r7, #8]
 80022aa:	0091      	lsls	r1, r2, #2
 80022ac:	687a      	ldr	r2, [r7, #4]
 80022ae:	6812      	ldr	r2, [r2, #0]
 80022b0:	430b      	orrs	r3, r1
 80022b2:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80022be:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022c6:	041a      	lsls	r2, r3, #16
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	430a      	orrs	r2, r1
 80022ce:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022d6:	687a      	ldr	r2, [r7, #4]
 80022d8:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80022da:	fb02 f303 	mul.w	r3, r2, r3
 80022de:	68ba      	ldr	r2, [r7, #8]
 80022e0:	4413      	add	r3, r2
 80022e2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 80022ec:	4b62      	ldr	r3, [pc, #392]	; (8002478 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80022ee:	4013      	ands	r3, r2
 80022f0:	68ba      	ldr	r2, [r7, #8]
 80022f2:	0091      	lsls	r1, r2, #2
 80022f4:	687a      	ldr	r2, [r7, #4]
 80022f6:	6812      	ldr	r2, [r2, #0]
 80022f8:	430b      	orrs	r3, r1
 80022fa:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002302:	687a      	ldr	r2, [r7, #4]
 8002304:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8002306:	fb02 f303 	mul.w	r3, r2, r3
 800230a:	68ba      	ldr	r2, [r7, #8]
 800230c:	4413      	add	r3, r2
 800230e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8002318:	4b57      	ldr	r3, [pc, #348]	; (8002478 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800231a:	4013      	ands	r3, r2
 800231c:	68ba      	ldr	r2, [r7, #8]
 800231e:	0091      	lsls	r1, r2, #2
 8002320:	687a      	ldr	r2, [r7, #4]
 8002322:	6812      	ldr	r2, [r2, #0]
 8002324:	430b      	orrs	r3, r1
 8002326:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002332:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800233a:	041a      	lsls	r2, r3, #16
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	430a      	orrs	r2, r1
 8002342:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800234a:	005b      	lsls	r3, r3, #1
 800234c:	68ba      	ldr	r2, [r7, #8]
 800234e:	4413      	add	r3, r2
 8002350:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800235a:	4b47      	ldr	r3, [pc, #284]	; (8002478 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800235c:	4013      	ands	r3, r2
 800235e:	68ba      	ldr	r2, [r7, #8]
 8002360:	0091      	lsls	r1, r2, #2
 8002362:	687a      	ldr	r2, [r7, #4]
 8002364:	6812      	ldr	r2, [r2, #0]
 8002366:	430b      	orrs	r3, r1
 8002368:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002374:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800237c:	041a      	lsls	r2, r3, #16
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	430a      	orrs	r2, r1
 8002384:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002390:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002398:	061a      	lsls	r2, r3, #24
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	430a      	orrs	r2, r1
 80023a0:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80023a8:	4b34      	ldr	r3, [pc, #208]	; (800247c <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 80023aa:	4413      	add	r3, r2
 80023ac:	009a      	lsls	r2, r3, #2
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023ba:	009b      	lsls	r3, r3, #2
 80023bc:	441a      	add	r2, r3
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023ca:	00db      	lsls	r3, r3, #3
 80023cc:	441a      	add	r2, r3
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023da:	6879      	ldr	r1, [r7, #4]
 80023dc:	6c49      	ldr	r1, [r1, #68]	; 0x44
 80023de:	fb01 f303 	mul.w	r3, r1, r3
 80023e2:	009b      	lsls	r3, r3, #2
 80023e4:	441a      	add	r2, r3
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023f2:	6879      	ldr	r1, [r7, #4]
 80023f4:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 80023f6:	fb01 f303 	mul.w	r3, r1, r3
 80023fa:	009b      	lsls	r3, r3, #2
 80023fc:	441a      	add	r2, r3
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800240a:	6879      	ldr	r1, [r7, #4]
 800240c:	6d49      	ldr	r1, [r1, #84]	; 0x54
 800240e:	fb01 f303 	mul.w	r3, r1, r3
 8002412:	009b      	lsls	r3, r3, #2
 8002414:	441a      	add	r2, r3
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002426:	00db      	lsls	r3, r3, #3
 8002428:	441a      	add	r2, r3
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800243a:	6879      	ldr	r1, [r7, #4]
 800243c:	6e89      	ldr	r1, [r1, #104]	; 0x68
 800243e:	fb01 f303 	mul.w	r3, r1, r3
 8002442:	009b      	lsls	r3, r3, #2
 8002444:	441a      	add	r2, r3
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002456:	6879      	ldr	r1, [r7, #4]
 8002458:	6e89      	ldr	r1, [r1, #104]	; 0x68
 800245a:	fb01 f303 	mul.w	r3, r1, r3
 800245e:	009b      	lsls	r3, r3, #2
 8002460:	441a      	add	r2, r3
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800246e:	4a04      	ldr	r2, [pc, #16]	; (8002480 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8002470:	4293      	cmp	r3, r2
 8002472:	d915      	bls.n	80024a0 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8002474:	e006      	b.n	8002484 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8002476:	bf00      	nop
 8002478:	ffff0003 	.word	0xffff0003
 800247c:	10002b00 	.word	0x10002b00
 8002480:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800248a:	f043 0220 	orr.w	r2, r3, #32
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2203      	movs	r2, #3
 8002498:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 800249c:	2301      	movs	r3, #1
 800249e:	e010      	b.n	80024c2 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80024a4:	60fb      	str	r3, [r7, #12]
 80024a6:	e005      	b.n	80024b4 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	2200      	movs	r2, #0
 80024ac:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	3304      	adds	r3, #4
 80024b2:	60fb      	str	r3, [r7, #12]
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024ba:	68fa      	ldr	r2, [r7, #12]
 80024bc:	429a      	cmp	r2, r3
 80024be:	d3f3      	bcc.n	80024a8 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 80024c0:	2300      	movs	r3, #0
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	3714      	adds	r7, #20
 80024c6:	46bd      	mov	sp, r7
 80024c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024cc:	4770      	bx	lr
 80024ce:	bf00      	nop

080024d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024d0:	b480      	push	{r7}
 80024d2:	b089      	sub	sp, #36	; 0x24
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
 80024d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80024da:	2300      	movs	r3, #0
 80024dc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80024de:	4b89      	ldr	r3, [pc, #548]	; (8002704 <HAL_GPIO_Init+0x234>)
 80024e0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80024e2:	e194      	b.n	800280e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	681a      	ldr	r2, [r3, #0]
 80024e8:	2101      	movs	r1, #1
 80024ea:	69fb      	ldr	r3, [r7, #28]
 80024ec:	fa01 f303 	lsl.w	r3, r1, r3
 80024f0:	4013      	ands	r3, r2
 80024f2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80024f4:	693b      	ldr	r3, [r7, #16]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	f000 8186 	beq.w	8002808 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	2b01      	cmp	r3, #1
 8002502:	d00b      	beq.n	800251c <HAL_GPIO_Init+0x4c>
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	2b02      	cmp	r3, #2
 800250a:	d007      	beq.n	800251c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002510:	2b11      	cmp	r3, #17
 8002512:	d003      	beq.n	800251c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	2b12      	cmp	r3, #18
 800251a:	d130      	bne.n	800257e <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	689b      	ldr	r3, [r3, #8]
 8002520:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002522:	69fb      	ldr	r3, [r7, #28]
 8002524:	005b      	lsls	r3, r3, #1
 8002526:	2203      	movs	r2, #3
 8002528:	fa02 f303 	lsl.w	r3, r2, r3
 800252c:	43db      	mvns	r3, r3
 800252e:	69ba      	ldr	r2, [r7, #24]
 8002530:	4013      	ands	r3, r2
 8002532:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	68da      	ldr	r2, [r3, #12]
 8002538:	69fb      	ldr	r3, [r7, #28]
 800253a:	005b      	lsls	r3, r3, #1
 800253c:	fa02 f303 	lsl.w	r3, r2, r3
 8002540:	69ba      	ldr	r2, [r7, #24]
 8002542:	4313      	orrs	r3, r2
 8002544:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	69ba      	ldr	r2, [r7, #24]
 800254a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002552:	2201      	movs	r2, #1
 8002554:	69fb      	ldr	r3, [r7, #28]
 8002556:	fa02 f303 	lsl.w	r3, r2, r3
 800255a:	43db      	mvns	r3, r3
 800255c:	69ba      	ldr	r2, [r7, #24]
 800255e:	4013      	ands	r3, r2
 8002560:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	091b      	lsrs	r3, r3, #4
 8002568:	f003 0201 	and.w	r2, r3, #1
 800256c:	69fb      	ldr	r3, [r7, #28]
 800256e:	fa02 f303 	lsl.w	r3, r2, r3
 8002572:	69ba      	ldr	r2, [r7, #24]
 8002574:	4313      	orrs	r3, r2
 8002576:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	69ba      	ldr	r2, [r7, #24]
 800257c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	68db      	ldr	r3, [r3, #12]
 8002582:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002584:	69fb      	ldr	r3, [r7, #28]
 8002586:	005b      	lsls	r3, r3, #1
 8002588:	2203      	movs	r2, #3
 800258a:	fa02 f303 	lsl.w	r3, r2, r3
 800258e:	43db      	mvns	r3, r3
 8002590:	69ba      	ldr	r2, [r7, #24]
 8002592:	4013      	ands	r3, r2
 8002594:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	689a      	ldr	r2, [r3, #8]
 800259a:	69fb      	ldr	r3, [r7, #28]
 800259c:	005b      	lsls	r3, r3, #1
 800259e:	fa02 f303 	lsl.w	r3, r2, r3
 80025a2:	69ba      	ldr	r2, [r7, #24]
 80025a4:	4313      	orrs	r3, r2
 80025a6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	69ba      	ldr	r2, [r7, #24]
 80025ac:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	2b02      	cmp	r3, #2
 80025b4:	d003      	beq.n	80025be <HAL_GPIO_Init+0xee>
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	2b12      	cmp	r3, #18
 80025bc:	d123      	bne.n	8002606 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80025be:	69fb      	ldr	r3, [r7, #28]
 80025c0:	08da      	lsrs	r2, r3, #3
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	3208      	adds	r2, #8
 80025c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80025cc:	69fb      	ldr	r3, [r7, #28]
 80025ce:	f003 0307 	and.w	r3, r3, #7
 80025d2:	009b      	lsls	r3, r3, #2
 80025d4:	220f      	movs	r2, #15
 80025d6:	fa02 f303 	lsl.w	r3, r2, r3
 80025da:	43db      	mvns	r3, r3
 80025dc:	69ba      	ldr	r2, [r7, #24]
 80025de:	4013      	ands	r3, r2
 80025e0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	691a      	ldr	r2, [r3, #16]
 80025e6:	69fb      	ldr	r3, [r7, #28]
 80025e8:	f003 0307 	and.w	r3, r3, #7
 80025ec:	009b      	lsls	r3, r3, #2
 80025ee:	fa02 f303 	lsl.w	r3, r2, r3
 80025f2:	69ba      	ldr	r2, [r7, #24]
 80025f4:	4313      	orrs	r3, r2
 80025f6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80025f8:	69fb      	ldr	r3, [r7, #28]
 80025fa:	08da      	lsrs	r2, r3, #3
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	3208      	adds	r2, #8
 8002600:	69b9      	ldr	r1, [r7, #24]
 8002602:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800260c:	69fb      	ldr	r3, [r7, #28]
 800260e:	005b      	lsls	r3, r3, #1
 8002610:	2203      	movs	r2, #3
 8002612:	fa02 f303 	lsl.w	r3, r2, r3
 8002616:	43db      	mvns	r3, r3
 8002618:	69ba      	ldr	r2, [r7, #24]
 800261a:	4013      	ands	r3, r2
 800261c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	f003 0203 	and.w	r2, r3, #3
 8002626:	69fb      	ldr	r3, [r7, #28]
 8002628:	005b      	lsls	r3, r3, #1
 800262a:	fa02 f303 	lsl.w	r3, r2, r3
 800262e:	69ba      	ldr	r2, [r7, #24]
 8002630:	4313      	orrs	r3, r2
 8002632:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	69ba      	ldr	r2, [r7, #24]
 8002638:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002642:	2b00      	cmp	r3, #0
 8002644:	f000 80e0 	beq.w	8002808 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002648:	4b2f      	ldr	r3, [pc, #188]	; (8002708 <HAL_GPIO_Init+0x238>)
 800264a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800264e:	4a2e      	ldr	r2, [pc, #184]	; (8002708 <HAL_GPIO_Init+0x238>)
 8002650:	f043 0302 	orr.w	r3, r3, #2
 8002654:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002658:	4b2b      	ldr	r3, [pc, #172]	; (8002708 <HAL_GPIO_Init+0x238>)
 800265a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800265e:	f003 0302 	and.w	r3, r3, #2
 8002662:	60fb      	str	r3, [r7, #12]
 8002664:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002666:	4a29      	ldr	r2, [pc, #164]	; (800270c <HAL_GPIO_Init+0x23c>)
 8002668:	69fb      	ldr	r3, [r7, #28]
 800266a:	089b      	lsrs	r3, r3, #2
 800266c:	3302      	adds	r3, #2
 800266e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002672:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002674:	69fb      	ldr	r3, [r7, #28]
 8002676:	f003 0303 	and.w	r3, r3, #3
 800267a:	009b      	lsls	r3, r3, #2
 800267c:	220f      	movs	r2, #15
 800267e:	fa02 f303 	lsl.w	r3, r2, r3
 8002682:	43db      	mvns	r3, r3
 8002684:	69ba      	ldr	r2, [r7, #24]
 8002686:	4013      	ands	r3, r2
 8002688:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	4a20      	ldr	r2, [pc, #128]	; (8002710 <HAL_GPIO_Init+0x240>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d052      	beq.n	8002738 <HAL_GPIO_Init+0x268>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	4a1f      	ldr	r2, [pc, #124]	; (8002714 <HAL_GPIO_Init+0x244>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d031      	beq.n	80026fe <HAL_GPIO_Init+0x22e>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	4a1e      	ldr	r2, [pc, #120]	; (8002718 <HAL_GPIO_Init+0x248>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d02b      	beq.n	80026fa <HAL_GPIO_Init+0x22a>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	4a1d      	ldr	r2, [pc, #116]	; (800271c <HAL_GPIO_Init+0x24c>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d025      	beq.n	80026f6 <HAL_GPIO_Init+0x226>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	4a1c      	ldr	r2, [pc, #112]	; (8002720 <HAL_GPIO_Init+0x250>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d01f      	beq.n	80026f2 <HAL_GPIO_Init+0x222>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	4a1b      	ldr	r2, [pc, #108]	; (8002724 <HAL_GPIO_Init+0x254>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d019      	beq.n	80026ee <HAL_GPIO_Init+0x21e>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	4a1a      	ldr	r2, [pc, #104]	; (8002728 <HAL_GPIO_Init+0x258>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d013      	beq.n	80026ea <HAL_GPIO_Init+0x21a>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	4a19      	ldr	r2, [pc, #100]	; (800272c <HAL_GPIO_Init+0x25c>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d00d      	beq.n	80026e6 <HAL_GPIO_Init+0x216>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	4a18      	ldr	r2, [pc, #96]	; (8002730 <HAL_GPIO_Init+0x260>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d007      	beq.n	80026e2 <HAL_GPIO_Init+0x212>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	4a17      	ldr	r2, [pc, #92]	; (8002734 <HAL_GPIO_Init+0x264>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d101      	bne.n	80026de <HAL_GPIO_Init+0x20e>
 80026da:	2309      	movs	r3, #9
 80026dc:	e02d      	b.n	800273a <HAL_GPIO_Init+0x26a>
 80026de:	230a      	movs	r3, #10
 80026e0:	e02b      	b.n	800273a <HAL_GPIO_Init+0x26a>
 80026e2:	2308      	movs	r3, #8
 80026e4:	e029      	b.n	800273a <HAL_GPIO_Init+0x26a>
 80026e6:	2307      	movs	r3, #7
 80026e8:	e027      	b.n	800273a <HAL_GPIO_Init+0x26a>
 80026ea:	2306      	movs	r3, #6
 80026ec:	e025      	b.n	800273a <HAL_GPIO_Init+0x26a>
 80026ee:	2305      	movs	r3, #5
 80026f0:	e023      	b.n	800273a <HAL_GPIO_Init+0x26a>
 80026f2:	2304      	movs	r3, #4
 80026f4:	e021      	b.n	800273a <HAL_GPIO_Init+0x26a>
 80026f6:	2303      	movs	r3, #3
 80026f8:	e01f      	b.n	800273a <HAL_GPIO_Init+0x26a>
 80026fa:	2302      	movs	r3, #2
 80026fc:	e01d      	b.n	800273a <HAL_GPIO_Init+0x26a>
 80026fe:	2301      	movs	r3, #1
 8002700:	e01b      	b.n	800273a <HAL_GPIO_Init+0x26a>
 8002702:	bf00      	nop
 8002704:	58000080 	.word	0x58000080
 8002708:	58024400 	.word	0x58024400
 800270c:	58000400 	.word	0x58000400
 8002710:	58020000 	.word	0x58020000
 8002714:	58020400 	.word	0x58020400
 8002718:	58020800 	.word	0x58020800
 800271c:	58020c00 	.word	0x58020c00
 8002720:	58021000 	.word	0x58021000
 8002724:	58021400 	.word	0x58021400
 8002728:	58021800 	.word	0x58021800
 800272c:	58021c00 	.word	0x58021c00
 8002730:	58022000 	.word	0x58022000
 8002734:	58022400 	.word	0x58022400
 8002738:	2300      	movs	r3, #0
 800273a:	69fa      	ldr	r2, [r7, #28]
 800273c:	f002 0203 	and.w	r2, r2, #3
 8002740:	0092      	lsls	r2, r2, #2
 8002742:	4093      	lsls	r3, r2
 8002744:	69ba      	ldr	r2, [r7, #24]
 8002746:	4313      	orrs	r3, r2
 8002748:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800274a:	4938      	ldr	r1, [pc, #224]	; (800282c <HAL_GPIO_Init+0x35c>)
 800274c:	69fb      	ldr	r3, [r7, #28]
 800274e:	089b      	lsrs	r3, r3, #2
 8002750:	3302      	adds	r3, #2
 8002752:	69ba      	ldr	r2, [r7, #24]
 8002754:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800275e:	693b      	ldr	r3, [r7, #16]
 8002760:	43db      	mvns	r3, r3
 8002762:	69ba      	ldr	r2, [r7, #24]
 8002764:	4013      	ands	r3, r2
 8002766:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002770:	2b00      	cmp	r3, #0
 8002772:	d003      	beq.n	800277c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002774:	69ba      	ldr	r2, [r7, #24]
 8002776:	693b      	ldr	r3, [r7, #16]
 8002778:	4313      	orrs	r3, r2
 800277a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800277c:	697b      	ldr	r3, [r7, #20]
 800277e:	69ba      	ldr	r2, [r7, #24]
 8002780:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8002782:	697b      	ldr	r3, [r7, #20]
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002788:	693b      	ldr	r3, [r7, #16]
 800278a:	43db      	mvns	r3, r3
 800278c:	69ba      	ldr	r2, [r7, #24]
 800278e:	4013      	ands	r3, r2
 8002790:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800279a:	2b00      	cmp	r3, #0
 800279c:	d003      	beq.n	80027a6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800279e:	69ba      	ldr	r2, [r7, #24]
 80027a0:	693b      	ldr	r3, [r7, #16]
 80027a2:	4313      	orrs	r3, r2
 80027a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80027a6:	697b      	ldr	r3, [r7, #20]
 80027a8:	69ba      	ldr	r2, [r7, #24]
 80027aa:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80027ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80027b4:	693b      	ldr	r3, [r7, #16]
 80027b6:	43db      	mvns	r3, r3
 80027b8:	69ba      	ldr	r2, [r7, #24]
 80027ba:	4013      	ands	r3, r2
 80027bc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d003      	beq.n	80027d2 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 80027ca:	69ba      	ldr	r2, [r7, #24]
 80027cc:	693b      	ldr	r3, [r7, #16]
 80027ce:	4313      	orrs	r3, r2
 80027d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80027d2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80027d6:	69bb      	ldr	r3, [r7, #24]
 80027d8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80027da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80027e2:	693b      	ldr	r3, [r7, #16]
 80027e4:	43db      	mvns	r3, r3
 80027e6:	69ba      	ldr	r2, [r7, #24]
 80027e8:	4013      	ands	r3, r2
 80027ea:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d003      	beq.n	8002800 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 80027f8:	69ba      	ldr	r2, [r7, #24]
 80027fa:	693b      	ldr	r3, [r7, #16]
 80027fc:	4313      	orrs	r3, r2
 80027fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002800:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002804:	69bb      	ldr	r3, [r7, #24]
 8002806:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8002808:	69fb      	ldr	r3, [r7, #28]
 800280a:	3301      	adds	r3, #1
 800280c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	681a      	ldr	r2, [r3, #0]
 8002812:	69fb      	ldr	r3, [r7, #28]
 8002814:	fa22 f303 	lsr.w	r3, r2, r3
 8002818:	2b00      	cmp	r3, #0
 800281a:	f47f ae63 	bne.w	80024e4 <HAL_GPIO_Init+0x14>
  }
}
 800281e:	bf00      	nop
 8002820:	3724      	adds	r7, #36	; 0x24
 8002822:	46bd      	mov	sp, r7
 8002824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002828:	4770      	bx	lr
 800282a:	bf00      	nop
 800282c:	58000400 	.word	0x58000400

08002830 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b084      	sub	sp, #16
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002838:	4b19      	ldr	r3, [pc, #100]	; (80028a0 <HAL_PWREx_ConfigSupply+0x70>)
 800283a:	68db      	ldr	r3, [r3, #12]
 800283c:	f003 0304 	and.w	r3, r3, #4
 8002840:	2b04      	cmp	r3, #4
 8002842:	d00a      	beq.n	800285a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002844:	4b16      	ldr	r3, [pc, #88]	; (80028a0 <HAL_PWREx_ConfigSupply+0x70>)
 8002846:	68db      	ldr	r3, [r3, #12]
 8002848:	f003 0307 	and.w	r3, r3, #7
 800284c:	687a      	ldr	r2, [r7, #4]
 800284e:	429a      	cmp	r2, r3
 8002850:	d001      	beq.n	8002856 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	e01f      	b.n	8002896 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002856:	2300      	movs	r3, #0
 8002858:	e01d      	b.n	8002896 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800285a:	4b11      	ldr	r3, [pc, #68]	; (80028a0 <HAL_PWREx_ConfigSupply+0x70>)
 800285c:	68db      	ldr	r3, [r3, #12]
 800285e:	f023 0207 	bic.w	r2, r3, #7
 8002862:	490f      	ldr	r1, [pc, #60]	; (80028a0 <HAL_PWREx_ConfigSupply+0x70>)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	4313      	orrs	r3, r2
 8002868:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800286a:	f7fe fbc3 	bl	8000ff4 <HAL_GetTick>
 800286e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002870:	e009      	b.n	8002886 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002872:	f7fe fbbf 	bl	8000ff4 <HAL_GetTick>
 8002876:	4602      	mov	r2, r0
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	1ad3      	subs	r3, r2, r3
 800287c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002880:	d901      	bls.n	8002886 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002882:	2301      	movs	r3, #1
 8002884:	e007      	b.n	8002896 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002886:	4b06      	ldr	r3, [pc, #24]	; (80028a0 <HAL_PWREx_ConfigSupply+0x70>)
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800288e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002892:	d1ee      	bne.n	8002872 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002894:	2300      	movs	r3, #0
}
 8002896:	4618      	mov	r0, r3
 8002898:	3710      	adds	r7, #16
 800289a:	46bd      	mov	sp, r7
 800289c:	bd80      	pop	{r7, pc}
 800289e:	bf00      	nop
 80028a0:	58024800 	.word	0x58024800

080028a4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b08c      	sub	sp, #48	; 0x30
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d101      	bne.n	80028b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80028b2:	2301      	movs	r3, #1
 80028b4:	e3ff      	b.n	80030b6 <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f003 0301 	and.w	r3, r3, #1
 80028be:	2b00      	cmp	r3, #0
 80028c0:	f000 8087 	beq.w	80029d2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80028c4:	4b99      	ldr	r3, [pc, #612]	; (8002b2c <HAL_RCC_OscConfig+0x288>)
 80028c6:	691b      	ldr	r3, [r3, #16]
 80028c8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80028cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80028ce:	4b97      	ldr	r3, [pc, #604]	; (8002b2c <HAL_RCC_OscConfig+0x288>)
 80028d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028d2:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80028d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028d6:	2b10      	cmp	r3, #16
 80028d8:	d007      	beq.n	80028ea <HAL_RCC_OscConfig+0x46>
 80028da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028dc:	2b18      	cmp	r3, #24
 80028de:	d110      	bne.n	8002902 <HAL_RCC_OscConfig+0x5e>
 80028e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028e2:	f003 0303 	and.w	r3, r3, #3
 80028e6:	2b02      	cmp	r3, #2
 80028e8:	d10b      	bne.n	8002902 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028ea:	4b90      	ldr	r3, [pc, #576]	; (8002b2c <HAL_RCC_OscConfig+0x288>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d06c      	beq.n	80029d0 <HAL_RCC_OscConfig+0x12c>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d168      	bne.n	80029d0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80028fe:	2301      	movs	r3, #1
 8002900:	e3d9      	b.n	80030b6 <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800290a:	d106      	bne.n	800291a <HAL_RCC_OscConfig+0x76>
 800290c:	4b87      	ldr	r3, [pc, #540]	; (8002b2c <HAL_RCC_OscConfig+0x288>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a86      	ldr	r2, [pc, #536]	; (8002b2c <HAL_RCC_OscConfig+0x288>)
 8002912:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002916:	6013      	str	r3, [r2, #0]
 8002918:	e02e      	b.n	8002978 <HAL_RCC_OscConfig+0xd4>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d10c      	bne.n	800293c <HAL_RCC_OscConfig+0x98>
 8002922:	4b82      	ldr	r3, [pc, #520]	; (8002b2c <HAL_RCC_OscConfig+0x288>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4a81      	ldr	r2, [pc, #516]	; (8002b2c <HAL_RCC_OscConfig+0x288>)
 8002928:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800292c:	6013      	str	r3, [r2, #0]
 800292e:	4b7f      	ldr	r3, [pc, #508]	; (8002b2c <HAL_RCC_OscConfig+0x288>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4a7e      	ldr	r2, [pc, #504]	; (8002b2c <HAL_RCC_OscConfig+0x288>)
 8002934:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002938:	6013      	str	r3, [r2, #0]
 800293a:	e01d      	b.n	8002978 <HAL_RCC_OscConfig+0xd4>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002944:	d10c      	bne.n	8002960 <HAL_RCC_OscConfig+0xbc>
 8002946:	4b79      	ldr	r3, [pc, #484]	; (8002b2c <HAL_RCC_OscConfig+0x288>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4a78      	ldr	r2, [pc, #480]	; (8002b2c <HAL_RCC_OscConfig+0x288>)
 800294c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002950:	6013      	str	r3, [r2, #0]
 8002952:	4b76      	ldr	r3, [pc, #472]	; (8002b2c <HAL_RCC_OscConfig+0x288>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4a75      	ldr	r2, [pc, #468]	; (8002b2c <HAL_RCC_OscConfig+0x288>)
 8002958:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800295c:	6013      	str	r3, [r2, #0]
 800295e:	e00b      	b.n	8002978 <HAL_RCC_OscConfig+0xd4>
 8002960:	4b72      	ldr	r3, [pc, #456]	; (8002b2c <HAL_RCC_OscConfig+0x288>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a71      	ldr	r2, [pc, #452]	; (8002b2c <HAL_RCC_OscConfig+0x288>)
 8002966:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800296a:	6013      	str	r3, [r2, #0]
 800296c:	4b6f      	ldr	r3, [pc, #444]	; (8002b2c <HAL_RCC_OscConfig+0x288>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a6e      	ldr	r2, [pc, #440]	; (8002b2c <HAL_RCC_OscConfig+0x288>)
 8002972:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002976:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d013      	beq.n	80029a8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002980:	f7fe fb38 	bl	8000ff4 <HAL_GetTick>
 8002984:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002986:	e008      	b.n	800299a <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002988:	f7fe fb34 	bl	8000ff4 <HAL_GetTick>
 800298c:	4602      	mov	r2, r0
 800298e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002990:	1ad3      	subs	r3, r2, r3
 8002992:	2b64      	cmp	r3, #100	; 0x64
 8002994:	d901      	bls.n	800299a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002996:	2303      	movs	r3, #3
 8002998:	e38d      	b.n	80030b6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800299a:	4b64      	ldr	r3, [pc, #400]	; (8002b2c <HAL_RCC_OscConfig+0x288>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d0f0      	beq.n	8002988 <HAL_RCC_OscConfig+0xe4>
 80029a6:	e014      	b.n	80029d2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029a8:	f7fe fb24 	bl	8000ff4 <HAL_GetTick>
 80029ac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80029ae:	e008      	b.n	80029c2 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80029b0:	f7fe fb20 	bl	8000ff4 <HAL_GetTick>
 80029b4:	4602      	mov	r2, r0
 80029b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b8:	1ad3      	subs	r3, r2, r3
 80029ba:	2b64      	cmp	r3, #100	; 0x64
 80029bc:	d901      	bls.n	80029c2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80029be:	2303      	movs	r3, #3
 80029c0:	e379      	b.n	80030b6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80029c2:	4b5a      	ldr	r3, [pc, #360]	; (8002b2c <HAL_RCC_OscConfig+0x288>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d1f0      	bne.n	80029b0 <HAL_RCC_OscConfig+0x10c>
 80029ce:	e000      	b.n	80029d2 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f003 0302 	and.w	r3, r3, #2
 80029da:	2b00      	cmp	r3, #0
 80029dc:	f000 80ae 	beq.w	8002b3c <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80029e0:	4b52      	ldr	r3, [pc, #328]	; (8002b2c <HAL_RCC_OscConfig+0x288>)
 80029e2:	691b      	ldr	r3, [r3, #16]
 80029e4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80029e8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80029ea:	4b50      	ldr	r3, [pc, #320]	; (8002b2c <HAL_RCC_OscConfig+0x288>)
 80029ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029ee:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80029f0:	6a3b      	ldr	r3, [r7, #32]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d007      	beq.n	8002a06 <HAL_RCC_OscConfig+0x162>
 80029f6:	6a3b      	ldr	r3, [r7, #32]
 80029f8:	2b18      	cmp	r3, #24
 80029fa:	d13a      	bne.n	8002a72 <HAL_RCC_OscConfig+0x1ce>
 80029fc:	69fb      	ldr	r3, [r7, #28]
 80029fe:	f003 0303 	and.w	r3, r3, #3
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d135      	bne.n	8002a72 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a06:	4b49      	ldr	r3, [pc, #292]	; (8002b2c <HAL_RCC_OscConfig+0x288>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f003 0304 	and.w	r3, r3, #4
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d005      	beq.n	8002a1e <HAL_RCC_OscConfig+0x17a>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	68db      	ldr	r3, [r3, #12]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d101      	bne.n	8002a1e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	e34b      	b.n	80030b6 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a1e:	f7fe faf5 	bl	800100c <HAL_GetREVID>
 8002a22:	4602      	mov	r2, r0
 8002a24:	f241 0303 	movw	r3, #4099	; 0x1003
 8002a28:	429a      	cmp	r2, r3
 8002a2a:	d817      	bhi.n	8002a5c <HAL_RCC_OscConfig+0x1b8>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	691b      	ldr	r3, [r3, #16]
 8002a30:	2b40      	cmp	r3, #64	; 0x40
 8002a32:	d108      	bne.n	8002a46 <HAL_RCC_OscConfig+0x1a2>
 8002a34:	4b3d      	ldr	r3, [pc, #244]	; (8002b2c <HAL_RCC_OscConfig+0x288>)
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002a3c:	4a3b      	ldr	r2, [pc, #236]	; (8002b2c <HAL_RCC_OscConfig+0x288>)
 8002a3e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a42:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a44:	e07a      	b.n	8002b3c <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a46:	4b39      	ldr	r3, [pc, #228]	; (8002b2c <HAL_RCC_OscConfig+0x288>)
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	691b      	ldr	r3, [r3, #16]
 8002a52:	031b      	lsls	r3, r3, #12
 8002a54:	4935      	ldr	r1, [pc, #212]	; (8002b2c <HAL_RCC_OscConfig+0x288>)
 8002a56:	4313      	orrs	r3, r2
 8002a58:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a5a:	e06f      	b.n	8002b3c <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a5c:	4b33      	ldr	r3, [pc, #204]	; (8002b2c <HAL_RCC_OscConfig+0x288>)
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	691b      	ldr	r3, [r3, #16]
 8002a68:	061b      	lsls	r3, r3, #24
 8002a6a:	4930      	ldr	r1, [pc, #192]	; (8002b2c <HAL_RCC_OscConfig+0x288>)
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a70:	e064      	b.n	8002b3c <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	68db      	ldr	r3, [r3, #12]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d045      	beq.n	8002b06 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002a7a:	4b2c      	ldr	r3, [pc, #176]	; (8002b2c <HAL_RCC_OscConfig+0x288>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f023 0219 	bic.w	r2, r3, #25
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	68db      	ldr	r3, [r3, #12]
 8002a86:	4929      	ldr	r1, [pc, #164]	; (8002b2c <HAL_RCC_OscConfig+0x288>)
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a8c:	f7fe fab2 	bl	8000ff4 <HAL_GetTick>
 8002a90:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002a92:	e008      	b.n	8002aa6 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a94:	f7fe faae 	bl	8000ff4 <HAL_GetTick>
 8002a98:	4602      	mov	r2, r0
 8002a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a9c:	1ad3      	subs	r3, r2, r3
 8002a9e:	2b02      	cmp	r3, #2
 8002aa0:	d901      	bls.n	8002aa6 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8002aa2:	2303      	movs	r3, #3
 8002aa4:	e307      	b.n	80030b6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002aa6:	4b21      	ldr	r3, [pc, #132]	; (8002b2c <HAL_RCC_OscConfig+0x288>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f003 0304 	and.w	r3, r3, #4
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d0f0      	beq.n	8002a94 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ab2:	f7fe faab 	bl	800100c <HAL_GetREVID>
 8002ab6:	4602      	mov	r2, r0
 8002ab8:	f241 0303 	movw	r3, #4099	; 0x1003
 8002abc:	429a      	cmp	r2, r3
 8002abe:	d817      	bhi.n	8002af0 <HAL_RCC_OscConfig+0x24c>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	691b      	ldr	r3, [r3, #16]
 8002ac4:	2b40      	cmp	r3, #64	; 0x40
 8002ac6:	d108      	bne.n	8002ada <HAL_RCC_OscConfig+0x236>
 8002ac8:	4b18      	ldr	r3, [pc, #96]	; (8002b2c <HAL_RCC_OscConfig+0x288>)
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002ad0:	4a16      	ldr	r2, [pc, #88]	; (8002b2c <HAL_RCC_OscConfig+0x288>)
 8002ad2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ad6:	6053      	str	r3, [r2, #4]
 8002ad8:	e030      	b.n	8002b3c <HAL_RCC_OscConfig+0x298>
 8002ada:	4b14      	ldr	r3, [pc, #80]	; (8002b2c <HAL_RCC_OscConfig+0x288>)
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	691b      	ldr	r3, [r3, #16]
 8002ae6:	031b      	lsls	r3, r3, #12
 8002ae8:	4910      	ldr	r1, [pc, #64]	; (8002b2c <HAL_RCC_OscConfig+0x288>)
 8002aea:	4313      	orrs	r3, r2
 8002aec:	604b      	str	r3, [r1, #4]
 8002aee:	e025      	b.n	8002b3c <HAL_RCC_OscConfig+0x298>
 8002af0:	4b0e      	ldr	r3, [pc, #56]	; (8002b2c <HAL_RCC_OscConfig+0x288>)
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	691b      	ldr	r3, [r3, #16]
 8002afc:	061b      	lsls	r3, r3, #24
 8002afe:	490b      	ldr	r1, [pc, #44]	; (8002b2c <HAL_RCC_OscConfig+0x288>)
 8002b00:	4313      	orrs	r3, r2
 8002b02:	604b      	str	r3, [r1, #4]
 8002b04:	e01a      	b.n	8002b3c <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b06:	4b09      	ldr	r3, [pc, #36]	; (8002b2c <HAL_RCC_OscConfig+0x288>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a08      	ldr	r2, [pc, #32]	; (8002b2c <HAL_RCC_OscConfig+0x288>)
 8002b0c:	f023 0301 	bic.w	r3, r3, #1
 8002b10:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b12:	f7fe fa6f 	bl	8000ff4 <HAL_GetTick>
 8002b16:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002b18:	e00a      	b.n	8002b30 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b1a:	f7fe fa6b 	bl	8000ff4 <HAL_GetTick>
 8002b1e:	4602      	mov	r2, r0
 8002b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b22:	1ad3      	subs	r3, r2, r3
 8002b24:	2b02      	cmp	r3, #2
 8002b26:	d903      	bls.n	8002b30 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8002b28:	2303      	movs	r3, #3
 8002b2a:	e2c4      	b.n	80030b6 <HAL_RCC_OscConfig+0x812>
 8002b2c:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002b30:	4ba4      	ldr	r3, [pc, #656]	; (8002dc4 <HAL_RCC_OscConfig+0x520>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f003 0304 	and.w	r3, r3, #4
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d1ee      	bne.n	8002b1a <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f003 0310 	and.w	r3, r3, #16
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	f000 80a9 	beq.w	8002c9c <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b4a:	4b9e      	ldr	r3, [pc, #632]	; (8002dc4 <HAL_RCC_OscConfig+0x520>)
 8002b4c:	691b      	ldr	r3, [r3, #16]
 8002b4e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002b52:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002b54:	4b9b      	ldr	r3, [pc, #620]	; (8002dc4 <HAL_RCC_OscConfig+0x520>)
 8002b56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b58:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002b5a:	69bb      	ldr	r3, [r7, #24]
 8002b5c:	2b08      	cmp	r3, #8
 8002b5e:	d007      	beq.n	8002b70 <HAL_RCC_OscConfig+0x2cc>
 8002b60:	69bb      	ldr	r3, [r7, #24]
 8002b62:	2b18      	cmp	r3, #24
 8002b64:	d13a      	bne.n	8002bdc <HAL_RCC_OscConfig+0x338>
 8002b66:	697b      	ldr	r3, [r7, #20]
 8002b68:	f003 0303 	and.w	r3, r3, #3
 8002b6c:	2b01      	cmp	r3, #1
 8002b6e:	d135      	bne.n	8002bdc <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002b70:	4b94      	ldr	r3, [pc, #592]	; (8002dc4 <HAL_RCC_OscConfig+0x520>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d005      	beq.n	8002b88 <HAL_RCC_OscConfig+0x2e4>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	69db      	ldr	r3, [r3, #28]
 8002b80:	2b80      	cmp	r3, #128	; 0x80
 8002b82:	d001      	beq.n	8002b88 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8002b84:	2301      	movs	r3, #1
 8002b86:	e296      	b.n	80030b6 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002b88:	f7fe fa40 	bl	800100c <HAL_GetREVID>
 8002b8c:	4602      	mov	r2, r0
 8002b8e:	f241 0303 	movw	r3, #4099	; 0x1003
 8002b92:	429a      	cmp	r2, r3
 8002b94:	d817      	bhi.n	8002bc6 <HAL_RCC_OscConfig+0x322>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6a1b      	ldr	r3, [r3, #32]
 8002b9a:	2b20      	cmp	r3, #32
 8002b9c:	d108      	bne.n	8002bb0 <HAL_RCC_OscConfig+0x30c>
 8002b9e:	4b89      	ldr	r3, [pc, #548]	; (8002dc4 <HAL_RCC_OscConfig+0x520>)
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002ba6:	4a87      	ldr	r2, [pc, #540]	; (8002dc4 <HAL_RCC_OscConfig+0x520>)
 8002ba8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002bac:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002bae:	e075      	b.n	8002c9c <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002bb0:	4b84      	ldr	r3, [pc, #528]	; (8002dc4 <HAL_RCC_OscConfig+0x520>)
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6a1b      	ldr	r3, [r3, #32]
 8002bbc:	069b      	lsls	r3, r3, #26
 8002bbe:	4981      	ldr	r1, [pc, #516]	; (8002dc4 <HAL_RCC_OscConfig+0x520>)
 8002bc0:	4313      	orrs	r3, r2
 8002bc2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002bc4:	e06a      	b.n	8002c9c <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002bc6:	4b7f      	ldr	r3, [pc, #508]	; (8002dc4 <HAL_RCC_OscConfig+0x520>)
 8002bc8:	68db      	ldr	r3, [r3, #12]
 8002bca:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6a1b      	ldr	r3, [r3, #32]
 8002bd2:	061b      	lsls	r3, r3, #24
 8002bd4:	497b      	ldr	r1, [pc, #492]	; (8002dc4 <HAL_RCC_OscConfig+0x520>)
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002bda:	e05f      	b.n	8002c9c <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	69db      	ldr	r3, [r3, #28]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d042      	beq.n	8002c6a <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002be4:	4b77      	ldr	r3, [pc, #476]	; (8002dc4 <HAL_RCC_OscConfig+0x520>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4a76      	ldr	r2, [pc, #472]	; (8002dc4 <HAL_RCC_OscConfig+0x520>)
 8002bea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002bee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bf0:	f7fe fa00 	bl	8000ff4 <HAL_GetTick>
 8002bf4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002bf6:	e008      	b.n	8002c0a <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002bf8:	f7fe f9fc 	bl	8000ff4 <HAL_GetTick>
 8002bfc:	4602      	mov	r2, r0
 8002bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c00:	1ad3      	subs	r3, r2, r3
 8002c02:	2b02      	cmp	r3, #2
 8002c04:	d901      	bls.n	8002c0a <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8002c06:	2303      	movs	r3, #3
 8002c08:	e255      	b.n	80030b6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002c0a:	4b6e      	ldr	r3, [pc, #440]	; (8002dc4 <HAL_RCC_OscConfig+0x520>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d0f0      	beq.n	8002bf8 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002c16:	f7fe f9f9 	bl	800100c <HAL_GetREVID>
 8002c1a:	4602      	mov	r2, r0
 8002c1c:	f241 0303 	movw	r3, #4099	; 0x1003
 8002c20:	429a      	cmp	r2, r3
 8002c22:	d817      	bhi.n	8002c54 <HAL_RCC_OscConfig+0x3b0>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6a1b      	ldr	r3, [r3, #32]
 8002c28:	2b20      	cmp	r3, #32
 8002c2a:	d108      	bne.n	8002c3e <HAL_RCC_OscConfig+0x39a>
 8002c2c:	4b65      	ldr	r3, [pc, #404]	; (8002dc4 <HAL_RCC_OscConfig+0x520>)
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002c34:	4a63      	ldr	r2, [pc, #396]	; (8002dc4 <HAL_RCC_OscConfig+0x520>)
 8002c36:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002c3a:	6053      	str	r3, [r2, #4]
 8002c3c:	e02e      	b.n	8002c9c <HAL_RCC_OscConfig+0x3f8>
 8002c3e:	4b61      	ldr	r3, [pc, #388]	; (8002dc4 <HAL_RCC_OscConfig+0x520>)
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6a1b      	ldr	r3, [r3, #32]
 8002c4a:	069b      	lsls	r3, r3, #26
 8002c4c:	495d      	ldr	r1, [pc, #372]	; (8002dc4 <HAL_RCC_OscConfig+0x520>)
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	604b      	str	r3, [r1, #4]
 8002c52:	e023      	b.n	8002c9c <HAL_RCC_OscConfig+0x3f8>
 8002c54:	4b5b      	ldr	r3, [pc, #364]	; (8002dc4 <HAL_RCC_OscConfig+0x520>)
 8002c56:	68db      	ldr	r3, [r3, #12]
 8002c58:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6a1b      	ldr	r3, [r3, #32]
 8002c60:	061b      	lsls	r3, r3, #24
 8002c62:	4958      	ldr	r1, [pc, #352]	; (8002dc4 <HAL_RCC_OscConfig+0x520>)
 8002c64:	4313      	orrs	r3, r2
 8002c66:	60cb      	str	r3, [r1, #12]
 8002c68:	e018      	b.n	8002c9c <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002c6a:	4b56      	ldr	r3, [pc, #344]	; (8002dc4 <HAL_RCC_OscConfig+0x520>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a55      	ldr	r2, [pc, #340]	; (8002dc4 <HAL_RCC_OscConfig+0x520>)
 8002c70:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002c74:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c76:	f7fe f9bd 	bl	8000ff4 <HAL_GetTick>
 8002c7a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002c7c:	e008      	b.n	8002c90 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002c7e:	f7fe f9b9 	bl	8000ff4 <HAL_GetTick>
 8002c82:	4602      	mov	r2, r0
 8002c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c86:	1ad3      	subs	r3, r2, r3
 8002c88:	2b02      	cmp	r3, #2
 8002c8a:	d901      	bls.n	8002c90 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8002c8c:	2303      	movs	r3, #3
 8002c8e:	e212      	b.n	80030b6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002c90:	4b4c      	ldr	r3, [pc, #304]	; (8002dc4 <HAL_RCC_OscConfig+0x520>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d1f0      	bne.n	8002c7e <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f003 0308 	and.w	r3, r3, #8
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d036      	beq.n	8002d16 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	695b      	ldr	r3, [r3, #20]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d019      	beq.n	8002ce4 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002cb0:	4b44      	ldr	r3, [pc, #272]	; (8002dc4 <HAL_RCC_OscConfig+0x520>)
 8002cb2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cb4:	4a43      	ldr	r2, [pc, #268]	; (8002dc4 <HAL_RCC_OscConfig+0x520>)
 8002cb6:	f043 0301 	orr.w	r3, r3, #1
 8002cba:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cbc:	f7fe f99a 	bl	8000ff4 <HAL_GetTick>
 8002cc0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002cc2:	e008      	b.n	8002cd6 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002cc4:	f7fe f996 	bl	8000ff4 <HAL_GetTick>
 8002cc8:	4602      	mov	r2, r0
 8002cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ccc:	1ad3      	subs	r3, r2, r3
 8002cce:	2b02      	cmp	r3, #2
 8002cd0:	d901      	bls.n	8002cd6 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8002cd2:	2303      	movs	r3, #3
 8002cd4:	e1ef      	b.n	80030b6 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002cd6:	4b3b      	ldr	r3, [pc, #236]	; (8002dc4 <HAL_RCC_OscConfig+0x520>)
 8002cd8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cda:	f003 0302 	and.w	r3, r3, #2
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d0f0      	beq.n	8002cc4 <HAL_RCC_OscConfig+0x420>
 8002ce2:	e018      	b.n	8002d16 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ce4:	4b37      	ldr	r3, [pc, #220]	; (8002dc4 <HAL_RCC_OscConfig+0x520>)
 8002ce6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ce8:	4a36      	ldr	r2, [pc, #216]	; (8002dc4 <HAL_RCC_OscConfig+0x520>)
 8002cea:	f023 0301 	bic.w	r3, r3, #1
 8002cee:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cf0:	f7fe f980 	bl	8000ff4 <HAL_GetTick>
 8002cf4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002cf6:	e008      	b.n	8002d0a <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002cf8:	f7fe f97c 	bl	8000ff4 <HAL_GetTick>
 8002cfc:	4602      	mov	r2, r0
 8002cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d00:	1ad3      	subs	r3, r2, r3
 8002d02:	2b02      	cmp	r3, #2
 8002d04:	d901      	bls.n	8002d0a <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8002d06:	2303      	movs	r3, #3
 8002d08:	e1d5      	b.n	80030b6 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002d0a:	4b2e      	ldr	r3, [pc, #184]	; (8002dc4 <HAL_RCC_OscConfig+0x520>)
 8002d0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d0e:	f003 0302 	and.w	r3, r3, #2
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d1f0      	bne.n	8002cf8 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f003 0320 	and.w	r3, r3, #32
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d036      	beq.n	8002d90 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	699b      	ldr	r3, [r3, #24]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d019      	beq.n	8002d5e <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002d2a:	4b26      	ldr	r3, [pc, #152]	; (8002dc4 <HAL_RCC_OscConfig+0x520>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4a25      	ldr	r2, [pc, #148]	; (8002dc4 <HAL_RCC_OscConfig+0x520>)
 8002d30:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002d34:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002d36:	f7fe f95d 	bl	8000ff4 <HAL_GetTick>
 8002d3a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002d3c:	e008      	b.n	8002d50 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002d3e:	f7fe f959 	bl	8000ff4 <HAL_GetTick>
 8002d42:	4602      	mov	r2, r0
 8002d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d46:	1ad3      	subs	r3, r2, r3
 8002d48:	2b02      	cmp	r3, #2
 8002d4a:	d901      	bls.n	8002d50 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8002d4c:	2303      	movs	r3, #3
 8002d4e:	e1b2      	b.n	80030b6 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002d50:	4b1c      	ldr	r3, [pc, #112]	; (8002dc4 <HAL_RCC_OscConfig+0x520>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d0f0      	beq.n	8002d3e <HAL_RCC_OscConfig+0x49a>
 8002d5c:	e018      	b.n	8002d90 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002d5e:	4b19      	ldr	r3, [pc, #100]	; (8002dc4 <HAL_RCC_OscConfig+0x520>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4a18      	ldr	r2, [pc, #96]	; (8002dc4 <HAL_RCC_OscConfig+0x520>)
 8002d64:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002d68:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002d6a:	f7fe f943 	bl	8000ff4 <HAL_GetTick>
 8002d6e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002d70:	e008      	b.n	8002d84 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002d72:	f7fe f93f 	bl	8000ff4 <HAL_GetTick>
 8002d76:	4602      	mov	r2, r0
 8002d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d7a:	1ad3      	subs	r3, r2, r3
 8002d7c:	2b02      	cmp	r3, #2
 8002d7e:	d901      	bls.n	8002d84 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8002d80:	2303      	movs	r3, #3
 8002d82:	e198      	b.n	80030b6 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002d84:	4b0f      	ldr	r3, [pc, #60]	; (8002dc4 <HAL_RCC_OscConfig+0x520>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d1f0      	bne.n	8002d72 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f003 0304 	and.w	r3, r3, #4
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	f000 8085 	beq.w	8002ea8 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002d9e:	4b0a      	ldr	r3, [pc, #40]	; (8002dc8 <HAL_RCC_OscConfig+0x524>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4a09      	ldr	r2, [pc, #36]	; (8002dc8 <HAL_RCC_OscConfig+0x524>)
 8002da4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002da8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002daa:	f7fe f923 	bl	8000ff4 <HAL_GetTick>
 8002dae:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002db0:	e00c      	b.n	8002dcc <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002db2:	f7fe f91f 	bl	8000ff4 <HAL_GetTick>
 8002db6:	4602      	mov	r2, r0
 8002db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dba:	1ad3      	subs	r3, r2, r3
 8002dbc:	2b64      	cmp	r3, #100	; 0x64
 8002dbe:	d905      	bls.n	8002dcc <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8002dc0:	2303      	movs	r3, #3
 8002dc2:	e178      	b.n	80030b6 <HAL_RCC_OscConfig+0x812>
 8002dc4:	58024400 	.word	0x58024400
 8002dc8:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002dcc:	4b96      	ldr	r3, [pc, #600]	; (8003028 <HAL_RCC_OscConfig+0x784>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d0ec      	beq.n	8002db2 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	689b      	ldr	r3, [r3, #8]
 8002ddc:	2b01      	cmp	r3, #1
 8002dde:	d106      	bne.n	8002dee <HAL_RCC_OscConfig+0x54a>
 8002de0:	4b92      	ldr	r3, [pc, #584]	; (800302c <HAL_RCC_OscConfig+0x788>)
 8002de2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002de4:	4a91      	ldr	r2, [pc, #580]	; (800302c <HAL_RCC_OscConfig+0x788>)
 8002de6:	f043 0301 	orr.w	r3, r3, #1
 8002dea:	6713      	str	r3, [r2, #112]	; 0x70
 8002dec:	e02d      	b.n	8002e4a <HAL_RCC_OscConfig+0x5a6>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	689b      	ldr	r3, [r3, #8]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d10c      	bne.n	8002e10 <HAL_RCC_OscConfig+0x56c>
 8002df6:	4b8d      	ldr	r3, [pc, #564]	; (800302c <HAL_RCC_OscConfig+0x788>)
 8002df8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dfa:	4a8c      	ldr	r2, [pc, #560]	; (800302c <HAL_RCC_OscConfig+0x788>)
 8002dfc:	f023 0301 	bic.w	r3, r3, #1
 8002e00:	6713      	str	r3, [r2, #112]	; 0x70
 8002e02:	4b8a      	ldr	r3, [pc, #552]	; (800302c <HAL_RCC_OscConfig+0x788>)
 8002e04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e06:	4a89      	ldr	r2, [pc, #548]	; (800302c <HAL_RCC_OscConfig+0x788>)
 8002e08:	f023 0304 	bic.w	r3, r3, #4
 8002e0c:	6713      	str	r3, [r2, #112]	; 0x70
 8002e0e:	e01c      	b.n	8002e4a <HAL_RCC_OscConfig+0x5a6>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	689b      	ldr	r3, [r3, #8]
 8002e14:	2b05      	cmp	r3, #5
 8002e16:	d10c      	bne.n	8002e32 <HAL_RCC_OscConfig+0x58e>
 8002e18:	4b84      	ldr	r3, [pc, #528]	; (800302c <HAL_RCC_OscConfig+0x788>)
 8002e1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e1c:	4a83      	ldr	r2, [pc, #524]	; (800302c <HAL_RCC_OscConfig+0x788>)
 8002e1e:	f043 0304 	orr.w	r3, r3, #4
 8002e22:	6713      	str	r3, [r2, #112]	; 0x70
 8002e24:	4b81      	ldr	r3, [pc, #516]	; (800302c <HAL_RCC_OscConfig+0x788>)
 8002e26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e28:	4a80      	ldr	r2, [pc, #512]	; (800302c <HAL_RCC_OscConfig+0x788>)
 8002e2a:	f043 0301 	orr.w	r3, r3, #1
 8002e2e:	6713      	str	r3, [r2, #112]	; 0x70
 8002e30:	e00b      	b.n	8002e4a <HAL_RCC_OscConfig+0x5a6>
 8002e32:	4b7e      	ldr	r3, [pc, #504]	; (800302c <HAL_RCC_OscConfig+0x788>)
 8002e34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e36:	4a7d      	ldr	r2, [pc, #500]	; (800302c <HAL_RCC_OscConfig+0x788>)
 8002e38:	f023 0301 	bic.w	r3, r3, #1
 8002e3c:	6713      	str	r3, [r2, #112]	; 0x70
 8002e3e:	4b7b      	ldr	r3, [pc, #492]	; (800302c <HAL_RCC_OscConfig+0x788>)
 8002e40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e42:	4a7a      	ldr	r2, [pc, #488]	; (800302c <HAL_RCC_OscConfig+0x788>)
 8002e44:	f023 0304 	bic.w	r3, r3, #4
 8002e48:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	689b      	ldr	r3, [r3, #8]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d015      	beq.n	8002e7e <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e52:	f7fe f8cf 	bl	8000ff4 <HAL_GetTick>
 8002e56:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002e58:	e00a      	b.n	8002e70 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e5a:	f7fe f8cb 	bl	8000ff4 <HAL_GetTick>
 8002e5e:	4602      	mov	r2, r0
 8002e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e62:	1ad3      	subs	r3, r2, r3
 8002e64:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d901      	bls.n	8002e70 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8002e6c:	2303      	movs	r3, #3
 8002e6e:	e122      	b.n	80030b6 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002e70:	4b6e      	ldr	r3, [pc, #440]	; (800302c <HAL_RCC_OscConfig+0x788>)
 8002e72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e74:	f003 0302 	and.w	r3, r3, #2
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d0ee      	beq.n	8002e5a <HAL_RCC_OscConfig+0x5b6>
 8002e7c:	e014      	b.n	8002ea8 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e7e:	f7fe f8b9 	bl	8000ff4 <HAL_GetTick>
 8002e82:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002e84:	e00a      	b.n	8002e9c <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e86:	f7fe f8b5 	bl	8000ff4 <HAL_GetTick>
 8002e8a:	4602      	mov	r2, r0
 8002e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e8e:	1ad3      	subs	r3, r2, r3
 8002e90:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d901      	bls.n	8002e9c <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8002e98:	2303      	movs	r3, #3
 8002e9a:	e10c      	b.n	80030b6 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002e9c:	4b63      	ldr	r3, [pc, #396]	; (800302c <HAL_RCC_OscConfig+0x788>)
 8002e9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ea0:	f003 0302 	and.w	r3, r3, #2
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d1ee      	bne.n	8002e86 <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	f000 8101 	beq.w	80030b4 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002eb2:	4b5e      	ldr	r3, [pc, #376]	; (800302c <HAL_RCC_OscConfig+0x788>)
 8002eb4:	691b      	ldr	r3, [r3, #16]
 8002eb6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002eba:	2b18      	cmp	r3, #24
 8002ebc:	f000 80bc 	beq.w	8003038 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec4:	2b02      	cmp	r3, #2
 8002ec6:	f040 8095 	bne.w	8002ff4 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002eca:	4b58      	ldr	r3, [pc, #352]	; (800302c <HAL_RCC_OscConfig+0x788>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4a57      	ldr	r2, [pc, #348]	; (800302c <HAL_RCC_OscConfig+0x788>)
 8002ed0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ed4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ed6:	f7fe f88d 	bl	8000ff4 <HAL_GetTick>
 8002eda:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002edc:	e008      	b.n	8002ef0 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ede:	f7fe f889 	bl	8000ff4 <HAL_GetTick>
 8002ee2:	4602      	mov	r2, r0
 8002ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ee6:	1ad3      	subs	r3, r2, r3
 8002ee8:	2b02      	cmp	r3, #2
 8002eea:	d901      	bls.n	8002ef0 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8002eec:	2303      	movs	r3, #3
 8002eee:	e0e2      	b.n	80030b6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002ef0:	4b4e      	ldr	r3, [pc, #312]	; (800302c <HAL_RCC_OscConfig+0x788>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d1f0      	bne.n	8002ede <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002efc:	4b4b      	ldr	r3, [pc, #300]	; (800302c <HAL_RCC_OscConfig+0x788>)
 8002efe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002f00:	4b4b      	ldr	r3, [pc, #300]	; (8003030 <HAL_RCC_OscConfig+0x78c>)
 8002f02:	4013      	ands	r3, r2
 8002f04:	687a      	ldr	r2, [r7, #4]
 8002f06:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002f08:	687a      	ldr	r2, [r7, #4]
 8002f0a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002f0c:	0112      	lsls	r2, r2, #4
 8002f0e:	430a      	orrs	r2, r1
 8002f10:	4946      	ldr	r1, [pc, #280]	; (800302c <HAL_RCC_OscConfig+0x788>)
 8002f12:	4313      	orrs	r3, r2
 8002f14:	628b      	str	r3, [r1, #40]	; 0x28
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f1a:	3b01      	subs	r3, #1
 8002f1c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f24:	3b01      	subs	r3, #1
 8002f26:	025b      	lsls	r3, r3, #9
 8002f28:	b29b      	uxth	r3, r3
 8002f2a:	431a      	orrs	r2, r3
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f30:	3b01      	subs	r3, #1
 8002f32:	041b      	lsls	r3, r3, #16
 8002f34:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002f38:	431a      	orrs	r2, r3
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f3e:	3b01      	subs	r3, #1
 8002f40:	061b      	lsls	r3, r3, #24
 8002f42:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002f46:	4939      	ldr	r1, [pc, #228]	; (800302c <HAL_RCC_OscConfig+0x788>)
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8002f4c:	4b37      	ldr	r3, [pc, #220]	; (800302c <HAL_RCC_OscConfig+0x788>)
 8002f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f50:	4a36      	ldr	r2, [pc, #216]	; (800302c <HAL_RCC_OscConfig+0x788>)
 8002f52:	f023 0301 	bic.w	r3, r3, #1
 8002f56:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002f58:	4b34      	ldr	r3, [pc, #208]	; (800302c <HAL_RCC_OscConfig+0x788>)
 8002f5a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f5c:	4b35      	ldr	r3, [pc, #212]	; (8003034 <HAL_RCC_OscConfig+0x790>)
 8002f5e:	4013      	ands	r3, r2
 8002f60:	687a      	ldr	r2, [r7, #4]
 8002f62:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002f64:	00d2      	lsls	r2, r2, #3
 8002f66:	4931      	ldr	r1, [pc, #196]	; (800302c <HAL_RCC_OscConfig+0x788>)
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002f6c:	4b2f      	ldr	r3, [pc, #188]	; (800302c <HAL_RCC_OscConfig+0x788>)
 8002f6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f70:	f023 020c 	bic.w	r2, r3, #12
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f78:	492c      	ldr	r1, [pc, #176]	; (800302c <HAL_RCC_OscConfig+0x788>)
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002f7e:	4b2b      	ldr	r3, [pc, #172]	; (800302c <HAL_RCC_OscConfig+0x788>)
 8002f80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f82:	f023 0202 	bic.w	r2, r3, #2
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f8a:	4928      	ldr	r1, [pc, #160]	; (800302c <HAL_RCC_OscConfig+0x788>)
 8002f8c:	4313      	orrs	r3, r2
 8002f8e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002f90:	4b26      	ldr	r3, [pc, #152]	; (800302c <HAL_RCC_OscConfig+0x788>)
 8002f92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f94:	4a25      	ldr	r2, [pc, #148]	; (800302c <HAL_RCC_OscConfig+0x788>)
 8002f96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f9a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002f9c:	4b23      	ldr	r3, [pc, #140]	; (800302c <HAL_RCC_OscConfig+0x788>)
 8002f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fa0:	4a22      	ldr	r2, [pc, #136]	; (800302c <HAL_RCC_OscConfig+0x788>)
 8002fa2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002fa6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002fa8:	4b20      	ldr	r3, [pc, #128]	; (800302c <HAL_RCC_OscConfig+0x788>)
 8002faa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fac:	4a1f      	ldr	r2, [pc, #124]	; (800302c <HAL_RCC_OscConfig+0x788>)
 8002fae:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002fb2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8002fb4:	4b1d      	ldr	r3, [pc, #116]	; (800302c <HAL_RCC_OscConfig+0x788>)
 8002fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fb8:	4a1c      	ldr	r2, [pc, #112]	; (800302c <HAL_RCC_OscConfig+0x788>)
 8002fba:	f043 0301 	orr.w	r3, r3, #1
 8002fbe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002fc0:	4b1a      	ldr	r3, [pc, #104]	; (800302c <HAL_RCC_OscConfig+0x788>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a19      	ldr	r2, [pc, #100]	; (800302c <HAL_RCC_OscConfig+0x788>)
 8002fc6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002fca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fcc:	f7fe f812 	bl	8000ff4 <HAL_GetTick>
 8002fd0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002fd2:	e008      	b.n	8002fe6 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fd4:	f7fe f80e 	bl	8000ff4 <HAL_GetTick>
 8002fd8:	4602      	mov	r2, r0
 8002fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fdc:	1ad3      	subs	r3, r2, r3
 8002fde:	2b02      	cmp	r3, #2
 8002fe0:	d901      	bls.n	8002fe6 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8002fe2:	2303      	movs	r3, #3
 8002fe4:	e067      	b.n	80030b6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002fe6:	4b11      	ldr	r3, [pc, #68]	; (800302c <HAL_RCC_OscConfig+0x788>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d0f0      	beq.n	8002fd4 <HAL_RCC_OscConfig+0x730>
 8002ff2:	e05f      	b.n	80030b4 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ff4:	4b0d      	ldr	r3, [pc, #52]	; (800302c <HAL_RCC_OscConfig+0x788>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a0c      	ldr	r2, [pc, #48]	; (800302c <HAL_RCC_OscConfig+0x788>)
 8002ffa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ffe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003000:	f7fd fff8 	bl	8000ff4 <HAL_GetTick>
 8003004:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003006:	e008      	b.n	800301a <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003008:	f7fd fff4 	bl	8000ff4 <HAL_GetTick>
 800300c:	4602      	mov	r2, r0
 800300e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003010:	1ad3      	subs	r3, r2, r3
 8003012:	2b02      	cmp	r3, #2
 8003014:	d901      	bls.n	800301a <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8003016:	2303      	movs	r3, #3
 8003018:	e04d      	b.n	80030b6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800301a:	4b04      	ldr	r3, [pc, #16]	; (800302c <HAL_RCC_OscConfig+0x788>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003022:	2b00      	cmp	r3, #0
 8003024:	d1f0      	bne.n	8003008 <HAL_RCC_OscConfig+0x764>
 8003026:	e045      	b.n	80030b4 <HAL_RCC_OscConfig+0x810>
 8003028:	58024800 	.word	0x58024800
 800302c:	58024400 	.word	0x58024400
 8003030:	fffffc0c 	.word	0xfffffc0c
 8003034:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003038:	4b21      	ldr	r3, [pc, #132]	; (80030c0 <HAL_RCC_OscConfig+0x81c>)
 800303a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800303c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800303e:	4b20      	ldr	r3, [pc, #128]	; (80030c0 <HAL_RCC_OscConfig+0x81c>)
 8003040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003042:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003048:	2b01      	cmp	r3, #1
 800304a:	d031      	beq.n	80030b0 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800304c:	693b      	ldr	r3, [r7, #16]
 800304e:	f003 0203 	and.w	r2, r3, #3
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003056:	429a      	cmp	r2, r3
 8003058:	d12a      	bne.n	80030b0 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800305a:	693b      	ldr	r3, [r7, #16]
 800305c:	091b      	lsrs	r3, r3, #4
 800305e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003066:	429a      	cmp	r2, r3
 8003068:	d122      	bne.n	80030b0 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003074:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003076:	429a      	cmp	r2, r3
 8003078:	d11a      	bne.n	80030b0 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	0a5b      	lsrs	r3, r3, #9
 800307e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003086:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003088:	429a      	cmp	r2, r3
 800308a:	d111      	bne.n	80030b0 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	0c1b      	lsrs	r3, r3, #16
 8003090:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003098:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800309a:	429a      	cmp	r2, r3
 800309c:	d108      	bne.n	80030b0 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	0e1b      	lsrs	r3, r3, #24
 80030a2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030aa:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80030ac:	429a      	cmp	r2, r3
 80030ae:	d001      	beq.n	80030b4 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 80030b0:	2301      	movs	r3, #1
 80030b2:	e000      	b.n	80030b6 <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 80030b4:	2300      	movs	r3, #0
}
 80030b6:	4618      	mov	r0, r3
 80030b8:	3730      	adds	r7, #48	; 0x30
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bd80      	pop	{r7, pc}
 80030be:	bf00      	nop
 80030c0:	58024400 	.word	0x58024400

080030c4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b086      	sub	sp, #24
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
 80030cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d101      	bne.n	80030d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80030d4:	2301      	movs	r3, #1
 80030d6:	e19c      	b.n	8003412 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80030d8:	4b8a      	ldr	r3, [pc, #552]	; (8003304 <HAL_RCC_ClockConfig+0x240>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f003 030f 	and.w	r3, r3, #15
 80030e0:	683a      	ldr	r2, [r7, #0]
 80030e2:	429a      	cmp	r2, r3
 80030e4:	d910      	bls.n	8003108 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030e6:	4b87      	ldr	r3, [pc, #540]	; (8003304 <HAL_RCC_ClockConfig+0x240>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f023 020f 	bic.w	r2, r3, #15
 80030ee:	4985      	ldr	r1, [pc, #532]	; (8003304 <HAL_RCC_ClockConfig+0x240>)
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	4313      	orrs	r3, r2
 80030f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030f6:	4b83      	ldr	r3, [pc, #524]	; (8003304 <HAL_RCC_ClockConfig+0x240>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f003 030f 	and.w	r3, r3, #15
 80030fe:	683a      	ldr	r2, [r7, #0]
 8003100:	429a      	cmp	r2, r3
 8003102:	d001      	beq.n	8003108 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003104:	2301      	movs	r3, #1
 8003106:	e184      	b.n	8003412 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f003 0304 	and.w	r3, r3, #4
 8003110:	2b00      	cmp	r3, #0
 8003112:	d010      	beq.n	8003136 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	691a      	ldr	r2, [r3, #16]
 8003118:	4b7b      	ldr	r3, [pc, #492]	; (8003308 <HAL_RCC_ClockConfig+0x244>)
 800311a:	699b      	ldr	r3, [r3, #24]
 800311c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003120:	429a      	cmp	r2, r3
 8003122:	d908      	bls.n	8003136 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003124:	4b78      	ldr	r3, [pc, #480]	; (8003308 <HAL_RCC_ClockConfig+0x244>)
 8003126:	699b      	ldr	r3, [r3, #24]
 8003128:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	691b      	ldr	r3, [r3, #16]
 8003130:	4975      	ldr	r1, [pc, #468]	; (8003308 <HAL_RCC_ClockConfig+0x244>)
 8003132:	4313      	orrs	r3, r2
 8003134:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f003 0308 	and.w	r3, r3, #8
 800313e:	2b00      	cmp	r3, #0
 8003140:	d010      	beq.n	8003164 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	695a      	ldr	r2, [r3, #20]
 8003146:	4b70      	ldr	r3, [pc, #448]	; (8003308 <HAL_RCC_ClockConfig+0x244>)
 8003148:	69db      	ldr	r3, [r3, #28]
 800314a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800314e:	429a      	cmp	r2, r3
 8003150:	d908      	bls.n	8003164 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003152:	4b6d      	ldr	r3, [pc, #436]	; (8003308 <HAL_RCC_ClockConfig+0x244>)
 8003154:	69db      	ldr	r3, [r3, #28]
 8003156:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	695b      	ldr	r3, [r3, #20]
 800315e:	496a      	ldr	r1, [pc, #424]	; (8003308 <HAL_RCC_ClockConfig+0x244>)
 8003160:	4313      	orrs	r3, r2
 8003162:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f003 0310 	and.w	r3, r3, #16
 800316c:	2b00      	cmp	r3, #0
 800316e:	d010      	beq.n	8003192 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	699a      	ldr	r2, [r3, #24]
 8003174:	4b64      	ldr	r3, [pc, #400]	; (8003308 <HAL_RCC_ClockConfig+0x244>)
 8003176:	69db      	ldr	r3, [r3, #28]
 8003178:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800317c:	429a      	cmp	r2, r3
 800317e:	d908      	bls.n	8003192 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003180:	4b61      	ldr	r3, [pc, #388]	; (8003308 <HAL_RCC_ClockConfig+0x244>)
 8003182:	69db      	ldr	r3, [r3, #28]
 8003184:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	699b      	ldr	r3, [r3, #24]
 800318c:	495e      	ldr	r1, [pc, #376]	; (8003308 <HAL_RCC_ClockConfig+0x244>)
 800318e:	4313      	orrs	r3, r2
 8003190:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f003 0320 	and.w	r3, r3, #32
 800319a:	2b00      	cmp	r3, #0
 800319c:	d010      	beq.n	80031c0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	69da      	ldr	r2, [r3, #28]
 80031a2:	4b59      	ldr	r3, [pc, #356]	; (8003308 <HAL_RCC_ClockConfig+0x244>)
 80031a4:	6a1b      	ldr	r3, [r3, #32]
 80031a6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80031aa:	429a      	cmp	r2, r3
 80031ac:	d908      	bls.n	80031c0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80031ae:	4b56      	ldr	r3, [pc, #344]	; (8003308 <HAL_RCC_ClockConfig+0x244>)
 80031b0:	6a1b      	ldr	r3, [r3, #32]
 80031b2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	69db      	ldr	r3, [r3, #28]
 80031ba:	4953      	ldr	r1, [pc, #332]	; (8003308 <HAL_RCC_ClockConfig+0x244>)
 80031bc:	4313      	orrs	r3, r2
 80031be:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f003 0302 	and.w	r3, r3, #2
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d010      	beq.n	80031ee <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	68da      	ldr	r2, [r3, #12]
 80031d0:	4b4d      	ldr	r3, [pc, #308]	; (8003308 <HAL_RCC_ClockConfig+0x244>)
 80031d2:	699b      	ldr	r3, [r3, #24]
 80031d4:	f003 030f 	and.w	r3, r3, #15
 80031d8:	429a      	cmp	r2, r3
 80031da:	d908      	bls.n	80031ee <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031dc:	4b4a      	ldr	r3, [pc, #296]	; (8003308 <HAL_RCC_ClockConfig+0x244>)
 80031de:	699b      	ldr	r3, [r3, #24]
 80031e0:	f023 020f 	bic.w	r2, r3, #15
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	68db      	ldr	r3, [r3, #12]
 80031e8:	4947      	ldr	r1, [pc, #284]	; (8003308 <HAL_RCC_ClockConfig+0x244>)
 80031ea:	4313      	orrs	r3, r2
 80031ec:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f003 0301 	and.w	r3, r3, #1
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d055      	beq.n	80032a6 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80031fa:	4b43      	ldr	r3, [pc, #268]	; (8003308 <HAL_RCC_ClockConfig+0x244>)
 80031fc:	699b      	ldr	r3, [r3, #24]
 80031fe:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	689b      	ldr	r3, [r3, #8]
 8003206:	4940      	ldr	r1, [pc, #256]	; (8003308 <HAL_RCC_ClockConfig+0x244>)
 8003208:	4313      	orrs	r3, r2
 800320a:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	2b02      	cmp	r3, #2
 8003212:	d107      	bne.n	8003224 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003214:	4b3c      	ldr	r3, [pc, #240]	; (8003308 <HAL_RCC_ClockConfig+0x244>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800321c:	2b00      	cmp	r3, #0
 800321e:	d121      	bne.n	8003264 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003220:	2301      	movs	r3, #1
 8003222:	e0f6      	b.n	8003412 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	2b03      	cmp	r3, #3
 800322a:	d107      	bne.n	800323c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800322c:	4b36      	ldr	r3, [pc, #216]	; (8003308 <HAL_RCC_ClockConfig+0x244>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003234:	2b00      	cmp	r3, #0
 8003236:	d115      	bne.n	8003264 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003238:	2301      	movs	r3, #1
 800323a:	e0ea      	b.n	8003412 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	2b01      	cmp	r3, #1
 8003242:	d107      	bne.n	8003254 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003244:	4b30      	ldr	r3, [pc, #192]	; (8003308 <HAL_RCC_ClockConfig+0x244>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800324c:	2b00      	cmp	r3, #0
 800324e:	d109      	bne.n	8003264 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003250:	2301      	movs	r3, #1
 8003252:	e0de      	b.n	8003412 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003254:	4b2c      	ldr	r3, [pc, #176]	; (8003308 <HAL_RCC_ClockConfig+0x244>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f003 0304 	and.w	r3, r3, #4
 800325c:	2b00      	cmp	r3, #0
 800325e:	d101      	bne.n	8003264 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003260:	2301      	movs	r3, #1
 8003262:	e0d6      	b.n	8003412 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003264:	4b28      	ldr	r3, [pc, #160]	; (8003308 <HAL_RCC_ClockConfig+0x244>)
 8003266:	691b      	ldr	r3, [r3, #16]
 8003268:	f023 0207 	bic.w	r2, r3, #7
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	4925      	ldr	r1, [pc, #148]	; (8003308 <HAL_RCC_ClockConfig+0x244>)
 8003272:	4313      	orrs	r3, r2
 8003274:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003276:	f7fd febd 	bl	8000ff4 <HAL_GetTick>
 800327a:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800327c:	e00a      	b.n	8003294 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800327e:	f7fd feb9 	bl	8000ff4 <HAL_GetTick>
 8003282:	4602      	mov	r2, r0
 8003284:	697b      	ldr	r3, [r7, #20]
 8003286:	1ad3      	subs	r3, r2, r3
 8003288:	f241 3288 	movw	r2, #5000	; 0x1388
 800328c:	4293      	cmp	r3, r2
 800328e:	d901      	bls.n	8003294 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003290:	2303      	movs	r3, #3
 8003292:	e0be      	b.n	8003412 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003294:	4b1c      	ldr	r3, [pc, #112]	; (8003308 <HAL_RCC_ClockConfig+0x244>)
 8003296:	691b      	ldr	r3, [r3, #16]
 8003298:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	00db      	lsls	r3, r3, #3
 80032a2:	429a      	cmp	r2, r3
 80032a4:	d1eb      	bne.n	800327e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f003 0302 	and.w	r3, r3, #2
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d010      	beq.n	80032d4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	68da      	ldr	r2, [r3, #12]
 80032b6:	4b14      	ldr	r3, [pc, #80]	; (8003308 <HAL_RCC_ClockConfig+0x244>)
 80032b8:	699b      	ldr	r3, [r3, #24]
 80032ba:	f003 030f 	and.w	r3, r3, #15
 80032be:	429a      	cmp	r2, r3
 80032c0:	d208      	bcs.n	80032d4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032c2:	4b11      	ldr	r3, [pc, #68]	; (8003308 <HAL_RCC_ClockConfig+0x244>)
 80032c4:	699b      	ldr	r3, [r3, #24]
 80032c6:	f023 020f 	bic.w	r2, r3, #15
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	68db      	ldr	r3, [r3, #12]
 80032ce:	490e      	ldr	r1, [pc, #56]	; (8003308 <HAL_RCC_ClockConfig+0x244>)
 80032d0:	4313      	orrs	r3, r2
 80032d2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80032d4:	4b0b      	ldr	r3, [pc, #44]	; (8003304 <HAL_RCC_ClockConfig+0x240>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f003 030f 	and.w	r3, r3, #15
 80032dc:	683a      	ldr	r2, [r7, #0]
 80032de:	429a      	cmp	r2, r3
 80032e0:	d214      	bcs.n	800330c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032e2:	4b08      	ldr	r3, [pc, #32]	; (8003304 <HAL_RCC_ClockConfig+0x240>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f023 020f 	bic.w	r2, r3, #15
 80032ea:	4906      	ldr	r1, [pc, #24]	; (8003304 <HAL_RCC_ClockConfig+0x240>)
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	4313      	orrs	r3, r2
 80032f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032f2:	4b04      	ldr	r3, [pc, #16]	; (8003304 <HAL_RCC_ClockConfig+0x240>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f003 030f 	and.w	r3, r3, #15
 80032fa:	683a      	ldr	r2, [r7, #0]
 80032fc:	429a      	cmp	r2, r3
 80032fe:	d005      	beq.n	800330c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003300:	2301      	movs	r3, #1
 8003302:	e086      	b.n	8003412 <HAL_RCC_ClockConfig+0x34e>
 8003304:	52002000 	.word	0x52002000
 8003308:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f003 0304 	and.w	r3, r3, #4
 8003314:	2b00      	cmp	r3, #0
 8003316:	d010      	beq.n	800333a <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	691a      	ldr	r2, [r3, #16]
 800331c:	4b3f      	ldr	r3, [pc, #252]	; (800341c <HAL_RCC_ClockConfig+0x358>)
 800331e:	699b      	ldr	r3, [r3, #24]
 8003320:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003324:	429a      	cmp	r2, r3
 8003326:	d208      	bcs.n	800333a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003328:	4b3c      	ldr	r3, [pc, #240]	; (800341c <HAL_RCC_ClockConfig+0x358>)
 800332a:	699b      	ldr	r3, [r3, #24]
 800332c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	691b      	ldr	r3, [r3, #16]
 8003334:	4939      	ldr	r1, [pc, #228]	; (800341c <HAL_RCC_ClockConfig+0x358>)
 8003336:	4313      	orrs	r3, r2
 8003338:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f003 0308 	and.w	r3, r3, #8
 8003342:	2b00      	cmp	r3, #0
 8003344:	d010      	beq.n	8003368 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	695a      	ldr	r2, [r3, #20]
 800334a:	4b34      	ldr	r3, [pc, #208]	; (800341c <HAL_RCC_ClockConfig+0x358>)
 800334c:	69db      	ldr	r3, [r3, #28]
 800334e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003352:	429a      	cmp	r2, r3
 8003354:	d208      	bcs.n	8003368 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003356:	4b31      	ldr	r3, [pc, #196]	; (800341c <HAL_RCC_ClockConfig+0x358>)
 8003358:	69db      	ldr	r3, [r3, #28]
 800335a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	695b      	ldr	r3, [r3, #20]
 8003362:	492e      	ldr	r1, [pc, #184]	; (800341c <HAL_RCC_ClockConfig+0x358>)
 8003364:	4313      	orrs	r3, r2
 8003366:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f003 0310 	and.w	r3, r3, #16
 8003370:	2b00      	cmp	r3, #0
 8003372:	d010      	beq.n	8003396 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	699a      	ldr	r2, [r3, #24]
 8003378:	4b28      	ldr	r3, [pc, #160]	; (800341c <HAL_RCC_ClockConfig+0x358>)
 800337a:	69db      	ldr	r3, [r3, #28]
 800337c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003380:	429a      	cmp	r2, r3
 8003382:	d208      	bcs.n	8003396 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003384:	4b25      	ldr	r3, [pc, #148]	; (800341c <HAL_RCC_ClockConfig+0x358>)
 8003386:	69db      	ldr	r3, [r3, #28]
 8003388:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	699b      	ldr	r3, [r3, #24]
 8003390:	4922      	ldr	r1, [pc, #136]	; (800341c <HAL_RCC_ClockConfig+0x358>)
 8003392:	4313      	orrs	r3, r2
 8003394:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f003 0320 	and.w	r3, r3, #32
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d010      	beq.n	80033c4 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	69da      	ldr	r2, [r3, #28]
 80033a6:	4b1d      	ldr	r3, [pc, #116]	; (800341c <HAL_RCC_ClockConfig+0x358>)
 80033a8:	6a1b      	ldr	r3, [r3, #32]
 80033aa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80033ae:	429a      	cmp	r2, r3
 80033b0:	d208      	bcs.n	80033c4 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80033b2:	4b1a      	ldr	r3, [pc, #104]	; (800341c <HAL_RCC_ClockConfig+0x358>)
 80033b4:	6a1b      	ldr	r3, [r3, #32]
 80033b6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	69db      	ldr	r3, [r3, #28]
 80033be:	4917      	ldr	r1, [pc, #92]	; (800341c <HAL_RCC_ClockConfig+0x358>)
 80033c0:	4313      	orrs	r3, r2
 80033c2:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80033c4:	f000 f834 	bl	8003430 <HAL_RCC_GetSysClockFreq>
 80033c8:	4601      	mov	r1, r0
 80033ca:	4b14      	ldr	r3, [pc, #80]	; (800341c <HAL_RCC_ClockConfig+0x358>)
 80033cc:	699b      	ldr	r3, [r3, #24]
 80033ce:	0a1b      	lsrs	r3, r3, #8
 80033d0:	f003 030f 	and.w	r3, r3, #15
 80033d4:	4a12      	ldr	r2, [pc, #72]	; (8003420 <HAL_RCC_ClockConfig+0x35c>)
 80033d6:	5cd3      	ldrb	r3, [r2, r3]
 80033d8:	f003 031f 	and.w	r3, r3, #31
 80033dc:	fa21 f303 	lsr.w	r3, r1, r3
 80033e0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80033e2:	4b0e      	ldr	r3, [pc, #56]	; (800341c <HAL_RCC_ClockConfig+0x358>)
 80033e4:	699b      	ldr	r3, [r3, #24]
 80033e6:	f003 030f 	and.w	r3, r3, #15
 80033ea:	4a0d      	ldr	r2, [pc, #52]	; (8003420 <HAL_RCC_ClockConfig+0x35c>)
 80033ec:	5cd3      	ldrb	r3, [r2, r3]
 80033ee:	f003 031f 	and.w	r3, r3, #31
 80033f2:	693a      	ldr	r2, [r7, #16]
 80033f4:	fa22 f303 	lsr.w	r3, r2, r3
 80033f8:	4a0a      	ldr	r2, [pc, #40]	; (8003424 <HAL_RCC_ClockConfig+0x360>)
 80033fa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80033fc:	4a0a      	ldr	r2, [pc, #40]	; (8003428 <HAL_RCC_ClockConfig+0x364>)
 80033fe:	693b      	ldr	r3, [r7, #16]
 8003400:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8003402:	4b0a      	ldr	r3, [pc, #40]	; (800342c <HAL_RCC_ClockConfig+0x368>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4618      	mov	r0, r3
 8003408:	f7fd fdaa 	bl	8000f60 <HAL_InitTick>
 800340c:	4603      	mov	r3, r0
 800340e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003410:	7bfb      	ldrb	r3, [r7, #15]
}
 8003412:	4618      	mov	r0, r3
 8003414:	3718      	adds	r7, #24
 8003416:	46bd      	mov	sp, r7
 8003418:	bd80      	pop	{r7, pc}
 800341a:	bf00      	nop
 800341c:	58024400 	.word	0x58024400
 8003420:	08005fc0 	.word	0x08005fc0
 8003424:	24000004 	.word	0x24000004
 8003428:	24000000 	.word	0x24000000
 800342c:	24000008 	.word	0x24000008

08003430 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003430:	b480      	push	{r7}
 8003432:	b089      	sub	sp, #36	; 0x24
 8003434:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003436:	4baf      	ldr	r3, [pc, #700]	; (80036f4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003438:	691b      	ldr	r3, [r3, #16]
 800343a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800343e:	2b18      	cmp	r3, #24
 8003440:	f200 814e 	bhi.w	80036e0 <HAL_RCC_GetSysClockFreq+0x2b0>
 8003444:	a201      	add	r2, pc, #4	; (adr r2, 800344c <HAL_RCC_GetSysClockFreq+0x1c>)
 8003446:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800344a:	bf00      	nop
 800344c:	080034b1 	.word	0x080034b1
 8003450:	080036e1 	.word	0x080036e1
 8003454:	080036e1 	.word	0x080036e1
 8003458:	080036e1 	.word	0x080036e1
 800345c:	080036e1 	.word	0x080036e1
 8003460:	080036e1 	.word	0x080036e1
 8003464:	080036e1 	.word	0x080036e1
 8003468:	080036e1 	.word	0x080036e1
 800346c:	080034d7 	.word	0x080034d7
 8003470:	080036e1 	.word	0x080036e1
 8003474:	080036e1 	.word	0x080036e1
 8003478:	080036e1 	.word	0x080036e1
 800347c:	080036e1 	.word	0x080036e1
 8003480:	080036e1 	.word	0x080036e1
 8003484:	080036e1 	.word	0x080036e1
 8003488:	080036e1 	.word	0x080036e1
 800348c:	080034dd 	.word	0x080034dd
 8003490:	080036e1 	.word	0x080036e1
 8003494:	080036e1 	.word	0x080036e1
 8003498:	080036e1 	.word	0x080036e1
 800349c:	080036e1 	.word	0x080036e1
 80034a0:	080036e1 	.word	0x080036e1
 80034a4:	080036e1 	.word	0x080036e1
 80034a8:	080036e1 	.word	0x080036e1
 80034ac:	080034e3 	.word	0x080034e3
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80034b0:	4b90      	ldr	r3, [pc, #576]	; (80036f4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f003 0320 	and.w	r3, r3, #32
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d009      	beq.n	80034d0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80034bc:	4b8d      	ldr	r3, [pc, #564]	; (80036f4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	08db      	lsrs	r3, r3, #3
 80034c2:	f003 0303 	and.w	r3, r3, #3
 80034c6:	4a8c      	ldr	r2, [pc, #560]	; (80036f8 <HAL_RCC_GetSysClockFreq+0x2c8>)
 80034c8:	fa22 f303 	lsr.w	r3, r2, r3
 80034cc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80034ce:	e10a      	b.n	80036e6 <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80034d0:	4b89      	ldr	r3, [pc, #548]	; (80036f8 <HAL_RCC_GetSysClockFreq+0x2c8>)
 80034d2:	61bb      	str	r3, [r7, #24]
    break;
 80034d4:	e107      	b.n	80036e6 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80034d6:	4b89      	ldr	r3, [pc, #548]	; (80036fc <HAL_RCC_GetSysClockFreq+0x2cc>)
 80034d8:	61bb      	str	r3, [r7, #24]
    break;
 80034da:	e104      	b.n	80036e6 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80034dc:	4b88      	ldr	r3, [pc, #544]	; (8003700 <HAL_RCC_GetSysClockFreq+0x2d0>)
 80034de:	61bb      	str	r3, [r7, #24]
    break;
 80034e0:	e101      	b.n	80036e6 <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80034e2:	4b84      	ldr	r3, [pc, #528]	; (80036f4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80034e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034e6:	f003 0303 	and.w	r3, r3, #3
 80034ea:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80034ec:	4b81      	ldr	r3, [pc, #516]	; (80036f4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80034ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034f0:	091b      	lsrs	r3, r3, #4
 80034f2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80034f6:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80034f8:	4b7e      	ldr	r3, [pc, #504]	; (80036f4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80034fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034fc:	f003 0301 	and.w	r3, r3, #1
 8003500:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8003502:	4b7c      	ldr	r3, [pc, #496]	; (80036f4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003504:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003506:	08db      	lsrs	r3, r3, #3
 8003508:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800350c:	68fa      	ldr	r2, [r7, #12]
 800350e:	fb02 f303 	mul.w	r3, r2, r3
 8003512:	ee07 3a90 	vmov	s15, r3
 8003516:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800351a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800351e:	693b      	ldr	r3, [r7, #16]
 8003520:	2b00      	cmp	r3, #0
 8003522:	f000 80da 	beq.w	80036da <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 8003526:	697b      	ldr	r3, [r7, #20]
 8003528:	2b01      	cmp	r3, #1
 800352a:	d05a      	beq.n	80035e2 <HAL_RCC_GetSysClockFreq+0x1b2>
 800352c:	2b01      	cmp	r3, #1
 800352e:	d302      	bcc.n	8003536 <HAL_RCC_GetSysClockFreq+0x106>
 8003530:	2b02      	cmp	r3, #2
 8003532:	d078      	beq.n	8003626 <HAL_RCC_GetSysClockFreq+0x1f6>
 8003534:	e099      	b.n	800366a <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003536:	4b6f      	ldr	r3, [pc, #444]	; (80036f4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f003 0320 	and.w	r3, r3, #32
 800353e:	2b00      	cmp	r3, #0
 8003540:	d02d      	beq.n	800359e <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003542:	4b6c      	ldr	r3, [pc, #432]	; (80036f4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	08db      	lsrs	r3, r3, #3
 8003548:	f003 0303 	and.w	r3, r3, #3
 800354c:	4a6a      	ldr	r2, [pc, #424]	; (80036f8 <HAL_RCC_GetSysClockFreq+0x2c8>)
 800354e:	fa22 f303 	lsr.w	r3, r2, r3
 8003552:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	ee07 3a90 	vmov	s15, r3
 800355a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800355e:	693b      	ldr	r3, [r7, #16]
 8003560:	ee07 3a90 	vmov	s15, r3
 8003564:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003568:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800356c:	4b61      	ldr	r3, [pc, #388]	; (80036f4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800356e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003570:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003574:	ee07 3a90 	vmov	s15, r3
 8003578:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800357c:	ed97 6a02 	vldr	s12, [r7, #8]
 8003580:	eddf 5a60 	vldr	s11, [pc, #384]	; 8003704 <HAL_RCC_GetSysClockFreq+0x2d4>
 8003584:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003588:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800358c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003590:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003594:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003598:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800359c:	e087      	b.n	80036ae <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800359e:	693b      	ldr	r3, [r7, #16]
 80035a0:	ee07 3a90 	vmov	s15, r3
 80035a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035a8:	eddf 6a57 	vldr	s13, [pc, #348]	; 8003708 <HAL_RCC_GetSysClockFreq+0x2d8>
 80035ac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80035b0:	4b50      	ldr	r3, [pc, #320]	; (80036f4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80035b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035b8:	ee07 3a90 	vmov	s15, r3
 80035bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80035c0:	ed97 6a02 	vldr	s12, [r7, #8]
 80035c4:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8003704 <HAL_RCC_GetSysClockFreq+0x2d4>
 80035c8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80035cc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80035d0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80035d4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80035d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035dc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80035e0:	e065      	b.n	80036ae <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80035e2:	693b      	ldr	r3, [r7, #16]
 80035e4:	ee07 3a90 	vmov	s15, r3
 80035e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035ec:	eddf 6a47 	vldr	s13, [pc, #284]	; 800370c <HAL_RCC_GetSysClockFreq+0x2dc>
 80035f0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80035f4:	4b3f      	ldr	r3, [pc, #252]	; (80036f4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80035f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035fc:	ee07 3a90 	vmov	s15, r3
 8003600:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003604:	ed97 6a02 	vldr	s12, [r7, #8]
 8003608:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8003704 <HAL_RCC_GetSysClockFreq+0x2d4>
 800360c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003610:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003614:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003618:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800361c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003620:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003624:	e043      	b.n	80036ae <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003626:	693b      	ldr	r3, [r7, #16]
 8003628:	ee07 3a90 	vmov	s15, r3
 800362c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003630:	eddf 6a37 	vldr	s13, [pc, #220]	; 8003710 <HAL_RCC_GetSysClockFreq+0x2e0>
 8003634:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003638:	4b2e      	ldr	r3, [pc, #184]	; (80036f4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800363a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800363c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003640:	ee07 3a90 	vmov	s15, r3
 8003644:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003648:	ed97 6a02 	vldr	s12, [r7, #8]
 800364c:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8003704 <HAL_RCC_GetSysClockFreq+0x2d4>
 8003650:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003654:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003658:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800365c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003660:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003664:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003668:	e021      	b.n	80036ae <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800366a:	693b      	ldr	r3, [r7, #16]
 800366c:	ee07 3a90 	vmov	s15, r3
 8003670:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003674:	eddf 6a25 	vldr	s13, [pc, #148]	; 800370c <HAL_RCC_GetSysClockFreq+0x2dc>
 8003678:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800367c:	4b1d      	ldr	r3, [pc, #116]	; (80036f4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800367e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003680:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003684:	ee07 3a90 	vmov	s15, r3
 8003688:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800368c:	ed97 6a02 	vldr	s12, [r7, #8]
 8003690:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8003704 <HAL_RCC_GetSysClockFreq+0x2d4>
 8003694:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003698:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800369c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80036a0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80036a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036a8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80036ac:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80036ae:	4b11      	ldr	r3, [pc, #68]	; (80036f4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80036b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036b2:	0a5b      	lsrs	r3, r3, #9
 80036b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80036b8:	3301      	adds	r3, #1
 80036ba:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	ee07 3a90 	vmov	s15, r3
 80036c2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80036c6:	edd7 6a07 	vldr	s13, [r7, #28]
 80036ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80036ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80036d2:	ee17 3a90 	vmov	r3, s15
 80036d6:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80036d8:	e005      	b.n	80036e6 <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 80036da:	2300      	movs	r3, #0
 80036dc:	61bb      	str	r3, [r7, #24]
    break;
 80036de:	e002      	b.n	80036e6 <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 80036e0:	4b06      	ldr	r3, [pc, #24]	; (80036fc <HAL_RCC_GetSysClockFreq+0x2cc>)
 80036e2:	61bb      	str	r3, [r7, #24]
    break;
 80036e4:	bf00      	nop
  }

  return sysclockfreq;
 80036e6:	69bb      	ldr	r3, [r7, #24]
}
 80036e8:	4618      	mov	r0, r3
 80036ea:	3724      	adds	r7, #36	; 0x24
 80036ec:	46bd      	mov	sp, r7
 80036ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f2:	4770      	bx	lr
 80036f4:	58024400 	.word	0x58024400
 80036f8:	03d09000 	.word	0x03d09000
 80036fc:	003d0900 	.word	0x003d0900
 8003700:	007a1200 	.word	0x007a1200
 8003704:	46000000 	.word	0x46000000
 8003708:	4c742400 	.word	0x4c742400
 800370c:	4a742400 	.word	0x4a742400
 8003710:	4af42400 	.word	0x4af42400

08003714 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b082      	sub	sp, #8
 8003718:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800371a:	f7ff fe89 	bl	8003430 <HAL_RCC_GetSysClockFreq>
 800371e:	4601      	mov	r1, r0
 8003720:	4b10      	ldr	r3, [pc, #64]	; (8003764 <HAL_RCC_GetHCLKFreq+0x50>)
 8003722:	699b      	ldr	r3, [r3, #24]
 8003724:	0a1b      	lsrs	r3, r3, #8
 8003726:	f003 030f 	and.w	r3, r3, #15
 800372a:	4a0f      	ldr	r2, [pc, #60]	; (8003768 <HAL_RCC_GetHCLKFreq+0x54>)
 800372c:	5cd3      	ldrb	r3, [r2, r3]
 800372e:	f003 031f 	and.w	r3, r3, #31
 8003732:	fa21 f303 	lsr.w	r3, r1, r3
 8003736:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003738:	4b0a      	ldr	r3, [pc, #40]	; (8003764 <HAL_RCC_GetHCLKFreq+0x50>)
 800373a:	699b      	ldr	r3, [r3, #24]
 800373c:	f003 030f 	and.w	r3, r3, #15
 8003740:	4a09      	ldr	r2, [pc, #36]	; (8003768 <HAL_RCC_GetHCLKFreq+0x54>)
 8003742:	5cd3      	ldrb	r3, [r2, r3]
 8003744:	f003 031f 	and.w	r3, r3, #31
 8003748:	687a      	ldr	r2, [r7, #4]
 800374a:	fa22 f303 	lsr.w	r3, r2, r3
 800374e:	4a07      	ldr	r2, [pc, #28]	; (800376c <HAL_RCC_GetHCLKFreq+0x58>)
 8003750:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003752:	4a07      	ldr	r2, [pc, #28]	; (8003770 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003758:	4b04      	ldr	r3, [pc, #16]	; (800376c <HAL_RCC_GetHCLKFreq+0x58>)
 800375a:	681b      	ldr	r3, [r3, #0]
}
 800375c:	4618      	mov	r0, r3
 800375e:	3708      	adds	r7, #8
 8003760:	46bd      	mov	sp, r7
 8003762:	bd80      	pop	{r7, pc}
 8003764:	58024400 	.word	0x58024400
 8003768:	08005fc0 	.word	0x08005fc0
 800376c:	24000004 	.word	0x24000004
 8003770:	24000000 	.word	0x24000000

08003774 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003778:	f7ff ffcc 	bl	8003714 <HAL_RCC_GetHCLKFreq>
 800377c:	4601      	mov	r1, r0
 800377e:	4b06      	ldr	r3, [pc, #24]	; (8003798 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003780:	69db      	ldr	r3, [r3, #28]
 8003782:	091b      	lsrs	r3, r3, #4
 8003784:	f003 0307 	and.w	r3, r3, #7
 8003788:	4a04      	ldr	r2, [pc, #16]	; (800379c <HAL_RCC_GetPCLK1Freq+0x28>)
 800378a:	5cd3      	ldrb	r3, [r2, r3]
 800378c:	f003 031f 	and.w	r3, r3, #31
 8003790:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003794:	4618      	mov	r0, r3
 8003796:	bd80      	pop	{r7, pc}
 8003798:	58024400 	.word	0x58024400
 800379c:	08005fc0 	.word	0x08005fc0

080037a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80037a4:	f7ff ffb6 	bl	8003714 <HAL_RCC_GetHCLKFreq>
 80037a8:	4601      	mov	r1, r0
 80037aa:	4b06      	ldr	r3, [pc, #24]	; (80037c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80037ac:	69db      	ldr	r3, [r3, #28]
 80037ae:	0a1b      	lsrs	r3, r3, #8
 80037b0:	f003 0307 	and.w	r3, r3, #7
 80037b4:	4a04      	ldr	r2, [pc, #16]	; (80037c8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80037b6:	5cd3      	ldrb	r3, [r2, r3]
 80037b8:	f003 031f 	and.w	r3, r3, #31
 80037bc:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80037c0:	4618      	mov	r0, r3
 80037c2:	bd80      	pop	{r7, pc}
 80037c4:	58024400 	.word	0x58024400
 80037c8:	08005fc0 	.word	0x08005fc0

080037cc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b086      	sub	sp, #24
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80037d4:	2300      	movs	r3, #0
 80037d6:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80037d8:	2300      	movs	r3, #0
 80037da:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d03d      	beq.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80037ec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80037f0:	d013      	beq.n	800381a <HAL_RCCEx_PeriphCLKConfig+0x4e>
 80037f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80037f6:	d802      	bhi.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0x32>
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d007      	beq.n	800380c <HAL_RCCEx_PeriphCLKConfig+0x40>
 80037fc:	e01f      	b.n	800383e <HAL_RCCEx_PeriphCLKConfig+0x72>
 80037fe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003802:	d013      	beq.n	800382c <HAL_RCCEx_PeriphCLKConfig+0x60>
 8003804:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003808:	d01c      	beq.n	8003844 <HAL_RCCEx_PeriphCLKConfig+0x78>
 800380a:	e018      	b.n	800383e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800380c:	4baf      	ldr	r3, [pc, #700]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800380e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003810:	4aae      	ldr	r2, [pc, #696]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003812:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003816:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003818:	e015      	b.n	8003846 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	3304      	adds	r3, #4
 800381e:	2102      	movs	r1, #2
 8003820:	4618      	mov	r0, r3
 8003822:	f001 f96f 	bl	8004b04 <RCCEx_PLL2_Config>
 8003826:	4603      	mov	r3, r0
 8003828:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800382a:	e00c      	b.n	8003846 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	3324      	adds	r3, #36	; 0x24
 8003830:	2102      	movs	r1, #2
 8003832:	4618      	mov	r0, r3
 8003834:	f001 fa18 	bl	8004c68 <RCCEx_PLL3_Config>
 8003838:	4603      	mov	r3, r0
 800383a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800383c:	e003      	b.n	8003846 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800383e:	2301      	movs	r3, #1
 8003840:	75fb      	strb	r3, [r7, #23]
      break;
 8003842:	e000      	b.n	8003846 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8003844:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003846:	7dfb      	ldrb	r3, [r7, #23]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d109      	bne.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800384c:	4b9f      	ldr	r3, [pc, #636]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800384e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003850:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003858:	499c      	ldr	r1, [pc, #624]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800385a:	4313      	orrs	r3, r2
 800385c:	650b      	str	r3, [r1, #80]	; 0x50
 800385e:	e001      	b.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003860:	7dfb      	ldrb	r3, [r7, #23]
 8003862:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800386c:	2b00      	cmp	r3, #0
 800386e:	d03d      	beq.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003874:	2b04      	cmp	r3, #4
 8003876:	d826      	bhi.n	80038c6 <HAL_RCCEx_PeriphCLKConfig+0xfa>
 8003878:	a201      	add	r2, pc, #4	; (adr r2, 8003880 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 800387a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800387e:	bf00      	nop
 8003880:	08003895 	.word	0x08003895
 8003884:	080038a3 	.word	0x080038a3
 8003888:	080038b5 	.word	0x080038b5
 800388c:	080038cd 	.word	0x080038cd
 8003890:	080038cd 	.word	0x080038cd
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003894:	4b8d      	ldr	r3, [pc, #564]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003898:	4a8c      	ldr	r2, [pc, #560]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800389a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800389e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80038a0:	e015      	b.n	80038ce <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	3304      	adds	r3, #4
 80038a6:	2100      	movs	r1, #0
 80038a8:	4618      	mov	r0, r3
 80038aa:	f001 f92b 	bl	8004b04 <RCCEx_PLL2_Config>
 80038ae:	4603      	mov	r3, r0
 80038b0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80038b2:	e00c      	b.n	80038ce <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	3324      	adds	r3, #36	; 0x24
 80038b8:	2100      	movs	r1, #0
 80038ba:	4618      	mov	r0, r3
 80038bc:	f001 f9d4 	bl	8004c68 <RCCEx_PLL3_Config>
 80038c0:	4603      	mov	r3, r0
 80038c2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80038c4:	e003      	b.n	80038ce <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80038c6:	2301      	movs	r3, #1
 80038c8:	75fb      	strb	r3, [r7, #23]
      break;
 80038ca:	e000      	b.n	80038ce <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 80038cc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80038ce:	7dfb      	ldrb	r3, [r7, #23]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d109      	bne.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80038d4:	4b7d      	ldr	r3, [pc, #500]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80038d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038d8:	f023 0207 	bic.w	r2, r3, #7
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038e0:	497a      	ldr	r1, [pc, #488]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80038e2:	4313      	orrs	r3, r2
 80038e4:	650b      	str	r3, [r1, #80]	; 0x50
 80038e6:	e001      	b.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038e8:	7dfb      	ldrb	r3, [r7, #23]
 80038ea:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d03e      	beq.n	8003976 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038fc:	2b80      	cmp	r3, #128	; 0x80
 80038fe:	d01c      	beq.n	800393a <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8003900:	2b80      	cmp	r3, #128	; 0x80
 8003902:	d804      	bhi.n	800390e <HAL_RCCEx_PeriphCLKConfig+0x142>
 8003904:	2b00      	cmp	r3, #0
 8003906:	d008      	beq.n	800391a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8003908:	2b40      	cmp	r3, #64	; 0x40
 800390a:	d00d      	beq.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 800390c:	e01e      	b.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x180>
 800390e:	2bc0      	cmp	r3, #192	; 0xc0
 8003910:	d01f      	beq.n	8003952 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8003912:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003916:	d01e      	beq.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8003918:	e018      	b.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800391a:	4b6c      	ldr	r3, [pc, #432]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800391c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800391e:	4a6b      	ldr	r2, [pc, #428]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003920:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003924:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003926:	e017      	b.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	3304      	adds	r3, #4
 800392c:	2100      	movs	r1, #0
 800392e:	4618      	mov	r0, r3
 8003930:	f001 f8e8 	bl	8004b04 <RCCEx_PLL2_Config>
 8003934:	4603      	mov	r3, r0
 8003936:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003938:	e00e      	b.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	3324      	adds	r3, #36	; 0x24
 800393e:	2100      	movs	r1, #0
 8003940:	4618      	mov	r0, r3
 8003942:	f001 f991 	bl	8004c68 <RCCEx_PLL3_Config>
 8003946:	4603      	mov	r3, r0
 8003948:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800394a:	e005      	b.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800394c:	2301      	movs	r3, #1
 800394e:	75fb      	strb	r3, [r7, #23]
      break;
 8003950:	e002      	b.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8003952:	bf00      	nop
 8003954:	e000      	b.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8003956:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003958:	7dfb      	ldrb	r3, [r7, #23]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d109      	bne.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800395e:	4b5b      	ldr	r3, [pc, #364]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003960:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003962:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800396a:	4958      	ldr	r1, [pc, #352]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800396c:	4313      	orrs	r3, r2
 800396e:	650b      	str	r3, [r1, #80]	; 0x50
 8003970:	e001      	b.n	8003976 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003972:	7dfb      	ldrb	r3, [r7, #23]
 8003974:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800397e:	2b00      	cmp	r3, #0
 8003980:	d044      	beq.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003988:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800398c:	d01f      	beq.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0x202>
 800398e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003992:	d805      	bhi.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8003994:	2b00      	cmp	r3, #0
 8003996:	d00a      	beq.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003998:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800399c:	d00e      	beq.n	80039bc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 800399e:	e01f      	b.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0x214>
 80039a0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80039a4:	d01f      	beq.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
 80039a6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80039aa:	d01e      	beq.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80039ac:	e018      	b.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80039ae:	4b47      	ldr	r3, [pc, #284]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80039b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039b2:	4a46      	ldr	r2, [pc, #280]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80039b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039b8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80039ba:	e017      	b.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	3304      	adds	r3, #4
 80039c0:	2100      	movs	r1, #0
 80039c2:	4618      	mov	r0, r3
 80039c4:	f001 f89e 	bl	8004b04 <RCCEx_PLL2_Config>
 80039c8:	4603      	mov	r3, r0
 80039ca:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80039cc:	e00e      	b.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	3324      	adds	r3, #36	; 0x24
 80039d2:	2100      	movs	r1, #0
 80039d4:	4618      	mov	r0, r3
 80039d6:	f001 f947 	bl	8004c68 <RCCEx_PLL3_Config>
 80039da:	4603      	mov	r3, r0
 80039dc:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80039de:	e005      	b.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80039e0:	2301      	movs	r3, #1
 80039e2:	75fb      	strb	r3, [r7, #23]
      break;
 80039e4:	e002      	b.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 80039e6:	bf00      	nop
 80039e8:	e000      	b.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 80039ea:	bf00      	nop
    }

    if(ret == HAL_OK)
 80039ec:	7dfb      	ldrb	r3, [r7, #23]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d10a      	bne.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80039f2:	4b36      	ldr	r3, [pc, #216]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80039f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039f6:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003a00:	4932      	ldr	r1, [pc, #200]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003a02:	4313      	orrs	r3, r2
 8003a04:	658b      	str	r3, [r1, #88]	; 0x58
 8003a06:	e001      	b.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a08:	7dfb      	ldrb	r3, [r7, #23]
 8003a0a:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d044      	beq.n	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003a1e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003a22:	d01f      	beq.n	8003a64 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8003a24:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003a28:	d805      	bhi.n	8003a36 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d00a      	beq.n	8003a44 <HAL_RCCEx_PeriphCLKConfig+0x278>
 8003a2e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003a32:	d00e      	beq.n	8003a52 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8003a34:	e01f      	b.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 8003a36:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003a3a:	d01f      	beq.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8003a3c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003a40:	d01e      	beq.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8003a42:	e018      	b.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a44:	4b21      	ldr	r3, [pc, #132]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a48:	4a20      	ldr	r2, [pc, #128]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003a4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a4e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003a50:	e017      	b.n	8003a82 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	3304      	adds	r3, #4
 8003a56:	2100      	movs	r1, #0
 8003a58:	4618      	mov	r0, r3
 8003a5a:	f001 f853 	bl	8004b04 <RCCEx_PLL2_Config>
 8003a5e:	4603      	mov	r3, r0
 8003a60:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003a62:	e00e      	b.n	8003a82 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	3324      	adds	r3, #36	; 0x24
 8003a68:	2100      	movs	r1, #0
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	f001 f8fc 	bl	8004c68 <RCCEx_PLL3_Config>
 8003a70:	4603      	mov	r3, r0
 8003a72:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003a74:	e005      	b.n	8003a82 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8003a76:	2301      	movs	r3, #1
 8003a78:	75fb      	strb	r3, [r7, #23]
      break;
 8003a7a:	e002      	b.n	8003a82 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8003a7c:	bf00      	nop
 8003a7e:	e000      	b.n	8003a82 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8003a80:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a82:	7dfb      	ldrb	r3, [r7, #23]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d10a      	bne.n	8003a9e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003a88:	4b10      	ldr	r3, [pc, #64]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003a8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a8c:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003a96:	490d      	ldr	r1, [pc, #52]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	658b      	str	r3, [r1, #88]	; 0x58
 8003a9c:	e001      	b.n	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a9e:	7dfb      	ldrb	r3, [r7, #23]
 8003aa0:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d035      	beq.n	8003b1a <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ab2:	2b10      	cmp	r3, #16
 8003ab4:	d00c      	beq.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x304>
 8003ab6:	2b10      	cmp	r3, #16
 8003ab8:	d802      	bhi.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d01b      	beq.n	8003af6 <HAL_RCCEx_PeriphCLKConfig+0x32a>
 8003abe:	e017      	b.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8003ac0:	2b20      	cmp	r3, #32
 8003ac2:	d00c      	beq.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0x312>
 8003ac4:	2b30      	cmp	r3, #48	; 0x30
 8003ac6:	d018      	beq.n	8003afa <HAL_RCCEx_PeriphCLKConfig+0x32e>
 8003ac8:	e012      	b.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8003aca:	bf00      	nop
 8003acc:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ad0:	4baf      	ldr	r3, [pc, #700]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ad4:	4aae      	ldr	r2, [pc, #696]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003ad6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ada:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003adc:	e00e      	b.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	3304      	adds	r3, #4
 8003ae2:	2102      	movs	r1, #2
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	f001 f80d 	bl	8004b04 <RCCEx_PLL2_Config>
 8003aea:	4603      	mov	r3, r0
 8003aec:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003aee:	e005      	b.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003af0:	2301      	movs	r3, #1
 8003af2:	75fb      	strb	r3, [r7, #23]
      break;
 8003af4:	e002      	b.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8003af6:	bf00      	nop
 8003af8:	e000      	b.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8003afa:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003afc:	7dfb      	ldrb	r3, [r7, #23]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d109      	bne.n	8003b16 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003b02:	4ba3      	ldr	r3, [pc, #652]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003b04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b06:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b0e:	49a0      	ldr	r1, [pc, #640]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003b10:	4313      	orrs	r3, r2
 8003b12:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003b14:	e001      	b.n	8003b1a <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b16:	7dfb      	ldrb	r3, [r7, #23]
 8003b18:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d042      	beq.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b2e:	d01f      	beq.n	8003b70 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8003b30:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b34:	d805      	bhi.n	8003b42 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d00a      	beq.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0x384>
 8003b3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b3e:	d00e      	beq.n	8003b5e <HAL_RCCEx_PeriphCLKConfig+0x392>
 8003b40:	e01f      	b.n	8003b82 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 8003b42:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003b46:	d01f      	beq.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8003b48:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003b4c:	d01e      	beq.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8003b4e:	e018      	b.n	8003b82 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b50:	4b8f      	ldr	r3, [pc, #572]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003b52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b54:	4a8e      	ldr	r2, [pc, #568]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003b56:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b5a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003b5c:	e017      	b.n	8003b8e <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	3304      	adds	r3, #4
 8003b62:	2100      	movs	r1, #0
 8003b64:	4618      	mov	r0, r3
 8003b66:	f000 ffcd 	bl	8004b04 <RCCEx_PLL2_Config>
 8003b6a:	4603      	mov	r3, r0
 8003b6c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003b6e:	e00e      	b.n	8003b8e <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	3324      	adds	r3, #36	; 0x24
 8003b74:	2100      	movs	r1, #0
 8003b76:	4618      	mov	r0, r3
 8003b78:	f001 f876 	bl	8004c68 <RCCEx_PLL3_Config>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003b80:	e005      	b.n	8003b8e <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003b82:	2301      	movs	r3, #1
 8003b84:	75fb      	strb	r3, [r7, #23]
      break;
 8003b86:	e002      	b.n	8003b8e <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8003b88:	bf00      	nop
 8003b8a:	e000      	b.n	8003b8e <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8003b8c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b8e:	7dfb      	ldrb	r3, [r7, #23]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d109      	bne.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003b94:	4b7e      	ldr	r3, [pc, #504]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003b96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b98:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ba0:	497b      	ldr	r1, [pc, #492]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	650b      	str	r3, [r1, #80]	; 0x50
 8003ba6:	e001      	b.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ba8:	7dfb      	ldrb	r3, [r7, #23]
 8003baa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d042      	beq.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bbc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003bc0:	d01b      	beq.n	8003bfa <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8003bc2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003bc6:	d805      	bhi.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d022      	beq.n	8003c12 <HAL_RCCEx_PeriphCLKConfig+0x446>
 8003bcc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bd0:	d00a      	beq.n	8003be8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8003bd2:	e01b      	b.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0x440>
 8003bd4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003bd8:	d01d      	beq.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x44a>
 8003bda:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003bde:	d01c      	beq.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x44e>
 8003be0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003be4:	d01b      	beq.n	8003c1e <HAL_RCCEx_PeriphCLKConfig+0x452>
 8003be6:	e011      	b.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	3304      	adds	r3, #4
 8003bec:	2101      	movs	r1, #1
 8003bee:	4618      	mov	r0, r3
 8003bf0:	f000 ff88 	bl	8004b04 <RCCEx_PLL2_Config>
 8003bf4:	4603      	mov	r3, r0
 8003bf6:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003bf8:	e012      	b.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	3324      	adds	r3, #36	; 0x24
 8003bfe:	2101      	movs	r1, #1
 8003c00:	4618      	mov	r0, r3
 8003c02:	f001 f831 	bl	8004c68 <RCCEx_PLL3_Config>
 8003c06:	4603      	mov	r3, r0
 8003c08:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003c0a:	e009      	b.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	75fb      	strb	r3, [r7, #23]
      break;
 8003c10:	e006      	b.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8003c12:	bf00      	nop
 8003c14:	e004      	b.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8003c16:	bf00      	nop
 8003c18:	e002      	b.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8003c1a:	bf00      	nop
 8003c1c:	e000      	b.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8003c1e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c20:	7dfb      	ldrb	r3, [r7, #23]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d109      	bne.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003c26:	4b5a      	ldr	r3, [pc, #360]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003c28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c2a:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c32:	4957      	ldr	r1, [pc, #348]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003c34:	4313      	orrs	r3, r2
 8003c36:	650b      	str	r3, [r1, #80]	; 0x50
 8003c38:	e001      	b.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c3a:	7dfb      	ldrb	r3, [r7, #23]
 8003c3c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d044      	beq.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003c50:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c54:	d01b      	beq.n	8003c8e <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8003c56:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c5a:	d805      	bhi.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0x49c>
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d022      	beq.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8003c60:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003c64:	d00a      	beq.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8003c66:	e01b      	b.n	8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 8003c68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c6c:	d01d      	beq.n	8003caa <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8003c6e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003c72:	d01c      	beq.n	8003cae <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 8003c74:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003c78:	d01b      	beq.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8003c7a:	e011      	b.n	8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	3304      	adds	r3, #4
 8003c80:	2101      	movs	r1, #1
 8003c82:	4618      	mov	r0, r3
 8003c84:	f000 ff3e 	bl	8004b04 <RCCEx_PLL2_Config>
 8003c88:	4603      	mov	r3, r0
 8003c8a:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003c8c:	e012      	b.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	3324      	adds	r3, #36	; 0x24
 8003c92:	2101      	movs	r1, #1
 8003c94:	4618      	mov	r0, r3
 8003c96:	f000 ffe7 	bl	8004c68 <RCCEx_PLL3_Config>
 8003c9a:	4603      	mov	r3, r0
 8003c9c:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003c9e:	e009      	b.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	75fb      	strb	r3, [r7, #23]
      break;
 8003ca4:	e006      	b.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8003ca6:	bf00      	nop
 8003ca8:	e004      	b.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8003caa:	bf00      	nop
 8003cac:	e002      	b.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8003cae:	bf00      	nop
 8003cb0:	e000      	b.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8003cb2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003cb4:	7dfb      	ldrb	r3, [r7, #23]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d10a      	bne.n	8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003cba:	4b35      	ldr	r3, [pc, #212]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003cbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cbe:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003cc8:	4931      	ldr	r1, [pc, #196]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	658b      	str	r3, [r1, #88]	; 0x58
 8003cce:	e001      	b.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cd0:	7dfb      	ldrb	r3, [r7, #23]
 8003cd2:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d02d      	beq.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ce4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003ce8:	d005      	beq.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8003cea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003cee:	d009      	beq.n	8003d04 <HAL_RCCEx_PeriphCLKConfig+0x538>
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d013      	beq.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0x550>
 8003cf4:	e00f      	b.n	8003d16 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003cf6:	4b26      	ldr	r3, [pc, #152]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003cf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cfa:	4a25      	ldr	r2, [pc, #148]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003cfc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d00:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003d02:	e00c      	b.n	8003d1e <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	3304      	adds	r3, #4
 8003d08:	2101      	movs	r1, #1
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	f000 fefa 	bl	8004b04 <RCCEx_PLL2_Config>
 8003d10:	4603      	mov	r3, r0
 8003d12:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003d14:	e003      	b.n	8003d1e <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d16:	2301      	movs	r3, #1
 8003d18:	75fb      	strb	r3, [r7, #23]
      break;
 8003d1a:	e000      	b.n	8003d1e <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 8003d1c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d1e:	7dfb      	ldrb	r3, [r7, #23]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d109      	bne.n	8003d38 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003d24:	4b1a      	ldr	r3, [pc, #104]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003d26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d28:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d30:	4917      	ldr	r1, [pc, #92]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003d32:	4313      	orrs	r3, r2
 8003d34:	650b      	str	r3, [r1, #80]	; 0x50
 8003d36:	e001      	b.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d38:	7dfb      	ldrb	r3, [r7, #23]
 8003d3a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d035      	beq.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d4c:	2b03      	cmp	r3, #3
 8003d4e:	d81b      	bhi.n	8003d88 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8003d50:	a201      	add	r2, pc, #4	; (adr r2, 8003d58 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 8003d52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d56:	bf00      	nop
 8003d58:	08003d95 	.word	0x08003d95
 8003d5c:	08003d69 	.word	0x08003d69
 8003d60:	08003d77 	.word	0x08003d77
 8003d64:	08003d95 	.word	0x08003d95
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d68:	4b09      	ldr	r3, [pc, #36]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d6c:	4a08      	ldr	r2, [pc, #32]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003d6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d72:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003d74:	e00f      	b.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	3304      	adds	r3, #4
 8003d7a:	2102      	movs	r1, #2
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	f000 fec1 	bl	8004b04 <RCCEx_PLL2_Config>
 8003d82:	4603      	mov	r3, r0
 8003d84:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003d86:	e006      	b.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003d88:	2301      	movs	r3, #1
 8003d8a:	75fb      	strb	r3, [r7, #23]
      break;
 8003d8c:	e003      	b.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 8003d8e:	bf00      	nop
 8003d90:	58024400 	.word	0x58024400
      break;
 8003d94:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d96:	7dfb      	ldrb	r3, [r7, #23]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d109      	bne.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003d9c:	4bba      	ldr	r3, [pc, #744]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003d9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003da0:	f023 0203 	bic.w	r2, r3, #3
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003da8:	49b7      	ldr	r1, [pc, #732]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003daa:	4313      	orrs	r3, r2
 8003dac:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003dae:	e001      	b.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003db0:	7dfb      	ldrb	r3, [r7, #23]
 8003db2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	f000 8086 	beq.w	8003ece <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003dc2:	4bb2      	ldr	r3, [pc, #712]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4ab1      	ldr	r2, [pc, #708]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8003dc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dcc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003dce:	f7fd f911 	bl	8000ff4 <HAL_GetTick>
 8003dd2:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003dd4:	e009      	b.n	8003dea <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003dd6:	f7fd f90d 	bl	8000ff4 <HAL_GetTick>
 8003dda:	4602      	mov	r2, r0
 8003ddc:	693b      	ldr	r3, [r7, #16]
 8003dde:	1ad3      	subs	r3, r2, r3
 8003de0:	2b64      	cmp	r3, #100	; 0x64
 8003de2:	d902      	bls.n	8003dea <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 8003de4:	2303      	movs	r3, #3
 8003de6:	75fb      	strb	r3, [r7, #23]
        break;
 8003de8:	e005      	b.n	8003df6 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003dea:	4ba8      	ldr	r3, [pc, #672]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d0ef      	beq.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 8003df6:	7dfb      	ldrb	r3, [r7, #23]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d166      	bne.n	8003eca <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003dfc:	4ba2      	ldr	r3, [pc, #648]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003dfe:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003e06:	4053      	eors	r3, r2
 8003e08:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d013      	beq.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003e10:	4b9d      	ldr	r3, [pc, #628]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003e12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e18:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003e1a:	4b9b      	ldr	r3, [pc, #620]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003e1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e1e:	4a9a      	ldr	r2, [pc, #616]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003e20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e24:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003e26:	4b98      	ldr	r3, [pc, #608]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003e28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e2a:	4a97      	ldr	r2, [pc, #604]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003e2c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e30:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003e32:	4a95      	ldr	r2, [pc, #596]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003e3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e42:	d115      	bne.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e44:	f7fd f8d6 	bl	8000ff4 <HAL_GetTick>
 8003e48:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003e4a:	e00b      	b.n	8003e64 <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e4c:	f7fd f8d2 	bl	8000ff4 <HAL_GetTick>
 8003e50:	4602      	mov	r2, r0
 8003e52:	693b      	ldr	r3, [r7, #16]
 8003e54:	1ad3      	subs	r3, r2, r3
 8003e56:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d902      	bls.n	8003e64 <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 8003e5e:	2303      	movs	r3, #3
 8003e60:	75fb      	strb	r3, [r7, #23]
            break;
 8003e62:	e005      	b.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003e64:	4b88      	ldr	r3, [pc, #544]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003e66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e68:	f003 0302 	and.w	r3, r3, #2
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d0ed      	beq.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 8003e70:	7dfb      	ldrb	r3, [r7, #23]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d126      	bne.n	8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003e7c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e80:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e84:	d10d      	bne.n	8003ea2 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 8003e86:	4b80      	ldr	r3, [pc, #512]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003e88:	691b      	ldr	r3, [r3, #16]
 8003e8a:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003e94:	0919      	lsrs	r1, r3, #4
 8003e96:	4b7e      	ldr	r3, [pc, #504]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 8003e98:	400b      	ands	r3, r1
 8003e9a:	497b      	ldr	r1, [pc, #492]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003e9c:	4313      	orrs	r3, r2
 8003e9e:	610b      	str	r3, [r1, #16]
 8003ea0:	e005      	b.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 8003ea2:	4b79      	ldr	r3, [pc, #484]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003ea4:	691b      	ldr	r3, [r3, #16]
 8003ea6:	4a78      	ldr	r2, [pc, #480]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003ea8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003eac:	6113      	str	r3, [r2, #16]
 8003eae:	4b76      	ldr	r3, [pc, #472]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003eb0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003eb8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ebc:	4972      	ldr	r1, [pc, #456]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003ebe:	4313      	orrs	r3, r2
 8003ec0:	670b      	str	r3, [r1, #112]	; 0x70
 8003ec2:	e004      	b.n	8003ece <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003ec4:	7dfb      	ldrb	r3, [r7, #23]
 8003ec6:	75bb      	strb	r3, [r7, #22]
 8003ec8:	e001      	b.n	8003ece <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003eca:	7dfb      	ldrb	r3, [r7, #23]
 8003ecc:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f003 0301 	and.w	r3, r3, #1
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d07d      	beq.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003ede:	2b28      	cmp	r3, #40	; 0x28
 8003ee0:	d866      	bhi.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 8003ee2:	a201      	add	r2, pc, #4	; (adr r2, 8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003ee4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ee8:	08003fb7 	.word	0x08003fb7
 8003eec:	08003fb1 	.word	0x08003fb1
 8003ef0:	08003fb1 	.word	0x08003fb1
 8003ef4:	08003fb1 	.word	0x08003fb1
 8003ef8:	08003fb1 	.word	0x08003fb1
 8003efc:	08003fb1 	.word	0x08003fb1
 8003f00:	08003fb1 	.word	0x08003fb1
 8003f04:	08003fb1 	.word	0x08003fb1
 8003f08:	08003f8d 	.word	0x08003f8d
 8003f0c:	08003fb1 	.word	0x08003fb1
 8003f10:	08003fb1 	.word	0x08003fb1
 8003f14:	08003fb1 	.word	0x08003fb1
 8003f18:	08003fb1 	.word	0x08003fb1
 8003f1c:	08003fb1 	.word	0x08003fb1
 8003f20:	08003fb1 	.word	0x08003fb1
 8003f24:	08003fb1 	.word	0x08003fb1
 8003f28:	08003f9f 	.word	0x08003f9f
 8003f2c:	08003fb1 	.word	0x08003fb1
 8003f30:	08003fb1 	.word	0x08003fb1
 8003f34:	08003fb1 	.word	0x08003fb1
 8003f38:	08003fb1 	.word	0x08003fb1
 8003f3c:	08003fb1 	.word	0x08003fb1
 8003f40:	08003fb1 	.word	0x08003fb1
 8003f44:	08003fb1 	.word	0x08003fb1
 8003f48:	08003fb7 	.word	0x08003fb7
 8003f4c:	08003fb1 	.word	0x08003fb1
 8003f50:	08003fb1 	.word	0x08003fb1
 8003f54:	08003fb1 	.word	0x08003fb1
 8003f58:	08003fb1 	.word	0x08003fb1
 8003f5c:	08003fb1 	.word	0x08003fb1
 8003f60:	08003fb1 	.word	0x08003fb1
 8003f64:	08003fb1 	.word	0x08003fb1
 8003f68:	08003fb7 	.word	0x08003fb7
 8003f6c:	08003fb1 	.word	0x08003fb1
 8003f70:	08003fb1 	.word	0x08003fb1
 8003f74:	08003fb1 	.word	0x08003fb1
 8003f78:	08003fb1 	.word	0x08003fb1
 8003f7c:	08003fb1 	.word	0x08003fb1
 8003f80:	08003fb1 	.word	0x08003fb1
 8003f84:	08003fb1 	.word	0x08003fb1
 8003f88:	08003fb7 	.word	0x08003fb7
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	3304      	adds	r3, #4
 8003f90:	2101      	movs	r1, #1
 8003f92:	4618      	mov	r0, r3
 8003f94:	f000 fdb6 	bl	8004b04 <RCCEx_PLL2_Config>
 8003f98:	4603      	mov	r3, r0
 8003f9a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003f9c:	e00c      	b.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	3324      	adds	r3, #36	; 0x24
 8003fa2:	2101      	movs	r1, #1
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	f000 fe5f 	bl	8004c68 <RCCEx_PLL3_Config>
 8003faa:	4603      	mov	r3, r0
 8003fac:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003fae:	e003      	b.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003fb0:	2301      	movs	r3, #1
 8003fb2:	75fb      	strb	r3, [r7, #23]
      break;
 8003fb4:	e000      	b.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 8003fb6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003fb8:	7dfb      	ldrb	r3, [r7, #23]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d109      	bne.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003fbe:	4b32      	ldr	r3, [pc, #200]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003fc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fc2:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003fca:	492f      	ldr	r1, [pc, #188]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003fcc:	4313      	orrs	r3, r2
 8003fce:	654b      	str	r3, [r1, #84]	; 0x54
 8003fd0:	e001      	b.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fd2:	7dfb      	ldrb	r3, [r7, #23]
 8003fd4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f003 0302 	and.w	r3, r3, #2
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d037      	beq.n	8004052 <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003fe6:	2b05      	cmp	r3, #5
 8003fe8:	d820      	bhi.n	800402c <HAL_RCCEx_PeriphCLKConfig+0x860>
 8003fea:	a201      	add	r2, pc, #4	; (adr r2, 8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8003fec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ff0:	08004033 	.word	0x08004033
 8003ff4:	08004009 	.word	0x08004009
 8003ff8:	0800401b 	.word	0x0800401b
 8003ffc:	08004033 	.word	0x08004033
 8004000:	08004033 	.word	0x08004033
 8004004:	08004033 	.word	0x08004033
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	3304      	adds	r3, #4
 800400c:	2101      	movs	r1, #1
 800400e:	4618      	mov	r0, r3
 8004010:	f000 fd78 	bl	8004b04 <RCCEx_PLL2_Config>
 8004014:	4603      	mov	r3, r0
 8004016:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004018:	e00c      	b.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	3324      	adds	r3, #36	; 0x24
 800401e:	2101      	movs	r1, #1
 8004020:	4618      	mov	r0, r3
 8004022:	f000 fe21 	bl	8004c68 <RCCEx_PLL3_Config>
 8004026:	4603      	mov	r3, r0
 8004028:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800402a:	e003      	b.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800402c:	2301      	movs	r3, #1
 800402e:	75fb      	strb	r3, [r7, #23]
      break;
 8004030:	e000      	b.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 8004032:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004034:	7dfb      	ldrb	r3, [r7, #23]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d109      	bne.n	800404e <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800403a:	4b13      	ldr	r3, [pc, #76]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800403c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800403e:	f023 0207 	bic.w	r2, r3, #7
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004046:	4910      	ldr	r1, [pc, #64]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004048:	4313      	orrs	r3, r2
 800404a:	654b      	str	r3, [r1, #84]	; 0x54
 800404c:	e001      	b.n	8004052 <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800404e:	7dfb      	ldrb	r3, [r7, #23]
 8004050:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f003 0304 	and.w	r3, r3, #4
 800405a:	2b00      	cmp	r3, #0
 800405c:	d040      	beq.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004064:	2b05      	cmp	r3, #5
 8004066:	d827      	bhi.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 8004068:	a201      	add	r2, pc, #4	; (adr r2, 8004070 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 800406a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800406e:	bf00      	nop
 8004070:	080040bf 	.word	0x080040bf
 8004074:	08004095 	.word	0x08004095
 8004078:	080040a7 	.word	0x080040a7
 800407c:	080040bf 	.word	0x080040bf
 8004080:	080040bf 	.word	0x080040bf
 8004084:	080040bf 	.word	0x080040bf
 8004088:	58024400 	.word	0x58024400
 800408c:	58024800 	.word	0x58024800
 8004090:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	3304      	adds	r3, #4
 8004098:	2101      	movs	r1, #1
 800409a:	4618      	mov	r0, r3
 800409c:	f000 fd32 	bl	8004b04 <RCCEx_PLL2_Config>
 80040a0:	4603      	mov	r3, r0
 80040a2:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80040a4:	e00c      	b.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	3324      	adds	r3, #36	; 0x24
 80040aa:	2101      	movs	r1, #1
 80040ac:	4618      	mov	r0, r3
 80040ae:	f000 fddb 	bl	8004c68 <RCCEx_PLL3_Config>
 80040b2:	4603      	mov	r3, r0
 80040b4:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80040b6:	e003      	b.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80040b8:	2301      	movs	r3, #1
 80040ba:	75fb      	strb	r3, [r7, #23]
      break;
 80040bc:	e000      	b.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 80040be:	bf00      	nop
    }

    if(ret == HAL_OK)
 80040c0:	7dfb      	ldrb	r3, [r7, #23]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d10a      	bne.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80040c6:	4bb2      	ldr	r3, [pc, #712]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80040c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040ca:	f023 0207 	bic.w	r2, r3, #7
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040d4:	49ae      	ldr	r1, [pc, #696]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80040d6:	4313      	orrs	r3, r2
 80040d8:	658b      	str	r3, [r1, #88]	; 0x58
 80040da:	e001      	b.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040dc:	7dfb      	ldrb	r3, [r7, #23]
 80040de:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f003 0320 	and.w	r3, r3, #32
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d044      	beq.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80040f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80040f6:	d01b      	beq.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0x964>
 80040f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80040fc:	d805      	bhi.n	800410a <HAL_RCCEx_PeriphCLKConfig+0x93e>
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d022      	beq.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0x97c>
 8004102:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004106:	d00a      	beq.n	800411e <HAL_RCCEx_PeriphCLKConfig+0x952>
 8004108:	e01b      	b.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0x976>
 800410a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800410e:	d01d      	beq.n	800414c <HAL_RCCEx_PeriphCLKConfig+0x980>
 8004110:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004114:	d01c      	beq.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0x984>
 8004116:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800411a:	d01b      	beq.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0x988>
 800411c:	e011      	b.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	3304      	adds	r3, #4
 8004122:	2100      	movs	r1, #0
 8004124:	4618      	mov	r0, r3
 8004126:	f000 fced 	bl	8004b04 <RCCEx_PLL2_Config>
 800412a:	4603      	mov	r3, r0
 800412c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800412e:	e012      	b.n	8004156 <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	3324      	adds	r3, #36	; 0x24
 8004134:	2102      	movs	r1, #2
 8004136:	4618      	mov	r0, r3
 8004138:	f000 fd96 	bl	8004c68 <RCCEx_PLL3_Config>
 800413c:	4603      	mov	r3, r0
 800413e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004140:	e009      	b.n	8004156 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004142:	2301      	movs	r3, #1
 8004144:	75fb      	strb	r3, [r7, #23]
      break;
 8004146:	e006      	b.n	8004156 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8004148:	bf00      	nop
 800414a:	e004      	b.n	8004156 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 800414c:	bf00      	nop
 800414e:	e002      	b.n	8004156 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8004150:	bf00      	nop
 8004152:	e000      	b.n	8004156 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8004154:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004156:	7dfb      	ldrb	r3, [r7, #23]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d10a      	bne.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800415c:	4b8c      	ldr	r3, [pc, #560]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800415e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004160:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800416a:	4989      	ldr	r1, [pc, #548]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800416c:	4313      	orrs	r3, r2
 800416e:	654b      	str	r3, [r1, #84]	; 0x54
 8004170:	e001      	b.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004172:	7dfb      	ldrb	r3, [r7, #23]
 8004174:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800417e:	2b00      	cmp	r3, #0
 8004180:	d044      	beq.n	800420c <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004188:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800418c:	d01b      	beq.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 800418e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004192:	d805      	bhi.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 8004194:	2b00      	cmp	r3, #0
 8004196:	d022      	beq.n	80041de <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8004198:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800419c:	d00a      	beq.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 800419e:	e01b      	b.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 80041a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041a4:	d01d      	beq.n	80041e2 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 80041a6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80041aa:	d01c      	beq.n	80041e6 <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 80041ac:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80041b0:	d01b      	beq.n	80041ea <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 80041b2:	e011      	b.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	3304      	adds	r3, #4
 80041b8:	2100      	movs	r1, #0
 80041ba:	4618      	mov	r0, r3
 80041bc:	f000 fca2 	bl	8004b04 <RCCEx_PLL2_Config>
 80041c0:	4603      	mov	r3, r0
 80041c2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80041c4:	e012      	b.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	3324      	adds	r3, #36	; 0x24
 80041ca:	2102      	movs	r1, #2
 80041cc:	4618      	mov	r0, r3
 80041ce:	f000 fd4b 	bl	8004c68 <RCCEx_PLL3_Config>
 80041d2:	4603      	mov	r3, r0
 80041d4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80041d6:	e009      	b.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80041d8:	2301      	movs	r3, #1
 80041da:	75fb      	strb	r3, [r7, #23]
      break;
 80041dc:	e006      	b.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 80041de:	bf00      	nop
 80041e0:	e004      	b.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 80041e2:	bf00      	nop
 80041e4:	e002      	b.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 80041e6:	bf00      	nop
 80041e8:	e000      	b.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 80041ea:	bf00      	nop
    }

    if(ret == HAL_OK)
 80041ec:	7dfb      	ldrb	r3, [r7, #23]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d10a      	bne.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80041f2:	4b67      	ldr	r3, [pc, #412]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80041f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041f6:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004200:	4963      	ldr	r1, [pc, #396]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8004202:	4313      	orrs	r3, r2
 8004204:	658b      	str	r3, [r1, #88]	; 0x58
 8004206:	e001      	b.n	800420c <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004208:	7dfb      	ldrb	r3, [r7, #23]
 800420a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004214:	2b00      	cmp	r3, #0
 8004216:	d044      	beq.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800421e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004222:	d01b      	beq.n	800425c <HAL_RCCEx_PeriphCLKConfig+0xa90>
 8004224:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004228:	d805      	bhi.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 800422a:	2b00      	cmp	r3, #0
 800422c:	d022      	beq.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800422e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004232:	d00a      	beq.n	800424a <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8004234:	e01b      	b.n	800426e <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 8004236:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800423a:	d01d      	beq.n	8004278 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 800423c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004240:	d01c      	beq.n	800427c <HAL_RCCEx_PeriphCLKConfig+0xab0>
 8004242:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004246:	d01b      	beq.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 8004248:	e011      	b.n	800426e <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	3304      	adds	r3, #4
 800424e:	2100      	movs	r1, #0
 8004250:	4618      	mov	r0, r3
 8004252:	f000 fc57 	bl	8004b04 <RCCEx_PLL2_Config>
 8004256:	4603      	mov	r3, r0
 8004258:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800425a:	e012      	b.n	8004282 <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	3324      	adds	r3, #36	; 0x24
 8004260:	2102      	movs	r1, #2
 8004262:	4618      	mov	r0, r3
 8004264:	f000 fd00 	bl	8004c68 <RCCEx_PLL3_Config>
 8004268:	4603      	mov	r3, r0
 800426a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800426c:	e009      	b.n	8004282 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800426e:	2301      	movs	r3, #1
 8004270:	75fb      	strb	r3, [r7, #23]
      break;
 8004272:	e006      	b.n	8004282 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8004274:	bf00      	nop
 8004276:	e004      	b.n	8004282 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8004278:	bf00      	nop
 800427a:	e002      	b.n	8004282 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 800427c:	bf00      	nop
 800427e:	e000      	b.n	8004282 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8004280:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004282:	7dfb      	ldrb	r3, [r7, #23]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d10a      	bne.n	800429e <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004288:	4b41      	ldr	r3, [pc, #260]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800428a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800428c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004296:	493e      	ldr	r1, [pc, #248]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8004298:	4313      	orrs	r3, r2
 800429a:	658b      	str	r3, [r1, #88]	; 0x58
 800429c:	e001      	b.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800429e:	7dfb      	ldrb	r3, [r7, #23]
 80042a0:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f003 0308 	and.w	r3, r3, #8
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d01a      	beq.n	80042e4 <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80042b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042b8:	d10a      	bne.n	80042d0 <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	3324      	adds	r3, #36	; 0x24
 80042be:	2102      	movs	r1, #2
 80042c0:	4618      	mov	r0, r3
 80042c2:	f000 fcd1 	bl	8004c68 <RCCEx_PLL3_Config>
 80042c6:	4603      	mov	r3, r0
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d001      	beq.n	80042d0 <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 80042cc:	2301      	movs	r3, #1
 80042ce:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80042d0:	4b2f      	ldr	r3, [pc, #188]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80042d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042d4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80042de:	492c      	ldr	r1, [pc, #176]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80042e0:	4313      	orrs	r3, r2
 80042e2:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f003 0310 	and.w	r3, r3, #16
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d01a      	beq.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80042f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042fa:	d10a      	bne.n	8004312 <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	3324      	adds	r3, #36	; 0x24
 8004300:	2102      	movs	r1, #2
 8004302:	4618      	mov	r0, r3
 8004304:	f000 fcb0 	bl	8004c68 <RCCEx_PLL3_Config>
 8004308:	4603      	mov	r3, r0
 800430a:	2b00      	cmp	r3, #0
 800430c:	d001      	beq.n	8004312 <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 800430e:	2301      	movs	r3, #1
 8004310:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004312:	4b1f      	ldr	r3, [pc, #124]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8004314:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004316:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004320:	491b      	ldr	r1, [pc, #108]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8004322:	4313      	orrs	r3, r2
 8004324:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800432e:	2b00      	cmp	r3, #0
 8004330:	d032      	beq.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004338:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800433c:	d00d      	beq.n	800435a <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 800433e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004342:	d016      	beq.n	8004372 <HAL_RCCEx_PeriphCLKConfig+0xba6>
 8004344:	2b00      	cmp	r3, #0
 8004346:	d111      	bne.n	800436c <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	3304      	adds	r3, #4
 800434c:	2100      	movs	r1, #0
 800434e:	4618      	mov	r0, r3
 8004350:	f000 fbd8 	bl	8004b04 <RCCEx_PLL2_Config>
 8004354:	4603      	mov	r3, r0
 8004356:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004358:	e00c      	b.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	3324      	adds	r3, #36	; 0x24
 800435e:	2102      	movs	r1, #2
 8004360:	4618      	mov	r0, r3
 8004362:	f000 fc81 	bl	8004c68 <RCCEx_PLL3_Config>
 8004366:	4603      	mov	r3, r0
 8004368:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800436a:	e003      	b.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800436c:	2301      	movs	r3, #1
 800436e:	75fb      	strb	r3, [r7, #23]
      break;
 8004370:	e000      	b.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 8004372:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004374:	7dfb      	ldrb	r3, [r7, #23]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d10c      	bne.n	8004394 <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800437a:	4b05      	ldr	r3, [pc, #20]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800437c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800437e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004388:	4901      	ldr	r1, [pc, #4]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800438a:	4313      	orrs	r3, r2
 800438c:	658b      	str	r3, [r1, #88]	; 0x58
 800438e:	e003      	b.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 8004390:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004394:	7dfb      	ldrb	r3, [r7, #23]
 8004396:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d02f      	beq.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043aa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80043ae:	d00c      	beq.n	80043ca <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 80043b0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80043b4:	d015      	beq.n	80043e2 <HAL_RCCEx_PeriphCLKConfig+0xc16>
 80043b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80043ba:	d10f      	bne.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80043bc:	4b79      	ldr	r3, [pc, #484]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80043be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043c0:	4a78      	ldr	r2, [pc, #480]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80043c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80043c6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80043c8:	e00c      	b.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	3324      	adds	r3, #36	; 0x24
 80043ce:	2101      	movs	r1, #1
 80043d0:	4618      	mov	r0, r3
 80043d2:	f000 fc49 	bl	8004c68 <RCCEx_PLL3_Config>
 80043d6:	4603      	mov	r3, r0
 80043d8:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80043da:	e003      	b.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80043dc:	2301      	movs	r3, #1
 80043de:	75fb      	strb	r3, [r7, #23]
      break;
 80043e0:	e000      	b.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 80043e2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80043e4:	7dfb      	ldrb	r3, [r7, #23]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d10a      	bne.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80043ea:	4b6e      	ldr	r3, [pc, #440]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80043ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043ee:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043f8:	496a      	ldr	r1, [pc, #424]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80043fa:	4313      	orrs	r3, r2
 80043fc:	654b      	str	r3, [r1, #84]	; 0x54
 80043fe:	e001      	b.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004400:	7dfb      	ldrb	r3, [r7, #23]
 8004402:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800440c:	2b00      	cmp	r3, #0
 800440e:	d029      	beq.n	8004464 <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004414:	2b00      	cmp	r3, #0
 8004416:	d003      	beq.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 8004418:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800441c:	d007      	beq.n	800442e <HAL_RCCEx_PeriphCLKConfig+0xc62>
 800441e:	e00f      	b.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004420:	4b60      	ldr	r3, [pc, #384]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004424:	4a5f      	ldr	r2, [pc, #380]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004426:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800442a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800442c:	e00b      	b.n	8004446 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	3304      	adds	r3, #4
 8004432:	2102      	movs	r1, #2
 8004434:	4618      	mov	r0, r3
 8004436:	f000 fb65 	bl	8004b04 <RCCEx_PLL2_Config>
 800443a:	4603      	mov	r3, r0
 800443c:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800443e:	e002      	b.n	8004446 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 8004440:	2301      	movs	r3, #1
 8004442:	75fb      	strb	r3, [r7, #23]
      break;
 8004444:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004446:	7dfb      	ldrb	r3, [r7, #23]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d109      	bne.n	8004460 <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800444c:	4b55      	ldr	r3, [pc, #340]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800444e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004450:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004458:	4952      	ldr	r1, [pc, #328]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800445a:	4313      	orrs	r3, r2
 800445c:	64cb      	str	r3, [r1, #76]	; 0x4c
 800445e:	e001      	b.n	8004464 <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004460:	7dfb      	ldrb	r3, [r7, #23]
 8004462:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800446c:	2b00      	cmp	r3, #0
 800446e:	d00a      	beq.n	8004486 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	3324      	adds	r3, #36	; 0x24
 8004474:	2102      	movs	r1, #2
 8004476:	4618      	mov	r0, r3
 8004478:	f000 fbf6 	bl	8004c68 <RCCEx_PLL3_Config>
 800447c:	4603      	mov	r3, r0
 800447e:	2b00      	cmp	r3, #0
 8004480:	d001      	beq.n	8004486 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 8004482:	2301      	movs	r3, #1
 8004484:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800448e:	2b00      	cmp	r3, #0
 8004490:	d02f      	beq.n	80044f2 <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004496:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800449a:	d00c      	beq.n	80044b6 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800449c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80044a0:	d802      	bhi.n	80044a8 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d011      	beq.n	80044ca <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 80044a6:	e00d      	b.n	80044c4 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 80044a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80044ac:	d00f      	beq.n	80044ce <HAL_RCCEx_PeriphCLKConfig+0xd02>
 80044ae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80044b2:	d00e      	beq.n	80044d2 <HAL_RCCEx_PeriphCLKConfig+0xd06>
 80044b4:	e006      	b.n	80044c4 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80044b6:	4b3b      	ldr	r3, [pc, #236]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80044b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044ba:	4a3a      	ldr	r2, [pc, #232]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80044bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80044c0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80044c2:	e007      	b.n	80044d4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80044c4:	2301      	movs	r3, #1
 80044c6:	75fb      	strb	r3, [r7, #23]
      break;
 80044c8:	e004      	b.n	80044d4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 80044ca:	bf00      	nop
 80044cc:	e002      	b.n	80044d4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 80044ce:	bf00      	nop
 80044d0:	e000      	b.n	80044d4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 80044d2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80044d4:	7dfb      	ldrb	r3, [r7, #23]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d109      	bne.n	80044ee <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80044da:	4b32      	ldr	r3, [pc, #200]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80044dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044de:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80044e6:	492f      	ldr	r1, [pc, #188]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80044e8:	4313      	orrs	r3, r2
 80044ea:	654b      	str	r3, [r1, #84]	; 0x54
 80044ec:	e001      	b.n	80044f2 <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044ee:	7dfb      	ldrb	r3, [r7, #23]
 80044f0:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d008      	beq.n	8004510 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80044fe:	4b29      	ldr	r3, [pc, #164]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004500:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004502:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800450a:	4926      	ldr	r1, [pc, #152]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800450c:	4313      	orrs	r3, r2
 800450e:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004518:	2b00      	cmp	r3, #0
 800451a:	d009      	beq.n	8004530 <HAL_RCCEx_PeriphCLKConfig+0xd64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800451c:	4b21      	ldr	r3, [pc, #132]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800451e:	691b      	ldr	r3, [r3, #16]
 8004520:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800452a:	491e      	ldr	r1, [pc, #120]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800452c:	4313      	orrs	r3, r2
 800452e:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004538:	2b00      	cmp	r3, #0
 800453a:	d008      	beq.n	800454e <HAL_RCCEx_PeriphCLKConfig+0xd82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800453c:	4b19      	ldr	r3, [pc, #100]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800453e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004540:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004548:	4916      	ldr	r1, [pc, #88]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800454a:	4313      	orrs	r3, r2
 800454c:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004556:	2b00      	cmp	r3, #0
 8004558:	d00d      	beq.n	8004576 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800455a:	4b12      	ldr	r3, [pc, #72]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800455c:	691b      	ldr	r3, [r3, #16]
 800455e:	4a11      	ldr	r2, [pc, #68]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004560:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004564:	6113      	str	r3, [r2, #16]
 8004566:	4b0f      	ldr	r3, [pc, #60]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004568:	691a      	ldr	r2, [r3, #16]
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004570:	490c      	ldr	r1, [pc, #48]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004572:	4313      	orrs	r3, r2
 8004574:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	2b00      	cmp	r3, #0
 800457c:	da08      	bge.n	8004590 <HAL_RCCEx_PeriphCLKConfig+0xdc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800457e:	4b09      	ldr	r3, [pc, #36]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004580:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004582:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800458a:	4906      	ldr	r1, [pc, #24]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800458c:	4313      	orrs	r3, r2
 800458e:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 8004590:	7dbb      	ldrb	r3, [r7, #22]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d101      	bne.n	800459a <HAL_RCCEx_PeriphCLKConfig+0xdce>
  {
    return HAL_OK;
 8004596:	2300      	movs	r3, #0
 8004598:	e000      	b.n	800459c <HAL_RCCEx_PeriphCLKConfig+0xdd0>
  }
  return HAL_ERROR;
 800459a:	2301      	movs	r3, #1
}
 800459c:	4618      	mov	r0, r3
 800459e:	3718      	adds	r7, #24
 80045a0:	46bd      	mov	sp, r7
 80045a2:	bd80      	pop	{r7, pc}
 80045a4:	58024400 	.word	0x58024400

080045a8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80045ac:	f7ff f8b2 	bl	8003714 <HAL_RCC_GetHCLKFreq>
 80045b0:	4601      	mov	r1, r0
 80045b2:	4b06      	ldr	r3, [pc, #24]	; (80045cc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80045b4:	6a1b      	ldr	r3, [r3, #32]
 80045b6:	091b      	lsrs	r3, r3, #4
 80045b8:	f003 0307 	and.w	r3, r3, #7
 80045bc:	4a04      	ldr	r2, [pc, #16]	; (80045d0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80045be:	5cd3      	ldrb	r3, [r2, r3]
 80045c0:	f003 031f 	and.w	r3, r3, #31
 80045c4:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80045c8:	4618      	mov	r0, r3
 80045ca:	bd80      	pop	{r7, pc}
 80045cc:	58024400 	.word	0x58024400
 80045d0:	08005fc0 	.word	0x08005fc0

080045d4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80045d4:	b480      	push	{r7}
 80045d6:	b089      	sub	sp, #36	; 0x24
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80045dc:	4b9d      	ldr	r3, [pc, #628]	; (8004854 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80045de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045e0:	f003 0303 	and.w	r3, r3, #3
 80045e4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80045e6:	4b9b      	ldr	r3, [pc, #620]	; (8004854 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80045e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045ea:	0b1b      	lsrs	r3, r3, #12
 80045ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80045f0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80045f2:	4b98      	ldr	r3, [pc, #608]	; (8004854 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80045f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045f6:	091b      	lsrs	r3, r3, #4
 80045f8:	f003 0301 	and.w	r3, r3, #1
 80045fc:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80045fe:	4b95      	ldr	r3, [pc, #596]	; (8004854 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004600:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004602:	08db      	lsrs	r3, r3, #3
 8004604:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004608:	693a      	ldr	r2, [r7, #16]
 800460a:	fb02 f303 	mul.w	r3, r2, r3
 800460e:	ee07 3a90 	vmov	s15, r3
 8004612:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004616:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800461a:	697b      	ldr	r3, [r7, #20]
 800461c:	2b00      	cmp	r3, #0
 800461e:	f000 810a 	beq.w	8004836 <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 8004622:	69bb      	ldr	r3, [r7, #24]
 8004624:	2b01      	cmp	r3, #1
 8004626:	d05a      	beq.n	80046de <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 8004628:	2b01      	cmp	r3, #1
 800462a:	d302      	bcc.n	8004632 <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 800462c:	2b02      	cmp	r3, #2
 800462e:	d078      	beq.n	8004722 <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 8004630:	e099      	b.n	8004766 <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004632:	4b88      	ldr	r3, [pc, #544]	; (8004854 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f003 0320 	and.w	r3, r3, #32
 800463a:	2b00      	cmp	r3, #0
 800463c:	d02d      	beq.n	800469a <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800463e:	4b85      	ldr	r3, [pc, #532]	; (8004854 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	08db      	lsrs	r3, r3, #3
 8004644:	f003 0303 	and.w	r3, r3, #3
 8004648:	4a83      	ldr	r2, [pc, #524]	; (8004858 <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 800464a:	fa22 f303 	lsr.w	r3, r2, r3
 800464e:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004650:	68bb      	ldr	r3, [r7, #8]
 8004652:	ee07 3a90 	vmov	s15, r3
 8004656:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800465a:	697b      	ldr	r3, [r7, #20]
 800465c:	ee07 3a90 	vmov	s15, r3
 8004660:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004664:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004668:	4b7a      	ldr	r3, [pc, #488]	; (8004854 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800466a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800466c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004670:	ee07 3a90 	vmov	s15, r3
 8004674:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004678:	ed97 6a03 	vldr	s12, [r7, #12]
 800467c:	eddf 5a77 	vldr	s11, [pc, #476]	; 800485c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8004680:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004684:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004688:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800468c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004690:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004694:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8004698:	e087      	b.n	80047aa <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800469a:	697b      	ldr	r3, [r7, #20]
 800469c:	ee07 3a90 	vmov	s15, r3
 80046a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046a4:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8004860 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 80046a8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80046ac:	4b69      	ldr	r3, [pc, #420]	; (8004854 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80046ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046b4:	ee07 3a90 	vmov	s15, r3
 80046b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046bc:	ed97 6a03 	vldr	s12, [r7, #12]
 80046c0:	eddf 5a66 	vldr	s11, [pc, #408]	; 800485c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80046c4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80046c8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80046cc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80046d0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80046d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046d8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80046dc:	e065      	b.n	80047aa <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80046de:	697b      	ldr	r3, [r7, #20]
 80046e0:	ee07 3a90 	vmov	s15, r3
 80046e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046e8:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8004864 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 80046ec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80046f0:	4b58      	ldr	r3, [pc, #352]	; (8004854 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80046f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046f8:	ee07 3a90 	vmov	s15, r3
 80046fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004700:	ed97 6a03 	vldr	s12, [r7, #12]
 8004704:	eddf 5a55 	vldr	s11, [pc, #340]	; 800485c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8004708:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800470c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004710:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004714:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004718:	ee67 7a27 	vmul.f32	s15, s14, s15
 800471c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004720:	e043      	b.n	80047aa <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004722:	697b      	ldr	r3, [r7, #20]
 8004724:	ee07 3a90 	vmov	s15, r3
 8004728:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800472c:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8004868 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 8004730:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004734:	4b47      	ldr	r3, [pc, #284]	; (8004854 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004736:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004738:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800473c:	ee07 3a90 	vmov	s15, r3
 8004740:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004744:	ed97 6a03 	vldr	s12, [r7, #12]
 8004748:	eddf 5a44 	vldr	s11, [pc, #272]	; 800485c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800474c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004750:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004754:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004758:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800475c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004760:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004764:	e021      	b.n	80047aa <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004766:	697b      	ldr	r3, [r7, #20]
 8004768:	ee07 3a90 	vmov	s15, r3
 800476c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004770:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8004864 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8004774:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004778:	4b36      	ldr	r3, [pc, #216]	; (8004854 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800477a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800477c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004780:	ee07 3a90 	vmov	s15, r3
 8004784:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004788:	ed97 6a03 	vldr	s12, [r7, #12]
 800478c:	eddf 5a33 	vldr	s11, [pc, #204]	; 800485c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8004790:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004794:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004798:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800479c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80047a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047a4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80047a8:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80047aa:	4b2a      	ldr	r3, [pc, #168]	; (8004854 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80047ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047ae:	0a5b      	lsrs	r3, r3, #9
 80047b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80047b4:	ee07 3a90 	vmov	s15, r3
 80047b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047bc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80047c0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80047c4:	edd7 6a07 	vldr	s13, [r7, #28]
 80047c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80047cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80047d0:	ee17 2a90 	vmov	r2, s15
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80047d8:	4b1e      	ldr	r3, [pc, #120]	; (8004854 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80047da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047dc:	0c1b      	lsrs	r3, r3, #16
 80047de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80047e2:	ee07 3a90 	vmov	s15, r3
 80047e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047ea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80047ee:	ee37 7a87 	vadd.f32	s14, s15, s14
 80047f2:	edd7 6a07 	vldr	s13, [r7, #28]
 80047f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80047fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80047fe:	ee17 2a90 	vmov	r2, s15
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8004806:	4b13      	ldr	r3, [pc, #76]	; (8004854 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004808:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800480a:	0e1b      	lsrs	r3, r3, #24
 800480c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004810:	ee07 3a90 	vmov	s15, r3
 8004814:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004818:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800481c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004820:	edd7 6a07 	vldr	s13, [r7, #28]
 8004824:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004828:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800482c:	ee17 2a90 	vmov	r2, s15
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004834:	e008      	b.n	8004848 <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2200      	movs	r2, #0
 800483a:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2200      	movs	r2, #0
 8004840:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2200      	movs	r2, #0
 8004846:	609a      	str	r2, [r3, #8]
}
 8004848:	bf00      	nop
 800484a:	3724      	adds	r7, #36	; 0x24
 800484c:	46bd      	mov	sp, r7
 800484e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004852:	4770      	bx	lr
 8004854:	58024400 	.word	0x58024400
 8004858:	03d09000 	.word	0x03d09000
 800485c:	46000000 	.word	0x46000000
 8004860:	4c742400 	.word	0x4c742400
 8004864:	4a742400 	.word	0x4a742400
 8004868:	4af42400 	.word	0x4af42400

0800486c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800486c:	b480      	push	{r7}
 800486e:	b089      	sub	sp, #36	; 0x24
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004874:	4b9d      	ldr	r3, [pc, #628]	; (8004aec <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004876:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004878:	f003 0303 	and.w	r3, r3, #3
 800487c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800487e:	4b9b      	ldr	r3, [pc, #620]	; (8004aec <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004880:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004882:	0d1b      	lsrs	r3, r3, #20
 8004884:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004888:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800488a:	4b98      	ldr	r3, [pc, #608]	; (8004aec <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800488c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800488e:	0a1b      	lsrs	r3, r3, #8
 8004890:	f003 0301 	and.w	r3, r3, #1
 8004894:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8004896:	4b95      	ldr	r3, [pc, #596]	; (8004aec <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004898:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800489a:	08db      	lsrs	r3, r3, #3
 800489c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80048a0:	693a      	ldr	r2, [r7, #16]
 80048a2:	fb02 f303 	mul.w	r3, r2, r3
 80048a6:	ee07 3a90 	vmov	s15, r3
 80048aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048ae:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80048b2:	697b      	ldr	r3, [r7, #20]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	f000 810a 	beq.w	8004ace <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 80048ba:	69bb      	ldr	r3, [r7, #24]
 80048bc:	2b01      	cmp	r3, #1
 80048be:	d05a      	beq.n	8004976 <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 80048c0:	2b01      	cmp	r3, #1
 80048c2:	d302      	bcc.n	80048ca <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 80048c4:	2b02      	cmp	r3, #2
 80048c6:	d078      	beq.n	80049ba <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 80048c8:	e099      	b.n	80049fe <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80048ca:	4b88      	ldr	r3, [pc, #544]	; (8004aec <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f003 0320 	and.w	r3, r3, #32
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d02d      	beq.n	8004932 <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80048d6:	4b85      	ldr	r3, [pc, #532]	; (8004aec <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	08db      	lsrs	r3, r3, #3
 80048dc:	f003 0303 	and.w	r3, r3, #3
 80048e0:	4a83      	ldr	r2, [pc, #524]	; (8004af0 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 80048e2:	fa22 f303 	lsr.w	r3, r2, r3
 80048e6:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80048e8:	68bb      	ldr	r3, [r7, #8]
 80048ea:	ee07 3a90 	vmov	s15, r3
 80048ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048f2:	697b      	ldr	r3, [r7, #20]
 80048f4:	ee07 3a90 	vmov	s15, r3
 80048f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048fc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004900:	4b7a      	ldr	r3, [pc, #488]	; (8004aec <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004904:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004908:	ee07 3a90 	vmov	s15, r3
 800490c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004910:	ed97 6a03 	vldr	s12, [r7, #12]
 8004914:	eddf 5a77 	vldr	s11, [pc, #476]	; 8004af4 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8004918:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800491c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004920:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004924:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004928:	ee67 7a27 	vmul.f32	s15, s14, s15
 800492c:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8004930:	e087      	b.n	8004a42 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004932:	697b      	ldr	r3, [r7, #20]
 8004934:	ee07 3a90 	vmov	s15, r3
 8004938:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800493c:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8004af8 <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 8004940:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004944:	4b69      	ldr	r3, [pc, #420]	; (8004aec <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004948:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800494c:	ee07 3a90 	vmov	s15, r3
 8004950:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004954:	ed97 6a03 	vldr	s12, [r7, #12]
 8004958:	eddf 5a66 	vldr	s11, [pc, #408]	; 8004af4 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800495c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004960:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004964:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004968:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800496c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004970:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004974:	e065      	b.n	8004a42 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004976:	697b      	ldr	r3, [r7, #20]
 8004978:	ee07 3a90 	vmov	s15, r3
 800497c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004980:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8004afc <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8004984:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004988:	4b58      	ldr	r3, [pc, #352]	; (8004aec <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800498a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800498c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004990:	ee07 3a90 	vmov	s15, r3
 8004994:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004998:	ed97 6a03 	vldr	s12, [r7, #12]
 800499c:	eddf 5a55 	vldr	s11, [pc, #340]	; 8004af4 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80049a0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80049a4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80049a8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80049ac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80049b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049b4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80049b8:	e043      	b.n	8004a42 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80049ba:	697b      	ldr	r3, [r7, #20]
 80049bc:	ee07 3a90 	vmov	s15, r3
 80049c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049c4:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8004b00 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 80049c8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80049cc:	4b47      	ldr	r3, [pc, #284]	; (8004aec <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80049ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049d4:	ee07 3a90 	vmov	s15, r3
 80049d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049dc:	ed97 6a03 	vldr	s12, [r7, #12]
 80049e0:	eddf 5a44 	vldr	s11, [pc, #272]	; 8004af4 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80049e4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80049e8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80049ec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80049f0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80049f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049f8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80049fc:	e021      	b.n	8004a42 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80049fe:	697b      	ldr	r3, [r7, #20]
 8004a00:	ee07 3a90 	vmov	s15, r3
 8004a04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a08:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8004afc <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8004a0c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a10:	4b36      	ldr	r3, [pc, #216]	; (8004aec <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a18:	ee07 3a90 	vmov	s15, r3
 8004a1c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a20:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a24:	eddf 5a33 	vldr	s11, [pc, #204]	; 8004af4 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8004a28:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a2c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a30:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004a34:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a38:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a3c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004a40:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8004a42:	4b2a      	ldr	r3, [pc, #168]	; (8004aec <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a46:	0a5b      	lsrs	r3, r3, #9
 8004a48:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a4c:	ee07 3a90 	vmov	s15, r3
 8004a50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a54:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004a58:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004a5c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004a60:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a64:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a68:	ee17 2a90 	vmov	r2, s15
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8004a70:	4b1e      	ldr	r3, [pc, #120]	; (8004aec <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a74:	0c1b      	lsrs	r3, r3, #16
 8004a76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a7a:	ee07 3a90 	vmov	s15, r3
 8004a7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a82:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004a86:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004a8a:	edd7 6a07 	vldr	s13, [r7, #28]
 8004a8e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a92:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a96:	ee17 2a90 	vmov	r2, s15
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8004a9e:	4b13      	ldr	r3, [pc, #76]	; (8004aec <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aa2:	0e1b      	lsrs	r3, r3, #24
 8004aa4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004aa8:	ee07 3a90 	vmov	s15, r3
 8004aac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ab0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004ab4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004ab8:	edd7 6a07 	vldr	s13, [r7, #28]
 8004abc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004ac0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ac4:	ee17 2a90 	vmov	r2, s15
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004acc:	e008      	b.n	8004ae0 <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2200      	movs	r2, #0
 8004ade:	609a      	str	r2, [r3, #8]
}
 8004ae0:	bf00      	nop
 8004ae2:	3724      	adds	r7, #36	; 0x24
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aea:	4770      	bx	lr
 8004aec:	58024400 	.word	0x58024400
 8004af0:	03d09000 	.word	0x03d09000
 8004af4:	46000000 	.word	0x46000000
 8004af8:	4c742400 	.word	0x4c742400
 8004afc:	4a742400 	.word	0x4a742400
 8004b00:	4af42400 	.word	0x4af42400

08004b04 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b084      	sub	sp, #16
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
 8004b0c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004b0e:	2300      	movs	r3, #0
 8004b10:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004b12:	4b53      	ldr	r3, [pc, #332]	; (8004c60 <RCCEx_PLL2_Config+0x15c>)
 8004b14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b16:	f003 0303 	and.w	r3, r3, #3
 8004b1a:	2b03      	cmp	r3, #3
 8004b1c:	d101      	bne.n	8004b22 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004b1e:	2301      	movs	r3, #1
 8004b20:	e099      	b.n	8004c56 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004b22:	4b4f      	ldr	r3, [pc, #316]	; (8004c60 <RCCEx_PLL2_Config+0x15c>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	4a4e      	ldr	r2, [pc, #312]	; (8004c60 <RCCEx_PLL2_Config+0x15c>)
 8004b28:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004b2c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b2e:	f7fc fa61 	bl	8000ff4 <HAL_GetTick>
 8004b32:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004b34:	e008      	b.n	8004b48 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004b36:	f7fc fa5d 	bl	8000ff4 <HAL_GetTick>
 8004b3a:	4602      	mov	r2, r0
 8004b3c:	68bb      	ldr	r3, [r7, #8]
 8004b3e:	1ad3      	subs	r3, r2, r3
 8004b40:	2b02      	cmp	r3, #2
 8004b42:	d901      	bls.n	8004b48 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004b44:	2303      	movs	r3, #3
 8004b46:	e086      	b.n	8004c56 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004b48:	4b45      	ldr	r3, [pc, #276]	; (8004c60 <RCCEx_PLL2_Config+0x15c>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d1f0      	bne.n	8004b36 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004b54:	4b42      	ldr	r3, [pc, #264]	; (8004c60 <RCCEx_PLL2_Config+0x15c>)
 8004b56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b58:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	031b      	lsls	r3, r3, #12
 8004b62:	493f      	ldr	r1, [pc, #252]	; (8004c60 <RCCEx_PLL2_Config+0x15c>)
 8004b64:	4313      	orrs	r3, r2
 8004b66:	628b      	str	r3, [r1, #40]	; 0x28
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	685b      	ldr	r3, [r3, #4]
 8004b6c:	3b01      	subs	r3, #1
 8004b6e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	689b      	ldr	r3, [r3, #8]
 8004b76:	3b01      	subs	r3, #1
 8004b78:	025b      	lsls	r3, r3, #9
 8004b7a:	b29b      	uxth	r3, r3
 8004b7c:	431a      	orrs	r2, r3
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	68db      	ldr	r3, [r3, #12]
 8004b82:	3b01      	subs	r3, #1
 8004b84:	041b      	lsls	r3, r3, #16
 8004b86:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004b8a:	431a      	orrs	r2, r3
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	691b      	ldr	r3, [r3, #16]
 8004b90:	3b01      	subs	r3, #1
 8004b92:	061b      	lsls	r3, r3, #24
 8004b94:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004b98:	4931      	ldr	r1, [pc, #196]	; (8004c60 <RCCEx_PLL2_Config+0x15c>)
 8004b9a:	4313      	orrs	r3, r2
 8004b9c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004b9e:	4b30      	ldr	r3, [pc, #192]	; (8004c60 <RCCEx_PLL2_Config+0x15c>)
 8004ba0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ba2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	695b      	ldr	r3, [r3, #20]
 8004baa:	492d      	ldr	r1, [pc, #180]	; (8004c60 <RCCEx_PLL2_Config+0x15c>)
 8004bac:	4313      	orrs	r3, r2
 8004bae:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004bb0:	4b2b      	ldr	r3, [pc, #172]	; (8004c60 <RCCEx_PLL2_Config+0x15c>)
 8004bb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bb4:	f023 0220 	bic.w	r2, r3, #32
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	699b      	ldr	r3, [r3, #24]
 8004bbc:	4928      	ldr	r1, [pc, #160]	; (8004c60 <RCCEx_PLL2_Config+0x15c>)
 8004bbe:	4313      	orrs	r3, r2
 8004bc0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004bc2:	4b27      	ldr	r3, [pc, #156]	; (8004c60 <RCCEx_PLL2_Config+0x15c>)
 8004bc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bc6:	4a26      	ldr	r2, [pc, #152]	; (8004c60 <RCCEx_PLL2_Config+0x15c>)
 8004bc8:	f023 0310 	bic.w	r3, r3, #16
 8004bcc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004bce:	4b24      	ldr	r3, [pc, #144]	; (8004c60 <RCCEx_PLL2_Config+0x15c>)
 8004bd0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004bd2:	4b24      	ldr	r3, [pc, #144]	; (8004c64 <RCCEx_PLL2_Config+0x160>)
 8004bd4:	4013      	ands	r3, r2
 8004bd6:	687a      	ldr	r2, [r7, #4]
 8004bd8:	69d2      	ldr	r2, [r2, #28]
 8004bda:	00d2      	lsls	r2, r2, #3
 8004bdc:	4920      	ldr	r1, [pc, #128]	; (8004c60 <RCCEx_PLL2_Config+0x15c>)
 8004bde:	4313      	orrs	r3, r2
 8004be0:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004be2:	4b1f      	ldr	r3, [pc, #124]	; (8004c60 <RCCEx_PLL2_Config+0x15c>)
 8004be4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004be6:	4a1e      	ldr	r2, [pc, #120]	; (8004c60 <RCCEx_PLL2_Config+0x15c>)
 8004be8:	f043 0310 	orr.w	r3, r3, #16
 8004bec:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d106      	bne.n	8004c02 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004bf4:	4b1a      	ldr	r3, [pc, #104]	; (8004c60 <RCCEx_PLL2_Config+0x15c>)
 8004bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bf8:	4a19      	ldr	r2, [pc, #100]	; (8004c60 <RCCEx_PLL2_Config+0x15c>)
 8004bfa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004bfe:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004c00:	e00f      	b.n	8004c22 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	2b01      	cmp	r3, #1
 8004c06:	d106      	bne.n	8004c16 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004c08:	4b15      	ldr	r3, [pc, #84]	; (8004c60 <RCCEx_PLL2_Config+0x15c>)
 8004c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c0c:	4a14      	ldr	r2, [pc, #80]	; (8004c60 <RCCEx_PLL2_Config+0x15c>)
 8004c0e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004c12:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004c14:	e005      	b.n	8004c22 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004c16:	4b12      	ldr	r3, [pc, #72]	; (8004c60 <RCCEx_PLL2_Config+0x15c>)
 8004c18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c1a:	4a11      	ldr	r2, [pc, #68]	; (8004c60 <RCCEx_PLL2_Config+0x15c>)
 8004c1c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004c20:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004c22:	4b0f      	ldr	r3, [pc, #60]	; (8004c60 <RCCEx_PLL2_Config+0x15c>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	4a0e      	ldr	r2, [pc, #56]	; (8004c60 <RCCEx_PLL2_Config+0x15c>)
 8004c28:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004c2c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c2e:	f7fc f9e1 	bl	8000ff4 <HAL_GetTick>
 8004c32:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004c34:	e008      	b.n	8004c48 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004c36:	f7fc f9dd 	bl	8000ff4 <HAL_GetTick>
 8004c3a:	4602      	mov	r2, r0
 8004c3c:	68bb      	ldr	r3, [r7, #8]
 8004c3e:	1ad3      	subs	r3, r2, r3
 8004c40:	2b02      	cmp	r3, #2
 8004c42:	d901      	bls.n	8004c48 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004c44:	2303      	movs	r3, #3
 8004c46:	e006      	b.n	8004c56 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004c48:	4b05      	ldr	r3, [pc, #20]	; (8004c60 <RCCEx_PLL2_Config+0x15c>)
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d0f0      	beq.n	8004c36 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004c54:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c56:	4618      	mov	r0, r3
 8004c58:	3710      	adds	r7, #16
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	bd80      	pop	{r7, pc}
 8004c5e:	bf00      	nop
 8004c60:	58024400 	.word	0x58024400
 8004c64:	ffff0007 	.word	0xffff0007

08004c68 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b084      	sub	sp, #16
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
 8004c70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004c72:	2300      	movs	r3, #0
 8004c74:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004c76:	4b53      	ldr	r3, [pc, #332]	; (8004dc4 <RCCEx_PLL3_Config+0x15c>)
 8004c78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c7a:	f003 0303 	and.w	r3, r3, #3
 8004c7e:	2b03      	cmp	r3, #3
 8004c80:	d101      	bne.n	8004c86 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004c82:	2301      	movs	r3, #1
 8004c84:	e099      	b.n	8004dba <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004c86:	4b4f      	ldr	r3, [pc, #316]	; (8004dc4 <RCCEx_PLL3_Config+0x15c>)
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	4a4e      	ldr	r2, [pc, #312]	; (8004dc4 <RCCEx_PLL3_Config+0x15c>)
 8004c8c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c90:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c92:	f7fc f9af 	bl	8000ff4 <HAL_GetTick>
 8004c96:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004c98:	e008      	b.n	8004cac <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004c9a:	f7fc f9ab 	bl	8000ff4 <HAL_GetTick>
 8004c9e:	4602      	mov	r2, r0
 8004ca0:	68bb      	ldr	r3, [r7, #8]
 8004ca2:	1ad3      	subs	r3, r2, r3
 8004ca4:	2b02      	cmp	r3, #2
 8004ca6:	d901      	bls.n	8004cac <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004ca8:	2303      	movs	r3, #3
 8004caa:	e086      	b.n	8004dba <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004cac:	4b45      	ldr	r3, [pc, #276]	; (8004dc4 <RCCEx_PLL3_Config+0x15c>)
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d1f0      	bne.n	8004c9a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004cb8:	4b42      	ldr	r3, [pc, #264]	; (8004dc4 <RCCEx_PLL3_Config+0x15c>)
 8004cba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cbc:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	051b      	lsls	r3, r3, #20
 8004cc6:	493f      	ldr	r1, [pc, #252]	; (8004dc4 <RCCEx_PLL3_Config+0x15c>)
 8004cc8:	4313      	orrs	r3, r2
 8004cca:	628b      	str	r3, [r1, #40]	; 0x28
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	685b      	ldr	r3, [r3, #4]
 8004cd0:	3b01      	subs	r3, #1
 8004cd2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	689b      	ldr	r3, [r3, #8]
 8004cda:	3b01      	subs	r3, #1
 8004cdc:	025b      	lsls	r3, r3, #9
 8004cde:	b29b      	uxth	r3, r3
 8004ce0:	431a      	orrs	r2, r3
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	68db      	ldr	r3, [r3, #12]
 8004ce6:	3b01      	subs	r3, #1
 8004ce8:	041b      	lsls	r3, r3, #16
 8004cea:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004cee:	431a      	orrs	r2, r3
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	691b      	ldr	r3, [r3, #16]
 8004cf4:	3b01      	subs	r3, #1
 8004cf6:	061b      	lsls	r3, r3, #24
 8004cf8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004cfc:	4931      	ldr	r1, [pc, #196]	; (8004dc4 <RCCEx_PLL3_Config+0x15c>)
 8004cfe:	4313      	orrs	r3, r2
 8004d00:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004d02:	4b30      	ldr	r3, [pc, #192]	; (8004dc4 <RCCEx_PLL3_Config+0x15c>)
 8004d04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d06:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	695b      	ldr	r3, [r3, #20]
 8004d0e:	492d      	ldr	r1, [pc, #180]	; (8004dc4 <RCCEx_PLL3_Config+0x15c>)
 8004d10:	4313      	orrs	r3, r2
 8004d12:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004d14:	4b2b      	ldr	r3, [pc, #172]	; (8004dc4 <RCCEx_PLL3_Config+0x15c>)
 8004d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d18:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	699b      	ldr	r3, [r3, #24]
 8004d20:	4928      	ldr	r1, [pc, #160]	; (8004dc4 <RCCEx_PLL3_Config+0x15c>)
 8004d22:	4313      	orrs	r3, r2
 8004d24:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004d26:	4b27      	ldr	r3, [pc, #156]	; (8004dc4 <RCCEx_PLL3_Config+0x15c>)
 8004d28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d2a:	4a26      	ldr	r2, [pc, #152]	; (8004dc4 <RCCEx_PLL3_Config+0x15c>)
 8004d2c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d30:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004d32:	4b24      	ldr	r3, [pc, #144]	; (8004dc4 <RCCEx_PLL3_Config+0x15c>)
 8004d34:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004d36:	4b24      	ldr	r3, [pc, #144]	; (8004dc8 <RCCEx_PLL3_Config+0x160>)
 8004d38:	4013      	ands	r3, r2
 8004d3a:	687a      	ldr	r2, [r7, #4]
 8004d3c:	69d2      	ldr	r2, [r2, #28]
 8004d3e:	00d2      	lsls	r2, r2, #3
 8004d40:	4920      	ldr	r1, [pc, #128]	; (8004dc4 <RCCEx_PLL3_Config+0x15c>)
 8004d42:	4313      	orrs	r3, r2
 8004d44:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004d46:	4b1f      	ldr	r3, [pc, #124]	; (8004dc4 <RCCEx_PLL3_Config+0x15c>)
 8004d48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d4a:	4a1e      	ldr	r2, [pc, #120]	; (8004dc4 <RCCEx_PLL3_Config+0x15c>)
 8004d4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d50:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d106      	bne.n	8004d66 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004d58:	4b1a      	ldr	r3, [pc, #104]	; (8004dc4 <RCCEx_PLL3_Config+0x15c>)
 8004d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d5c:	4a19      	ldr	r2, [pc, #100]	; (8004dc4 <RCCEx_PLL3_Config+0x15c>)
 8004d5e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004d62:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004d64:	e00f      	b.n	8004d86 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	2b01      	cmp	r3, #1
 8004d6a:	d106      	bne.n	8004d7a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004d6c:	4b15      	ldr	r3, [pc, #84]	; (8004dc4 <RCCEx_PLL3_Config+0x15c>)
 8004d6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d70:	4a14      	ldr	r2, [pc, #80]	; (8004dc4 <RCCEx_PLL3_Config+0x15c>)
 8004d72:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004d76:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004d78:	e005      	b.n	8004d86 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004d7a:	4b12      	ldr	r3, [pc, #72]	; (8004dc4 <RCCEx_PLL3_Config+0x15c>)
 8004d7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d7e:	4a11      	ldr	r2, [pc, #68]	; (8004dc4 <RCCEx_PLL3_Config+0x15c>)
 8004d80:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004d84:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004d86:	4b0f      	ldr	r3, [pc, #60]	; (8004dc4 <RCCEx_PLL3_Config+0x15c>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4a0e      	ldr	r2, [pc, #56]	; (8004dc4 <RCCEx_PLL3_Config+0x15c>)
 8004d8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d90:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d92:	f7fc f92f 	bl	8000ff4 <HAL_GetTick>
 8004d96:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004d98:	e008      	b.n	8004dac <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004d9a:	f7fc f92b 	bl	8000ff4 <HAL_GetTick>
 8004d9e:	4602      	mov	r2, r0
 8004da0:	68bb      	ldr	r3, [r7, #8]
 8004da2:	1ad3      	subs	r3, r2, r3
 8004da4:	2b02      	cmp	r3, #2
 8004da6:	d901      	bls.n	8004dac <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004da8:	2303      	movs	r3, #3
 8004daa:	e006      	b.n	8004dba <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004dac:	4b05      	ldr	r3, [pc, #20]	; (8004dc4 <RCCEx_PLL3_Config+0x15c>)
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d0f0      	beq.n	8004d9a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004db8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dba:	4618      	mov	r0, r3
 8004dbc:	3710      	adds	r7, #16
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	bd80      	pop	{r7, pc}
 8004dc2:	bf00      	nop
 8004dc4:	58024400 	.word	0x58024400
 8004dc8:	ffff0007 	.word	0xffff0007

08004dcc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b082      	sub	sp, #8
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d101      	bne.n	8004dde <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004dda:	2301      	movs	r3, #1
 8004ddc:	e042      	b.n	8004e64 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d106      	bne.n	8004df6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2200      	movs	r2, #0
 8004dec:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004df0:	6878      	ldr	r0, [r7, #4]
 8004df2:	f7fb ff3b 	bl	8000c6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2224      	movs	r2, #36	; 0x24
 8004dfa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	681a      	ldr	r2, [r3, #0]
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f022 0201 	bic.w	r2, r2, #1
 8004e0c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004e0e:	6878      	ldr	r0, [r7, #4]
 8004e10:	f000 f82c 	bl	8004e6c <UART_SetConfig>
 8004e14:	4603      	mov	r3, r0
 8004e16:	2b01      	cmp	r3, #1
 8004e18:	d101      	bne.n	8004e1e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004e1a:	2301      	movs	r3, #1
 8004e1c:	e022      	b.n	8004e64 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d002      	beq.n	8004e2c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004e26:	6878      	ldr	r0, [r7, #4]
 8004e28:	f000 fdd0 	bl	80059cc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	685a      	ldr	r2, [r3, #4]
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004e3a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	689a      	ldr	r2, [r3, #8]
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004e4a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	681a      	ldr	r2, [r3, #0]
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f042 0201 	orr.w	r2, r2, #1
 8004e5a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004e5c:	6878      	ldr	r0, [r7, #4]
 8004e5e:	f000 fe57 	bl	8005b10 <UART_CheckIdleState>
 8004e62:	4603      	mov	r3, r0
}
 8004e64:	4618      	mov	r0, r3
 8004e66:	3708      	adds	r7, #8
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	bd80      	pop	{r7, pc}

08004e6c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e6c:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8004e70:	b08e      	sub	sp, #56	; 0x38
 8004e72:	af00      	add	r7, sp, #0
 8004e74:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004e76:	2300      	movs	r3, #0
 8004e78:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	689a      	ldr	r2, [r3, #8]
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	691b      	ldr	r3, [r3, #16]
 8004e84:	431a      	orrs	r2, r3
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	695b      	ldr	r3, [r3, #20]
 8004e8a:	431a      	orrs	r2, r3
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	69db      	ldr	r3, [r3, #28]
 8004e90:	4313      	orrs	r3, r2
 8004e92:	637b      	str	r3, [r7, #52]	; 0x34
  tmpreg |= (uint32_t)huart->FifoMode;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004e98:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004e9a:	4313      	orrs	r3, r2
 8004e9c:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	681a      	ldr	r2, [r3, #0]
 8004ea4:	4bc1      	ldr	r3, [pc, #772]	; (80051ac <UART_SetConfig+0x340>)
 8004ea6:	4013      	ands	r3, r2
 8004ea8:	687a      	ldr	r2, [r7, #4]
 8004eaa:	6812      	ldr	r2, [r2, #0]
 8004eac:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004eae:	430b      	orrs	r3, r1
 8004eb0:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	685b      	ldr	r3, [r3, #4]
 8004eb8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	68da      	ldr	r2, [r3, #12]
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	430a      	orrs	r2, r1
 8004ec6:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	699b      	ldr	r3, [r3, #24]
 8004ecc:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	4ab7      	ldr	r2, [pc, #732]	; (80051b0 <UART_SetConfig+0x344>)
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	d004      	beq.n	8004ee2 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6a1b      	ldr	r3, [r3, #32]
 8004edc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004ede:	4313      	orrs	r3, r2
 8004ee0:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	689a      	ldr	r2, [r3, #8]
 8004ee8:	4bb2      	ldr	r3, [pc, #712]	; (80051b4 <UART_SetConfig+0x348>)
 8004eea:	4013      	ands	r3, r2
 8004eec:	687a      	ldr	r2, [r7, #4]
 8004eee:	6812      	ldr	r2, [r2, #0]
 8004ef0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004ef2:	430b      	orrs	r3, r1
 8004ef4:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004efc:	f023 010f 	bic.w	r1, r3, #15
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	430a      	orrs	r2, r1
 8004f0a:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	4aa9      	ldr	r2, [pc, #676]	; (80051b8 <UART_SetConfig+0x34c>)
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d177      	bne.n	8005006 <UART_SetConfig+0x19a>
 8004f16:	4ba9      	ldr	r3, [pc, #676]	; (80051bc <UART_SetConfig+0x350>)
 8004f18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f1a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004f1e:	2b28      	cmp	r3, #40	; 0x28
 8004f20:	d86c      	bhi.n	8004ffc <UART_SetConfig+0x190>
 8004f22:	a201      	add	r2, pc, #4	; (adr r2, 8004f28 <UART_SetConfig+0xbc>)
 8004f24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f28:	08004fcd 	.word	0x08004fcd
 8004f2c:	08004ffd 	.word	0x08004ffd
 8004f30:	08004ffd 	.word	0x08004ffd
 8004f34:	08004ffd 	.word	0x08004ffd
 8004f38:	08004ffd 	.word	0x08004ffd
 8004f3c:	08004ffd 	.word	0x08004ffd
 8004f40:	08004ffd 	.word	0x08004ffd
 8004f44:	08004ffd 	.word	0x08004ffd
 8004f48:	08004fd5 	.word	0x08004fd5
 8004f4c:	08004ffd 	.word	0x08004ffd
 8004f50:	08004ffd 	.word	0x08004ffd
 8004f54:	08004ffd 	.word	0x08004ffd
 8004f58:	08004ffd 	.word	0x08004ffd
 8004f5c:	08004ffd 	.word	0x08004ffd
 8004f60:	08004ffd 	.word	0x08004ffd
 8004f64:	08004ffd 	.word	0x08004ffd
 8004f68:	08004fdd 	.word	0x08004fdd
 8004f6c:	08004ffd 	.word	0x08004ffd
 8004f70:	08004ffd 	.word	0x08004ffd
 8004f74:	08004ffd 	.word	0x08004ffd
 8004f78:	08004ffd 	.word	0x08004ffd
 8004f7c:	08004ffd 	.word	0x08004ffd
 8004f80:	08004ffd 	.word	0x08004ffd
 8004f84:	08004ffd 	.word	0x08004ffd
 8004f88:	08004fe5 	.word	0x08004fe5
 8004f8c:	08004ffd 	.word	0x08004ffd
 8004f90:	08004ffd 	.word	0x08004ffd
 8004f94:	08004ffd 	.word	0x08004ffd
 8004f98:	08004ffd 	.word	0x08004ffd
 8004f9c:	08004ffd 	.word	0x08004ffd
 8004fa0:	08004ffd 	.word	0x08004ffd
 8004fa4:	08004ffd 	.word	0x08004ffd
 8004fa8:	08004fed 	.word	0x08004fed
 8004fac:	08004ffd 	.word	0x08004ffd
 8004fb0:	08004ffd 	.word	0x08004ffd
 8004fb4:	08004ffd 	.word	0x08004ffd
 8004fb8:	08004ffd 	.word	0x08004ffd
 8004fbc:	08004ffd 	.word	0x08004ffd
 8004fc0:	08004ffd 	.word	0x08004ffd
 8004fc4:	08004ffd 	.word	0x08004ffd
 8004fc8:	08004ff5 	.word	0x08004ff5
 8004fcc:	2301      	movs	r3, #1
 8004fce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004fd2:	e233      	b.n	800543c <UART_SetConfig+0x5d0>
 8004fd4:	2304      	movs	r3, #4
 8004fd6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004fda:	e22f      	b.n	800543c <UART_SetConfig+0x5d0>
 8004fdc:	2308      	movs	r3, #8
 8004fde:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004fe2:	e22b      	b.n	800543c <UART_SetConfig+0x5d0>
 8004fe4:	2310      	movs	r3, #16
 8004fe6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004fea:	e227      	b.n	800543c <UART_SetConfig+0x5d0>
 8004fec:	2320      	movs	r3, #32
 8004fee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004ff2:	e223      	b.n	800543c <UART_SetConfig+0x5d0>
 8004ff4:	2340      	movs	r3, #64	; 0x40
 8004ff6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004ffa:	e21f      	b.n	800543c <UART_SetConfig+0x5d0>
 8004ffc:	2380      	movs	r3, #128	; 0x80
 8004ffe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005002:	bf00      	nop
 8005004:	e21a      	b.n	800543c <UART_SetConfig+0x5d0>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	4a6d      	ldr	r2, [pc, #436]	; (80051c0 <UART_SetConfig+0x354>)
 800500c:	4293      	cmp	r3, r2
 800500e:	d132      	bne.n	8005076 <UART_SetConfig+0x20a>
 8005010:	4b6a      	ldr	r3, [pc, #424]	; (80051bc <UART_SetConfig+0x350>)
 8005012:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005014:	f003 0307 	and.w	r3, r3, #7
 8005018:	2b05      	cmp	r3, #5
 800501a:	d827      	bhi.n	800506c <UART_SetConfig+0x200>
 800501c:	a201      	add	r2, pc, #4	; (adr r2, 8005024 <UART_SetConfig+0x1b8>)
 800501e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005022:	bf00      	nop
 8005024:	0800503d 	.word	0x0800503d
 8005028:	08005045 	.word	0x08005045
 800502c:	0800504d 	.word	0x0800504d
 8005030:	08005055 	.word	0x08005055
 8005034:	0800505d 	.word	0x0800505d
 8005038:	08005065 	.word	0x08005065
 800503c:	2300      	movs	r3, #0
 800503e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005042:	e1fb      	b.n	800543c <UART_SetConfig+0x5d0>
 8005044:	2304      	movs	r3, #4
 8005046:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800504a:	e1f7      	b.n	800543c <UART_SetConfig+0x5d0>
 800504c:	2308      	movs	r3, #8
 800504e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005052:	e1f3      	b.n	800543c <UART_SetConfig+0x5d0>
 8005054:	2310      	movs	r3, #16
 8005056:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800505a:	e1ef      	b.n	800543c <UART_SetConfig+0x5d0>
 800505c:	2320      	movs	r3, #32
 800505e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005062:	e1eb      	b.n	800543c <UART_SetConfig+0x5d0>
 8005064:	2340      	movs	r3, #64	; 0x40
 8005066:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800506a:	e1e7      	b.n	800543c <UART_SetConfig+0x5d0>
 800506c:	2380      	movs	r3, #128	; 0x80
 800506e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005072:	bf00      	nop
 8005074:	e1e2      	b.n	800543c <UART_SetConfig+0x5d0>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	4a52      	ldr	r2, [pc, #328]	; (80051c4 <UART_SetConfig+0x358>)
 800507c:	4293      	cmp	r3, r2
 800507e:	d132      	bne.n	80050e6 <UART_SetConfig+0x27a>
 8005080:	4b4e      	ldr	r3, [pc, #312]	; (80051bc <UART_SetConfig+0x350>)
 8005082:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005084:	f003 0307 	and.w	r3, r3, #7
 8005088:	2b05      	cmp	r3, #5
 800508a:	d827      	bhi.n	80050dc <UART_SetConfig+0x270>
 800508c:	a201      	add	r2, pc, #4	; (adr r2, 8005094 <UART_SetConfig+0x228>)
 800508e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005092:	bf00      	nop
 8005094:	080050ad 	.word	0x080050ad
 8005098:	080050b5 	.word	0x080050b5
 800509c:	080050bd 	.word	0x080050bd
 80050a0:	080050c5 	.word	0x080050c5
 80050a4:	080050cd 	.word	0x080050cd
 80050a8:	080050d5 	.word	0x080050d5
 80050ac:	2300      	movs	r3, #0
 80050ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80050b2:	e1c3      	b.n	800543c <UART_SetConfig+0x5d0>
 80050b4:	2304      	movs	r3, #4
 80050b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80050ba:	e1bf      	b.n	800543c <UART_SetConfig+0x5d0>
 80050bc:	2308      	movs	r3, #8
 80050be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80050c2:	e1bb      	b.n	800543c <UART_SetConfig+0x5d0>
 80050c4:	2310      	movs	r3, #16
 80050c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80050ca:	e1b7      	b.n	800543c <UART_SetConfig+0x5d0>
 80050cc:	2320      	movs	r3, #32
 80050ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80050d2:	e1b3      	b.n	800543c <UART_SetConfig+0x5d0>
 80050d4:	2340      	movs	r3, #64	; 0x40
 80050d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80050da:	e1af      	b.n	800543c <UART_SetConfig+0x5d0>
 80050dc:	2380      	movs	r3, #128	; 0x80
 80050de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80050e2:	bf00      	nop
 80050e4:	e1aa      	b.n	800543c <UART_SetConfig+0x5d0>
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	4a37      	ldr	r2, [pc, #220]	; (80051c8 <UART_SetConfig+0x35c>)
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d132      	bne.n	8005156 <UART_SetConfig+0x2ea>
 80050f0:	4b32      	ldr	r3, [pc, #200]	; (80051bc <UART_SetConfig+0x350>)
 80050f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050f4:	f003 0307 	and.w	r3, r3, #7
 80050f8:	2b05      	cmp	r3, #5
 80050fa:	d827      	bhi.n	800514c <UART_SetConfig+0x2e0>
 80050fc:	a201      	add	r2, pc, #4	; (adr r2, 8005104 <UART_SetConfig+0x298>)
 80050fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005102:	bf00      	nop
 8005104:	0800511d 	.word	0x0800511d
 8005108:	08005125 	.word	0x08005125
 800510c:	0800512d 	.word	0x0800512d
 8005110:	08005135 	.word	0x08005135
 8005114:	0800513d 	.word	0x0800513d
 8005118:	08005145 	.word	0x08005145
 800511c:	2300      	movs	r3, #0
 800511e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005122:	e18b      	b.n	800543c <UART_SetConfig+0x5d0>
 8005124:	2304      	movs	r3, #4
 8005126:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800512a:	e187      	b.n	800543c <UART_SetConfig+0x5d0>
 800512c:	2308      	movs	r3, #8
 800512e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005132:	e183      	b.n	800543c <UART_SetConfig+0x5d0>
 8005134:	2310      	movs	r3, #16
 8005136:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800513a:	e17f      	b.n	800543c <UART_SetConfig+0x5d0>
 800513c:	2320      	movs	r3, #32
 800513e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005142:	e17b      	b.n	800543c <UART_SetConfig+0x5d0>
 8005144:	2340      	movs	r3, #64	; 0x40
 8005146:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800514a:	e177      	b.n	800543c <UART_SetConfig+0x5d0>
 800514c:	2380      	movs	r3, #128	; 0x80
 800514e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005152:	bf00      	nop
 8005154:	e172      	b.n	800543c <UART_SetConfig+0x5d0>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	4a1c      	ldr	r2, [pc, #112]	; (80051cc <UART_SetConfig+0x360>)
 800515c:	4293      	cmp	r3, r2
 800515e:	d144      	bne.n	80051ea <UART_SetConfig+0x37e>
 8005160:	4b16      	ldr	r3, [pc, #88]	; (80051bc <UART_SetConfig+0x350>)
 8005162:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005164:	f003 0307 	and.w	r3, r3, #7
 8005168:	2b05      	cmp	r3, #5
 800516a:	d839      	bhi.n	80051e0 <UART_SetConfig+0x374>
 800516c:	a201      	add	r2, pc, #4	; (adr r2, 8005174 <UART_SetConfig+0x308>)
 800516e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005172:	bf00      	nop
 8005174:	0800518d 	.word	0x0800518d
 8005178:	08005195 	.word	0x08005195
 800517c:	0800519d 	.word	0x0800519d
 8005180:	080051a5 	.word	0x080051a5
 8005184:	080051d1 	.word	0x080051d1
 8005188:	080051d9 	.word	0x080051d9
 800518c:	2300      	movs	r3, #0
 800518e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005192:	e153      	b.n	800543c <UART_SetConfig+0x5d0>
 8005194:	2304      	movs	r3, #4
 8005196:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800519a:	e14f      	b.n	800543c <UART_SetConfig+0x5d0>
 800519c:	2308      	movs	r3, #8
 800519e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80051a2:	e14b      	b.n	800543c <UART_SetConfig+0x5d0>
 80051a4:	2310      	movs	r3, #16
 80051a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80051aa:	e147      	b.n	800543c <UART_SetConfig+0x5d0>
 80051ac:	cfff69f3 	.word	0xcfff69f3
 80051b0:	58000c00 	.word	0x58000c00
 80051b4:	11fff4ff 	.word	0x11fff4ff
 80051b8:	40011000 	.word	0x40011000
 80051bc:	58024400 	.word	0x58024400
 80051c0:	40004400 	.word	0x40004400
 80051c4:	40004800 	.word	0x40004800
 80051c8:	40004c00 	.word	0x40004c00
 80051cc:	40005000 	.word	0x40005000
 80051d0:	2320      	movs	r3, #32
 80051d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80051d6:	e131      	b.n	800543c <UART_SetConfig+0x5d0>
 80051d8:	2340      	movs	r3, #64	; 0x40
 80051da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80051de:	e12d      	b.n	800543c <UART_SetConfig+0x5d0>
 80051e0:	2380      	movs	r3, #128	; 0x80
 80051e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80051e6:	bf00      	nop
 80051e8:	e128      	b.n	800543c <UART_SetConfig+0x5d0>
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	4ab6      	ldr	r2, [pc, #728]	; (80054c8 <UART_SetConfig+0x65c>)
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d178      	bne.n	80052e6 <UART_SetConfig+0x47a>
 80051f4:	4bb5      	ldr	r3, [pc, #724]	; (80054cc <UART_SetConfig+0x660>)
 80051f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051f8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80051fc:	2b28      	cmp	r3, #40	; 0x28
 80051fe:	d86d      	bhi.n	80052dc <UART_SetConfig+0x470>
 8005200:	a201      	add	r2, pc, #4	; (adr r2, 8005208 <UART_SetConfig+0x39c>)
 8005202:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005206:	bf00      	nop
 8005208:	080052ad 	.word	0x080052ad
 800520c:	080052dd 	.word	0x080052dd
 8005210:	080052dd 	.word	0x080052dd
 8005214:	080052dd 	.word	0x080052dd
 8005218:	080052dd 	.word	0x080052dd
 800521c:	080052dd 	.word	0x080052dd
 8005220:	080052dd 	.word	0x080052dd
 8005224:	080052dd 	.word	0x080052dd
 8005228:	080052b5 	.word	0x080052b5
 800522c:	080052dd 	.word	0x080052dd
 8005230:	080052dd 	.word	0x080052dd
 8005234:	080052dd 	.word	0x080052dd
 8005238:	080052dd 	.word	0x080052dd
 800523c:	080052dd 	.word	0x080052dd
 8005240:	080052dd 	.word	0x080052dd
 8005244:	080052dd 	.word	0x080052dd
 8005248:	080052bd 	.word	0x080052bd
 800524c:	080052dd 	.word	0x080052dd
 8005250:	080052dd 	.word	0x080052dd
 8005254:	080052dd 	.word	0x080052dd
 8005258:	080052dd 	.word	0x080052dd
 800525c:	080052dd 	.word	0x080052dd
 8005260:	080052dd 	.word	0x080052dd
 8005264:	080052dd 	.word	0x080052dd
 8005268:	080052c5 	.word	0x080052c5
 800526c:	080052dd 	.word	0x080052dd
 8005270:	080052dd 	.word	0x080052dd
 8005274:	080052dd 	.word	0x080052dd
 8005278:	080052dd 	.word	0x080052dd
 800527c:	080052dd 	.word	0x080052dd
 8005280:	080052dd 	.word	0x080052dd
 8005284:	080052dd 	.word	0x080052dd
 8005288:	080052cd 	.word	0x080052cd
 800528c:	080052dd 	.word	0x080052dd
 8005290:	080052dd 	.word	0x080052dd
 8005294:	080052dd 	.word	0x080052dd
 8005298:	080052dd 	.word	0x080052dd
 800529c:	080052dd 	.word	0x080052dd
 80052a0:	080052dd 	.word	0x080052dd
 80052a4:	080052dd 	.word	0x080052dd
 80052a8:	080052d5 	.word	0x080052d5
 80052ac:	2301      	movs	r3, #1
 80052ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80052b2:	e0c3      	b.n	800543c <UART_SetConfig+0x5d0>
 80052b4:	2304      	movs	r3, #4
 80052b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80052ba:	e0bf      	b.n	800543c <UART_SetConfig+0x5d0>
 80052bc:	2308      	movs	r3, #8
 80052be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80052c2:	e0bb      	b.n	800543c <UART_SetConfig+0x5d0>
 80052c4:	2310      	movs	r3, #16
 80052c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80052ca:	e0b7      	b.n	800543c <UART_SetConfig+0x5d0>
 80052cc:	2320      	movs	r3, #32
 80052ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80052d2:	e0b3      	b.n	800543c <UART_SetConfig+0x5d0>
 80052d4:	2340      	movs	r3, #64	; 0x40
 80052d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80052da:	e0af      	b.n	800543c <UART_SetConfig+0x5d0>
 80052dc:	2380      	movs	r3, #128	; 0x80
 80052de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80052e2:	bf00      	nop
 80052e4:	e0aa      	b.n	800543c <UART_SetConfig+0x5d0>
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	4a79      	ldr	r2, [pc, #484]	; (80054d0 <UART_SetConfig+0x664>)
 80052ec:	4293      	cmp	r3, r2
 80052ee:	d132      	bne.n	8005356 <UART_SetConfig+0x4ea>
 80052f0:	4b76      	ldr	r3, [pc, #472]	; (80054cc <UART_SetConfig+0x660>)
 80052f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052f4:	f003 0307 	and.w	r3, r3, #7
 80052f8:	2b05      	cmp	r3, #5
 80052fa:	d827      	bhi.n	800534c <UART_SetConfig+0x4e0>
 80052fc:	a201      	add	r2, pc, #4	; (adr r2, 8005304 <UART_SetConfig+0x498>)
 80052fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005302:	bf00      	nop
 8005304:	0800531d 	.word	0x0800531d
 8005308:	08005325 	.word	0x08005325
 800530c:	0800532d 	.word	0x0800532d
 8005310:	08005335 	.word	0x08005335
 8005314:	0800533d 	.word	0x0800533d
 8005318:	08005345 	.word	0x08005345
 800531c:	2300      	movs	r3, #0
 800531e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005322:	e08b      	b.n	800543c <UART_SetConfig+0x5d0>
 8005324:	2304      	movs	r3, #4
 8005326:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800532a:	e087      	b.n	800543c <UART_SetConfig+0x5d0>
 800532c:	2308      	movs	r3, #8
 800532e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005332:	e083      	b.n	800543c <UART_SetConfig+0x5d0>
 8005334:	2310      	movs	r3, #16
 8005336:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800533a:	e07f      	b.n	800543c <UART_SetConfig+0x5d0>
 800533c:	2320      	movs	r3, #32
 800533e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005342:	e07b      	b.n	800543c <UART_SetConfig+0x5d0>
 8005344:	2340      	movs	r3, #64	; 0x40
 8005346:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800534a:	e077      	b.n	800543c <UART_SetConfig+0x5d0>
 800534c:	2380      	movs	r3, #128	; 0x80
 800534e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005352:	bf00      	nop
 8005354:	e072      	b.n	800543c <UART_SetConfig+0x5d0>
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	4a5e      	ldr	r2, [pc, #376]	; (80054d4 <UART_SetConfig+0x668>)
 800535c:	4293      	cmp	r3, r2
 800535e:	d132      	bne.n	80053c6 <UART_SetConfig+0x55a>
 8005360:	4b5a      	ldr	r3, [pc, #360]	; (80054cc <UART_SetConfig+0x660>)
 8005362:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005364:	f003 0307 	and.w	r3, r3, #7
 8005368:	2b05      	cmp	r3, #5
 800536a:	d827      	bhi.n	80053bc <UART_SetConfig+0x550>
 800536c:	a201      	add	r2, pc, #4	; (adr r2, 8005374 <UART_SetConfig+0x508>)
 800536e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005372:	bf00      	nop
 8005374:	0800538d 	.word	0x0800538d
 8005378:	08005395 	.word	0x08005395
 800537c:	0800539d 	.word	0x0800539d
 8005380:	080053a5 	.word	0x080053a5
 8005384:	080053ad 	.word	0x080053ad
 8005388:	080053b5 	.word	0x080053b5
 800538c:	2300      	movs	r3, #0
 800538e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005392:	e053      	b.n	800543c <UART_SetConfig+0x5d0>
 8005394:	2304      	movs	r3, #4
 8005396:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800539a:	e04f      	b.n	800543c <UART_SetConfig+0x5d0>
 800539c:	2308      	movs	r3, #8
 800539e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80053a2:	e04b      	b.n	800543c <UART_SetConfig+0x5d0>
 80053a4:	2310      	movs	r3, #16
 80053a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80053aa:	e047      	b.n	800543c <UART_SetConfig+0x5d0>
 80053ac:	2320      	movs	r3, #32
 80053ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80053b2:	e043      	b.n	800543c <UART_SetConfig+0x5d0>
 80053b4:	2340      	movs	r3, #64	; 0x40
 80053b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80053ba:	e03f      	b.n	800543c <UART_SetConfig+0x5d0>
 80053bc:	2380      	movs	r3, #128	; 0x80
 80053be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80053c2:	bf00      	nop
 80053c4:	e03a      	b.n	800543c <UART_SetConfig+0x5d0>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	4a43      	ldr	r2, [pc, #268]	; (80054d8 <UART_SetConfig+0x66c>)
 80053cc:	4293      	cmp	r3, r2
 80053ce:	d132      	bne.n	8005436 <UART_SetConfig+0x5ca>
 80053d0:	4b3e      	ldr	r3, [pc, #248]	; (80054cc <UART_SetConfig+0x660>)
 80053d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053d4:	f003 0307 	and.w	r3, r3, #7
 80053d8:	2b05      	cmp	r3, #5
 80053da:	d827      	bhi.n	800542c <UART_SetConfig+0x5c0>
 80053dc:	a201      	add	r2, pc, #4	; (adr r2, 80053e4 <UART_SetConfig+0x578>)
 80053de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053e2:	bf00      	nop
 80053e4:	080053fd 	.word	0x080053fd
 80053e8:	08005405 	.word	0x08005405
 80053ec:	0800540d 	.word	0x0800540d
 80053f0:	08005415 	.word	0x08005415
 80053f4:	0800541d 	.word	0x0800541d
 80053f8:	08005425 	.word	0x08005425
 80053fc:	2302      	movs	r3, #2
 80053fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005402:	e01b      	b.n	800543c <UART_SetConfig+0x5d0>
 8005404:	2304      	movs	r3, #4
 8005406:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800540a:	e017      	b.n	800543c <UART_SetConfig+0x5d0>
 800540c:	2308      	movs	r3, #8
 800540e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005412:	e013      	b.n	800543c <UART_SetConfig+0x5d0>
 8005414:	2310      	movs	r3, #16
 8005416:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800541a:	e00f      	b.n	800543c <UART_SetConfig+0x5d0>
 800541c:	2320      	movs	r3, #32
 800541e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005422:	e00b      	b.n	800543c <UART_SetConfig+0x5d0>
 8005424:	2340      	movs	r3, #64	; 0x40
 8005426:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800542a:	e007      	b.n	800543c <UART_SetConfig+0x5d0>
 800542c:	2380      	movs	r3, #128	; 0x80
 800542e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005432:	bf00      	nop
 8005434:	e002      	b.n	800543c <UART_SetConfig+0x5d0>
 8005436:	2380      	movs	r3, #128	; 0x80
 8005438:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	4a25      	ldr	r2, [pc, #148]	; (80054d8 <UART_SetConfig+0x66c>)
 8005442:	4293      	cmp	r3, r2
 8005444:	f040 80b8 	bne.w	80055b8 <UART_SetConfig+0x74c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005448:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800544c:	2b08      	cmp	r3, #8
 800544e:	d019      	beq.n	8005484 <UART_SetConfig+0x618>
 8005450:	2b08      	cmp	r3, #8
 8005452:	dc04      	bgt.n	800545e <UART_SetConfig+0x5f2>
 8005454:	2b02      	cmp	r3, #2
 8005456:	d009      	beq.n	800546c <UART_SetConfig+0x600>
 8005458:	2b04      	cmp	r3, #4
 800545a:	d00b      	beq.n	8005474 <UART_SetConfig+0x608>
 800545c:	e042      	b.n	80054e4 <UART_SetConfig+0x678>
 800545e:	2b20      	cmp	r3, #32
 8005460:	d02b      	beq.n	80054ba <UART_SetConfig+0x64e>
 8005462:	2b40      	cmp	r3, #64	; 0x40
 8005464:	d02c      	beq.n	80054c0 <UART_SetConfig+0x654>
 8005466:	2b10      	cmp	r3, #16
 8005468:	d014      	beq.n	8005494 <UART_SetConfig+0x628>
 800546a:	e03b      	b.n	80054e4 <UART_SetConfig+0x678>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800546c:	f7ff f89c 	bl	80045a8 <HAL_RCCEx_GetD3PCLK1Freq>
 8005470:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8005472:	e03d      	b.n	80054f0 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005474:	f107 0314 	add.w	r3, r7, #20
 8005478:	4618      	mov	r0, r3
 800547a:	f7ff f8ab 	bl	80045d4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800547e:	69bb      	ldr	r3, [r7, #24]
 8005480:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005482:	e035      	b.n	80054f0 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005484:	f107 0308 	add.w	r3, r7, #8
 8005488:	4618      	mov	r0, r3
 800548a:	f7ff f9ef 	bl	800486c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005492:	e02d      	b.n	80054f0 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005494:	4b0d      	ldr	r3, [pc, #52]	; (80054cc <UART_SetConfig+0x660>)
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f003 0320 	and.w	r3, r3, #32
 800549c:	2b00      	cmp	r3, #0
 800549e:	d009      	beq.n	80054b4 <UART_SetConfig+0x648>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80054a0:	4b0a      	ldr	r3, [pc, #40]	; (80054cc <UART_SetConfig+0x660>)
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	08db      	lsrs	r3, r3, #3
 80054a6:	f003 0303 	and.w	r3, r3, #3
 80054aa:	4a0c      	ldr	r2, [pc, #48]	; (80054dc <UART_SetConfig+0x670>)
 80054ac:	fa22 f303 	lsr.w	r3, r2, r3
 80054b0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80054b2:	e01d      	b.n	80054f0 <UART_SetConfig+0x684>
          pclk = (uint32_t) HSI_VALUE;
 80054b4:	4b09      	ldr	r3, [pc, #36]	; (80054dc <UART_SetConfig+0x670>)
 80054b6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80054b8:	e01a      	b.n	80054f0 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80054ba:	4b09      	ldr	r3, [pc, #36]	; (80054e0 <UART_SetConfig+0x674>)
 80054bc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80054be:	e017      	b.n	80054f0 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80054c0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80054c4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80054c6:	e013      	b.n	80054f0 <UART_SetConfig+0x684>
 80054c8:	40011400 	.word	0x40011400
 80054cc:	58024400 	.word	0x58024400
 80054d0:	40007800 	.word	0x40007800
 80054d4:	40007c00 	.word	0x40007c00
 80054d8:	58000c00 	.word	0x58000c00
 80054dc:	03d09000 	.word	0x03d09000
 80054e0:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 80054e4:	2300      	movs	r3, #0
 80054e6:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80054e8:	2301      	movs	r3, #1
 80054ea:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80054ee:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80054f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	f000 824d 	beq.w	8005992 <UART_SetConfig+0xb26>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054fc:	4aad      	ldr	r2, [pc, #692]	; (80057b4 <UART_SetConfig+0x948>)
 80054fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005502:	461a      	mov	r2, r3
 8005504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005506:	fbb3 f3f2 	udiv	r3, r3, r2
 800550a:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	685a      	ldr	r2, [r3, #4]
 8005510:	4613      	mov	r3, r2
 8005512:	005b      	lsls	r3, r3, #1
 8005514:	4413      	add	r3, r2
 8005516:	6a3a      	ldr	r2, [r7, #32]
 8005518:	429a      	cmp	r2, r3
 800551a:	d305      	bcc.n	8005528 <UART_SetConfig+0x6bc>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	685b      	ldr	r3, [r3, #4]
 8005520:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005522:	6a3a      	ldr	r2, [r7, #32]
 8005524:	429a      	cmp	r2, r3
 8005526:	d903      	bls.n	8005530 <UART_SetConfig+0x6c4>
      {
        ret = HAL_ERROR;
 8005528:	2301      	movs	r3, #1
 800552a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800552e:	e230      	b.n	8005992 <UART_SetConfig+0xb26>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005530:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005532:	4618      	mov	r0, r3
 8005534:	f04f 0100 	mov.w	r1, #0
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800553c:	4a9d      	ldr	r2, [pc, #628]	; (80057b4 <UART_SetConfig+0x948>)
 800553e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005542:	b29b      	uxth	r3, r3
 8005544:	f04f 0400 	mov.w	r4, #0
 8005548:	461a      	mov	r2, r3
 800554a:	4623      	mov	r3, r4
 800554c:	f7fa fec4 	bl	80002d8 <__aeabi_uldivmod>
 8005550:	4603      	mov	r3, r0
 8005552:	460c      	mov	r4, r1
 8005554:	4619      	mov	r1, r3
 8005556:	4622      	mov	r2, r4
 8005558:	f04f 0300 	mov.w	r3, #0
 800555c:	f04f 0400 	mov.w	r4, #0
 8005560:	0214      	lsls	r4, r2, #8
 8005562:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8005566:	020b      	lsls	r3, r1, #8
 8005568:	687a      	ldr	r2, [r7, #4]
 800556a:	6852      	ldr	r2, [r2, #4]
 800556c:	0852      	lsrs	r2, r2, #1
 800556e:	4611      	mov	r1, r2
 8005570:	f04f 0200 	mov.w	r2, #0
 8005574:	eb13 0b01 	adds.w	fp, r3, r1
 8005578:	eb44 0c02 	adc.w	ip, r4, r2
 800557c:	4658      	mov	r0, fp
 800557e:	4661      	mov	r1, ip
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	685b      	ldr	r3, [r3, #4]
 8005584:	f04f 0400 	mov.w	r4, #0
 8005588:	461a      	mov	r2, r3
 800558a:	4623      	mov	r3, r4
 800558c:	f7fa fea4 	bl	80002d8 <__aeabi_uldivmod>
 8005590:	4603      	mov	r3, r0
 8005592:	460c      	mov	r4, r1
 8005594:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005596:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005598:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800559c:	d308      	bcc.n	80055b0 <UART_SetConfig+0x744>
 800559e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055a0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80055a4:	d204      	bcs.n	80055b0 <UART_SetConfig+0x744>
        {
          huart->Instance->BRR = usartdiv;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80055ac:	60da      	str	r2, [r3, #12]
 80055ae:	e1f0      	b.n	8005992 <UART_SetConfig+0xb26>
        }
        else
        {
          ret = HAL_ERROR;
 80055b0:	2301      	movs	r3, #1
 80055b2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80055b6:	e1ec      	b.n	8005992 <UART_SetConfig+0xb26>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	69db      	ldr	r3, [r3, #28]
 80055bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80055c0:	f040 8100 	bne.w	80057c4 <UART_SetConfig+0x958>
  {
    switch (clocksource)
 80055c4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80055c8:	2b40      	cmp	r3, #64	; 0x40
 80055ca:	f200 80b7 	bhi.w	800573c <UART_SetConfig+0x8d0>
 80055ce:	a201      	add	r2, pc, #4	; (adr r2, 80055d4 <UART_SetConfig+0x768>)
 80055d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055d4:	080056d9 	.word	0x080056d9
 80055d8:	080056e1 	.word	0x080056e1
 80055dc:	0800573d 	.word	0x0800573d
 80055e0:	0800573d 	.word	0x0800573d
 80055e4:	080056e9 	.word	0x080056e9
 80055e8:	0800573d 	.word	0x0800573d
 80055ec:	0800573d 	.word	0x0800573d
 80055f0:	0800573d 	.word	0x0800573d
 80055f4:	080056f9 	.word	0x080056f9
 80055f8:	0800573d 	.word	0x0800573d
 80055fc:	0800573d 	.word	0x0800573d
 8005600:	0800573d 	.word	0x0800573d
 8005604:	0800573d 	.word	0x0800573d
 8005608:	0800573d 	.word	0x0800573d
 800560c:	0800573d 	.word	0x0800573d
 8005610:	0800573d 	.word	0x0800573d
 8005614:	08005709 	.word	0x08005709
 8005618:	0800573d 	.word	0x0800573d
 800561c:	0800573d 	.word	0x0800573d
 8005620:	0800573d 	.word	0x0800573d
 8005624:	0800573d 	.word	0x0800573d
 8005628:	0800573d 	.word	0x0800573d
 800562c:	0800573d 	.word	0x0800573d
 8005630:	0800573d 	.word	0x0800573d
 8005634:	0800573d 	.word	0x0800573d
 8005638:	0800573d 	.word	0x0800573d
 800563c:	0800573d 	.word	0x0800573d
 8005640:	0800573d 	.word	0x0800573d
 8005644:	0800573d 	.word	0x0800573d
 8005648:	0800573d 	.word	0x0800573d
 800564c:	0800573d 	.word	0x0800573d
 8005650:	0800573d 	.word	0x0800573d
 8005654:	0800572f 	.word	0x0800572f
 8005658:	0800573d 	.word	0x0800573d
 800565c:	0800573d 	.word	0x0800573d
 8005660:	0800573d 	.word	0x0800573d
 8005664:	0800573d 	.word	0x0800573d
 8005668:	0800573d 	.word	0x0800573d
 800566c:	0800573d 	.word	0x0800573d
 8005670:	0800573d 	.word	0x0800573d
 8005674:	0800573d 	.word	0x0800573d
 8005678:	0800573d 	.word	0x0800573d
 800567c:	0800573d 	.word	0x0800573d
 8005680:	0800573d 	.word	0x0800573d
 8005684:	0800573d 	.word	0x0800573d
 8005688:	0800573d 	.word	0x0800573d
 800568c:	0800573d 	.word	0x0800573d
 8005690:	0800573d 	.word	0x0800573d
 8005694:	0800573d 	.word	0x0800573d
 8005698:	0800573d 	.word	0x0800573d
 800569c:	0800573d 	.word	0x0800573d
 80056a0:	0800573d 	.word	0x0800573d
 80056a4:	0800573d 	.word	0x0800573d
 80056a8:	0800573d 	.word	0x0800573d
 80056ac:	0800573d 	.word	0x0800573d
 80056b0:	0800573d 	.word	0x0800573d
 80056b4:	0800573d 	.word	0x0800573d
 80056b8:	0800573d 	.word	0x0800573d
 80056bc:	0800573d 	.word	0x0800573d
 80056c0:	0800573d 	.word	0x0800573d
 80056c4:	0800573d 	.word	0x0800573d
 80056c8:	0800573d 	.word	0x0800573d
 80056cc:	0800573d 	.word	0x0800573d
 80056d0:	0800573d 	.word	0x0800573d
 80056d4:	08005735 	.word	0x08005735
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80056d8:	f7fe f84c 	bl	8003774 <HAL_RCC_GetPCLK1Freq>
 80056dc:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80056de:	e033      	b.n	8005748 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80056e0:	f7fe f85e 	bl	80037a0 <HAL_RCC_GetPCLK2Freq>
 80056e4:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80056e6:	e02f      	b.n	8005748 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80056e8:	f107 0314 	add.w	r3, r7, #20
 80056ec:	4618      	mov	r0, r3
 80056ee:	f7fe ff71 	bl	80045d4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80056f2:	69bb      	ldr	r3, [r7, #24]
 80056f4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80056f6:	e027      	b.n	8005748 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80056f8:	f107 0308 	add.w	r3, r7, #8
 80056fc:	4618      	mov	r0, r3
 80056fe:	f7ff f8b5 	bl	800486c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005706:	e01f      	b.n	8005748 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005708:	4b2b      	ldr	r3, [pc, #172]	; (80057b8 <UART_SetConfig+0x94c>)
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f003 0320 	and.w	r3, r3, #32
 8005710:	2b00      	cmp	r3, #0
 8005712:	d009      	beq.n	8005728 <UART_SetConfig+0x8bc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005714:	4b28      	ldr	r3, [pc, #160]	; (80057b8 <UART_SetConfig+0x94c>)
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	08db      	lsrs	r3, r3, #3
 800571a:	f003 0303 	and.w	r3, r3, #3
 800571e:	4a27      	ldr	r2, [pc, #156]	; (80057bc <UART_SetConfig+0x950>)
 8005720:	fa22 f303 	lsr.w	r3, r2, r3
 8005724:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005726:	e00f      	b.n	8005748 <UART_SetConfig+0x8dc>
          pclk = (uint32_t) HSI_VALUE;
 8005728:	4b24      	ldr	r3, [pc, #144]	; (80057bc <UART_SetConfig+0x950>)
 800572a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800572c:	e00c      	b.n	8005748 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800572e:	4b24      	ldr	r3, [pc, #144]	; (80057c0 <UART_SetConfig+0x954>)
 8005730:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005732:	e009      	b.n	8005748 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005734:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005738:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800573a:	e005      	b.n	8005748 <UART_SetConfig+0x8dc>
      default:
        pclk = 0U;
 800573c:	2300      	movs	r3, #0
 800573e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8005740:	2301      	movs	r3, #1
 8005742:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8005746:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005748:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800574a:	2b00      	cmp	r3, #0
 800574c:	f000 8121 	beq.w	8005992 <UART_SetConfig+0xb26>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005754:	4a17      	ldr	r2, [pc, #92]	; (80057b4 <UART_SetConfig+0x948>)
 8005756:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800575a:	461a      	mov	r2, r3
 800575c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800575e:	fbb3 f3f2 	udiv	r3, r3, r2
 8005762:	005a      	lsls	r2, r3, #1
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	685b      	ldr	r3, [r3, #4]
 8005768:	085b      	lsrs	r3, r3, #1
 800576a:	441a      	add	r2, r3
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	685b      	ldr	r3, [r3, #4]
 8005770:	fbb2 f3f3 	udiv	r3, r2, r3
 8005774:	b29b      	uxth	r3, r3
 8005776:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800577a:	2b0f      	cmp	r3, #15
 800577c:	d916      	bls.n	80057ac <UART_SetConfig+0x940>
 800577e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005780:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005784:	d212      	bcs.n	80057ac <UART_SetConfig+0x940>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005788:	b29b      	uxth	r3, r3
 800578a:	f023 030f 	bic.w	r3, r3, #15
 800578e:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005792:	085b      	lsrs	r3, r3, #1
 8005794:	b29b      	uxth	r3, r3
 8005796:	f003 0307 	and.w	r3, r3, #7
 800579a:	b29a      	uxth	r2, r3
 800579c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800579e:	4313      	orrs	r3, r2
 80057a0:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80057a8:	60da      	str	r2, [r3, #12]
 80057aa:	e0f2      	b.n	8005992 <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 80057ac:	2301      	movs	r3, #1
 80057ae:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80057b2:	e0ee      	b.n	8005992 <UART_SetConfig+0xb26>
 80057b4:	08005fe0 	.word	0x08005fe0
 80057b8:	58024400 	.word	0x58024400
 80057bc:	03d09000 	.word	0x03d09000
 80057c0:	003d0900 	.word	0x003d0900
      }
    }
  }
  else
  {
    switch (clocksource)
 80057c4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80057c8:	2b40      	cmp	r3, #64	; 0x40
 80057ca:	f200 80b7 	bhi.w	800593c <UART_SetConfig+0xad0>
 80057ce:	a201      	add	r2, pc, #4	; (adr r2, 80057d4 <UART_SetConfig+0x968>)
 80057d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057d4:	080058d9 	.word	0x080058d9
 80057d8:	080058e1 	.word	0x080058e1
 80057dc:	0800593d 	.word	0x0800593d
 80057e0:	0800593d 	.word	0x0800593d
 80057e4:	080058e9 	.word	0x080058e9
 80057e8:	0800593d 	.word	0x0800593d
 80057ec:	0800593d 	.word	0x0800593d
 80057f0:	0800593d 	.word	0x0800593d
 80057f4:	080058f9 	.word	0x080058f9
 80057f8:	0800593d 	.word	0x0800593d
 80057fc:	0800593d 	.word	0x0800593d
 8005800:	0800593d 	.word	0x0800593d
 8005804:	0800593d 	.word	0x0800593d
 8005808:	0800593d 	.word	0x0800593d
 800580c:	0800593d 	.word	0x0800593d
 8005810:	0800593d 	.word	0x0800593d
 8005814:	08005909 	.word	0x08005909
 8005818:	0800593d 	.word	0x0800593d
 800581c:	0800593d 	.word	0x0800593d
 8005820:	0800593d 	.word	0x0800593d
 8005824:	0800593d 	.word	0x0800593d
 8005828:	0800593d 	.word	0x0800593d
 800582c:	0800593d 	.word	0x0800593d
 8005830:	0800593d 	.word	0x0800593d
 8005834:	0800593d 	.word	0x0800593d
 8005838:	0800593d 	.word	0x0800593d
 800583c:	0800593d 	.word	0x0800593d
 8005840:	0800593d 	.word	0x0800593d
 8005844:	0800593d 	.word	0x0800593d
 8005848:	0800593d 	.word	0x0800593d
 800584c:	0800593d 	.word	0x0800593d
 8005850:	0800593d 	.word	0x0800593d
 8005854:	0800592f 	.word	0x0800592f
 8005858:	0800593d 	.word	0x0800593d
 800585c:	0800593d 	.word	0x0800593d
 8005860:	0800593d 	.word	0x0800593d
 8005864:	0800593d 	.word	0x0800593d
 8005868:	0800593d 	.word	0x0800593d
 800586c:	0800593d 	.word	0x0800593d
 8005870:	0800593d 	.word	0x0800593d
 8005874:	0800593d 	.word	0x0800593d
 8005878:	0800593d 	.word	0x0800593d
 800587c:	0800593d 	.word	0x0800593d
 8005880:	0800593d 	.word	0x0800593d
 8005884:	0800593d 	.word	0x0800593d
 8005888:	0800593d 	.word	0x0800593d
 800588c:	0800593d 	.word	0x0800593d
 8005890:	0800593d 	.word	0x0800593d
 8005894:	0800593d 	.word	0x0800593d
 8005898:	0800593d 	.word	0x0800593d
 800589c:	0800593d 	.word	0x0800593d
 80058a0:	0800593d 	.word	0x0800593d
 80058a4:	0800593d 	.word	0x0800593d
 80058a8:	0800593d 	.word	0x0800593d
 80058ac:	0800593d 	.word	0x0800593d
 80058b0:	0800593d 	.word	0x0800593d
 80058b4:	0800593d 	.word	0x0800593d
 80058b8:	0800593d 	.word	0x0800593d
 80058bc:	0800593d 	.word	0x0800593d
 80058c0:	0800593d 	.word	0x0800593d
 80058c4:	0800593d 	.word	0x0800593d
 80058c8:	0800593d 	.word	0x0800593d
 80058cc:	0800593d 	.word	0x0800593d
 80058d0:	0800593d 	.word	0x0800593d
 80058d4:	08005935 	.word	0x08005935
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80058d8:	f7fd ff4c 	bl	8003774 <HAL_RCC_GetPCLK1Freq>
 80058dc:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80058de:	e033      	b.n	8005948 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80058e0:	f7fd ff5e 	bl	80037a0 <HAL_RCC_GetPCLK2Freq>
 80058e4:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80058e6:	e02f      	b.n	8005948 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80058e8:	f107 0314 	add.w	r3, r7, #20
 80058ec:	4618      	mov	r0, r3
 80058ee:	f7fe fe71 	bl	80045d4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80058f2:	69bb      	ldr	r3, [r7, #24]
 80058f4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80058f6:	e027      	b.n	8005948 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80058f8:	f107 0308 	add.w	r3, r7, #8
 80058fc:	4618      	mov	r0, r3
 80058fe:	f7fe ffb5 	bl	800486c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005906:	e01f      	b.n	8005948 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005908:	4b2c      	ldr	r3, [pc, #176]	; (80059bc <UART_SetConfig+0xb50>)
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f003 0320 	and.w	r3, r3, #32
 8005910:	2b00      	cmp	r3, #0
 8005912:	d009      	beq.n	8005928 <UART_SetConfig+0xabc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005914:	4b29      	ldr	r3, [pc, #164]	; (80059bc <UART_SetConfig+0xb50>)
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	08db      	lsrs	r3, r3, #3
 800591a:	f003 0303 	and.w	r3, r3, #3
 800591e:	4a28      	ldr	r2, [pc, #160]	; (80059c0 <UART_SetConfig+0xb54>)
 8005920:	fa22 f303 	lsr.w	r3, r2, r3
 8005924:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005926:	e00f      	b.n	8005948 <UART_SetConfig+0xadc>
          pclk = (uint32_t) HSI_VALUE;
 8005928:	4b25      	ldr	r3, [pc, #148]	; (80059c0 <UART_SetConfig+0xb54>)
 800592a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800592c:	e00c      	b.n	8005948 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800592e:	4b25      	ldr	r3, [pc, #148]	; (80059c4 <UART_SetConfig+0xb58>)
 8005930:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005932:	e009      	b.n	8005948 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005934:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005938:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800593a:	e005      	b.n	8005948 <UART_SetConfig+0xadc>
      default:
        pclk = 0U;
 800593c:	2300      	movs	r3, #0
 800593e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8005940:	2301      	movs	r3, #1
 8005942:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8005946:	bf00      	nop
    }

    if (pclk != 0U)
 8005948:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800594a:	2b00      	cmp	r3, #0
 800594c:	d021      	beq.n	8005992 <UART_SetConfig+0xb26>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005952:	4a1d      	ldr	r2, [pc, #116]	; (80059c8 <UART_SetConfig+0xb5c>)
 8005954:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005958:	461a      	mov	r2, r3
 800595a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800595c:	fbb3 f2f2 	udiv	r2, r3, r2
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	685b      	ldr	r3, [r3, #4]
 8005964:	085b      	lsrs	r3, r3, #1
 8005966:	441a      	add	r2, r3
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	685b      	ldr	r3, [r3, #4]
 800596c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005970:	b29b      	uxth	r3, r3
 8005972:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005976:	2b0f      	cmp	r3, #15
 8005978:	d908      	bls.n	800598c <UART_SetConfig+0xb20>
 800597a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800597c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005980:	d204      	bcs.n	800598c <UART_SetConfig+0xb20>
      {
        huart->Instance->BRR = usartdiv;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005988:	60da      	str	r2, [r3, #12]
 800598a:	e002      	b.n	8005992 <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 800598c:	2301      	movs	r3, #1
 800598e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	2201      	movs	r2, #1
 8005996:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	2201      	movs	r2, #1
 800599e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2200      	movs	r2, #0
 80059a6:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2200      	movs	r2, #0
 80059ac:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 80059ae:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 80059b2:	4618      	mov	r0, r3
 80059b4:	3738      	adds	r7, #56	; 0x38
 80059b6:	46bd      	mov	sp, r7
 80059b8:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 80059bc:	58024400 	.word	0x58024400
 80059c0:	03d09000 	.word	0x03d09000
 80059c4:	003d0900 	.word	0x003d0900
 80059c8:	08005fe0 	.word	0x08005fe0

080059cc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80059cc:	b480      	push	{r7}
 80059ce:	b083      	sub	sp, #12
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059d8:	f003 0301 	and.w	r3, r3, #1
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d00a      	beq.n	80059f6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	685b      	ldr	r3, [r3, #4]
 80059e6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	430a      	orrs	r2, r1
 80059f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059fa:	f003 0302 	and.w	r3, r3, #2
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d00a      	beq.n	8005a18 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	685b      	ldr	r3, [r3, #4]
 8005a08:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	430a      	orrs	r2, r1
 8005a16:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a1c:	f003 0304 	and.w	r3, r3, #4
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d00a      	beq.n	8005a3a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	685b      	ldr	r3, [r3, #4]
 8005a2a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	430a      	orrs	r2, r1
 8005a38:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a3e:	f003 0308 	and.w	r3, r3, #8
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d00a      	beq.n	8005a5c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	685b      	ldr	r3, [r3, #4]
 8005a4c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	430a      	orrs	r2, r1
 8005a5a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a60:	f003 0310 	and.w	r3, r3, #16
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d00a      	beq.n	8005a7e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	689b      	ldr	r3, [r3, #8]
 8005a6e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	430a      	orrs	r2, r1
 8005a7c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a82:	f003 0320 	and.w	r3, r3, #32
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d00a      	beq.n	8005aa0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	689b      	ldr	r3, [r3, #8]
 8005a90:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	430a      	orrs	r2, r1
 8005a9e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005aa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d01a      	beq.n	8005ae2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	685b      	ldr	r3, [r3, #4]
 8005ab2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	430a      	orrs	r2, r1
 8005ac0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ac6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005aca:	d10a      	bne.n	8005ae2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	685b      	ldr	r3, [r3, #4]
 8005ad2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	430a      	orrs	r2, r1
 8005ae0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ae6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d00a      	beq.n	8005b04 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	685b      	ldr	r3, [r3, #4]
 8005af4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	430a      	orrs	r2, r1
 8005b02:	605a      	str	r2, [r3, #4]
  }
}
 8005b04:	bf00      	nop
 8005b06:	370c      	adds	r7, #12
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0e:	4770      	bx	lr

08005b10 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b086      	sub	sp, #24
 8005b14:	af02      	add	r7, sp, #8
 8005b16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8005b20:	f7fb fa68 	bl	8000ff4 <HAL_GetTick>
 8005b24:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f003 0308 	and.w	r3, r3, #8
 8005b30:	2b08      	cmp	r3, #8
 8005b32:	d10e      	bne.n	8005b52 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005b34:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005b38:	9300      	str	r3, [sp, #0]
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005b42:	6878      	ldr	r0, [r7, #4]
 8005b44:	f000 f82c 	bl	8005ba0 <UART_WaitOnFlagUntilTimeout>
 8005b48:	4603      	mov	r3, r0
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d001      	beq.n	8005b52 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005b4e:	2303      	movs	r3, #3
 8005b50:	e022      	b.n	8005b98 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f003 0304 	and.w	r3, r3, #4
 8005b5c:	2b04      	cmp	r3, #4
 8005b5e:	d10e      	bne.n	8005b7e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005b60:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005b64:	9300      	str	r3, [sp, #0]
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	2200      	movs	r2, #0
 8005b6a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005b6e:	6878      	ldr	r0, [r7, #4]
 8005b70:	f000 f816 	bl	8005ba0 <UART_WaitOnFlagUntilTimeout>
 8005b74:	4603      	mov	r3, r0
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d001      	beq.n	8005b7e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005b7a:	2303      	movs	r3, #3
 8005b7c:	e00c      	b.n	8005b98 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	2220      	movs	r2, #32
 8005b82:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2220      	movs	r2, #32
 8005b8a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	2200      	movs	r2, #0
 8005b92:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8005b96:	2300      	movs	r3, #0
}
 8005b98:	4618      	mov	r0, r3
 8005b9a:	3710      	adds	r7, #16
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	bd80      	pop	{r7, pc}

08005ba0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b084      	sub	sp, #16
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	60f8      	str	r0, [r7, #12]
 8005ba8:	60b9      	str	r1, [r7, #8]
 8005baa:	603b      	str	r3, [r7, #0]
 8005bac:	4613      	mov	r3, r2
 8005bae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005bb0:	e062      	b.n	8005c78 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005bb2:	69bb      	ldr	r3, [r7, #24]
 8005bb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bb8:	d05e      	beq.n	8005c78 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005bba:	f7fb fa1b 	bl	8000ff4 <HAL_GetTick>
 8005bbe:	4602      	mov	r2, r0
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	1ad3      	subs	r3, r2, r3
 8005bc4:	69ba      	ldr	r2, [r7, #24]
 8005bc6:	429a      	cmp	r2, r3
 8005bc8:	d302      	bcc.n	8005bd0 <UART_WaitOnFlagUntilTimeout+0x30>
 8005bca:	69bb      	ldr	r3, [r7, #24]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d11d      	bne.n	8005c0c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	681a      	ldr	r2, [r3, #0]
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005bde:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	689a      	ldr	r2, [r3, #8]
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f022 0201 	bic.w	r2, r2, #1
 8005bee:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	2220      	movs	r2, #32
 8005bf4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	2220      	movs	r2, #32
 8005bfc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	2200      	movs	r2, #0
 8005c04:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8005c08:	2303      	movs	r3, #3
 8005c0a:	e045      	b.n	8005c98 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f003 0304 	and.w	r3, r3, #4
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d02e      	beq.n	8005c78 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	69db      	ldr	r3, [r3, #28]
 8005c20:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c24:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c28:	d126      	bne.n	8005c78 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005c32:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	681a      	ldr	r2, [r3, #0]
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005c42:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	689a      	ldr	r2, [r3, #8]
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f022 0201 	bic.w	r2, r2, #1
 8005c52:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	2220      	movs	r2, #32
 8005c58:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	2220      	movs	r2, #32
 8005c60:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	2220      	movs	r2, #32
 8005c68:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	2200      	movs	r2, #0
 8005c70:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 8005c74:	2303      	movs	r3, #3
 8005c76:	e00f      	b.n	8005c98 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	69da      	ldr	r2, [r3, #28]
 8005c7e:	68bb      	ldr	r3, [r7, #8]
 8005c80:	4013      	ands	r3, r2
 8005c82:	68ba      	ldr	r2, [r7, #8]
 8005c84:	429a      	cmp	r2, r3
 8005c86:	bf0c      	ite	eq
 8005c88:	2301      	moveq	r3, #1
 8005c8a:	2300      	movne	r3, #0
 8005c8c:	b2db      	uxtb	r3, r3
 8005c8e:	461a      	mov	r2, r3
 8005c90:	79fb      	ldrb	r3, [r7, #7]
 8005c92:	429a      	cmp	r2, r3
 8005c94:	d08d      	beq.n	8005bb2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005c96:	2300      	movs	r3, #0
}
 8005c98:	4618      	mov	r0, r3
 8005c9a:	3710      	adds	r7, #16
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	bd80      	pop	{r7, pc}

08005ca0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005ca0:	b480      	push	{r7}
 8005ca2:	b085      	sub	sp, #20
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8005cae:	2b01      	cmp	r3, #1
 8005cb0:	d101      	bne.n	8005cb6 <HAL_UARTEx_DisableFifoMode+0x16>
 8005cb2:	2302      	movs	r3, #2
 8005cb4:	e027      	b.n	8005d06 <HAL_UARTEx_DisableFifoMode+0x66>
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	2201      	movs	r2, #1
 8005cba:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2224      	movs	r2, #36	; 0x24
 8005cc2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	681a      	ldr	r2, [r3, #0]
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f022 0201 	bic.w	r2, r2, #1
 8005cdc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005ce4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	2200      	movs	r2, #0
 8005cea:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	68fa      	ldr	r2, [r7, #12]
 8005cf2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2220      	movs	r2, #32
 8005cf8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2200      	movs	r2, #0
 8005d00:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8005d04:	2300      	movs	r3, #0
}
 8005d06:	4618      	mov	r0, r3
 8005d08:	3714      	adds	r7, #20
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d10:	4770      	bx	lr

08005d12 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005d12:	b580      	push	{r7, lr}
 8005d14:	b084      	sub	sp, #16
 8005d16:	af00      	add	r7, sp, #0
 8005d18:	6078      	str	r0, [r7, #4]
 8005d1a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8005d22:	2b01      	cmp	r3, #1
 8005d24:	d101      	bne.n	8005d2a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005d26:	2302      	movs	r3, #2
 8005d28:	e02d      	b.n	8005d86 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	2201      	movs	r2, #1
 8005d2e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	2224      	movs	r2, #36	; 0x24
 8005d36:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	681a      	ldr	r2, [r3, #0]
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	f022 0201 	bic.w	r2, r2, #1
 8005d50:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	689b      	ldr	r3, [r3, #8]
 8005d58:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	683a      	ldr	r2, [r7, #0]
 8005d62:	430a      	orrs	r2, r1
 8005d64:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005d66:	6878      	ldr	r0, [r7, #4]
 8005d68:	f000 f850 	bl	8005e0c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	68fa      	ldr	r2, [r7, #12]
 8005d72:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2220      	movs	r2, #32
 8005d78:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2200      	movs	r2, #0
 8005d80:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8005d84:	2300      	movs	r3, #0
}
 8005d86:	4618      	mov	r0, r3
 8005d88:	3710      	adds	r7, #16
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	bd80      	pop	{r7, pc}

08005d8e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005d8e:	b580      	push	{r7, lr}
 8005d90:	b084      	sub	sp, #16
 8005d92:	af00      	add	r7, sp, #0
 8005d94:	6078      	str	r0, [r7, #4]
 8005d96:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8005d9e:	2b01      	cmp	r3, #1
 8005da0:	d101      	bne.n	8005da6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005da2:	2302      	movs	r3, #2
 8005da4:	e02d      	b.n	8005e02 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	2201      	movs	r2, #1
 8005daa:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	2224      	movs	r2, #36	; 0x24
 8005db2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	681a      	ldr	r2, [r3, #0]
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f022 0201 	bic.w	r2, r2, #1
 8005dcc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	689b      	ldr	r3, [r3, #8]
 8005dd4:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	683a      	ldr	r2, [r7, #0]
 8005dde:	430a      	orrs	r2, r1
 8005de0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005de2:	6878      	ldr	r0, [r7, #4]
 8005de4:	f000 f812 	bl	8005e0c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	68fa      	ldr	r2, [r7, #12]
 8005dee:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2220      	movs	r2, #32
 8005df4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8005e00:	2300      	movs	r3, #0
}
 8005e02:	4618      	mov	r0, r3
 8005e04:	3710      	adds	r7, #16
 8005e06:	46bd      	mov	sp, r7
 8005e08:	bd80      	pop	{r7, pc}
	...

08005e0c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005e0c:	b480      	push	{r7}
 8005e0e:	b089      	sub	sp, #36	; 0x24
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8005e14:	4a2f      	ldr	r2, [pc, #188]	; (8005ed4 <UARTEx_SetNbDataToProcess+0xc8>)
 8005e16:	f107 0314 	add.w	r3, r7, #20
 8005e1a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005e1e:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8005e22:	4a2d      	ldr	r2, [pc, #180]	; (8005ed8 <UARTEx_SetNbDataToProcess+0xcc>)
 8005e24:	f107 030c 	add.w	r3, r7, #12
 8005e28:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005e2c:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d108      	bne.n	8005e4a <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2201      	movs	r2, #1
 8005e3c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2201      	movs	r2, #1
 8005e44:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005e48:	e03d      	b.n	8005ec6 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005e4a:	2310      	movs	r3, #16
 8005e4c:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005e4e:	2310      	movs	r3, #16
 8005e50:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	689b      	ldr	r3, [r3, #8]
 8005e58:	0e5b      	lsrs	r3, r3, #25
 8005e5a:	b2db      	uxtb	r3, r3
 8005e5c:	f003 0307 	and.w	r3, r3, #7
 8005e60:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	689b      	ldr	r3, [r3, #8]
 8005e68:	0f5b      	lsrs	r3, r3, #29
 8005e6a:	b2db      	uxtb	r3, r3
 8005e6c:	f003 0307 	and.w	r3, r3, #7
 8005e70:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8005e72:	7fbb      	ldrb	r3, [r7, #30]
 8005e74:	7f3a      	ldrb	r2, [r7, #28]
 8005e76:	f107 0120 	add.w	r1, r7, #32
 8005e7a:	440a      	add	r2, r1
 8005e7c:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8005e80:	fb02 f303 	mul.w	r3, r2, r3
 8005e84:	7f3a      	ldrb	r2, [r7, #28]
 8005e86:	f107 0120 	add.w	r1, r7, #32
 8005e8a:	440a      	add	r2, r1
 8005e8c:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8005e90:	fb93 f3f2 	sdiv	r3, r3, r2
 8005e94:	b29a      	uxth	r2, r3
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8005e9c:	7ffb      	ldrb	r3, [r7, #31]
 8005e9e:	7f7a      	ldrb	r2, [r7, #29]
 8005ea0:	f107 0120 	add.w	r1, r7, #32
 8005ea4:	440a      	add	r2, r1
 8005ea6:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8005eaa:	fb02 f303 	mul.w	r3, r2, r3
 8005eae:	7f7a      	ldrb	r2, [r7, #29]
 8005eb0:	f107 0120 	add.w	r1, r7, #32
 8005eb4:	440a      	add	r2, r1
 8005eb6:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8005eba:	fb93 f3f2 	sdiv	r3, r3, r2
 8005ebe:	b29a      	uxth	r2, r3
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005ec6:	bf00      	nop
 8005ec8:	3724      	adds	r7, #36	; 0x24
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed0:	4770      	bx	lr
 8005ed2:	bf00      	nop
 8005ed4:	08005fb0 	.word	0x08005fb0
 8005ed8:	08005fb8 	.word	0x08005fb8

08005edc <__libc_init_array>:
 8005edc:	b570      	push	{r4, r5, r6, lr}
 8005ede:	4e0d      	ldr	r6, [pc, #52]	; (8005f14 <__libc_init_array+0x38>)
 8005ee0:	4c0d      	ldr	r4, [pc, #52]	; (8005f18 <__libc_init_array+0x3c>)
 8005ee2:	1ba4      	subs	r4, r4, r6
 8005ee4:	10a4      	asrs	r4, r4, #2
 8005ee6:	2500      	movs	r5, #0
 8005ee8:	42a5      	cmp	r5, r4
 8005eea:	d109      	bne.n	8005f00 <__libc_init_array+0x24>
 8005eec:	4e0b      	ldr	r6, [pc, #44]	; (8005f1c <__libc_init_array+0x40>)
 8005eee:	4c0c      	ldr	r4, [pc, #48]	; (8005f20 <__libc_init_array+0x44>)
 8005ef0:	f000 f82c 	bl	8005f4c <_init>
 8005ef4:	1ba4      	subs	r4, r4, r6
 8005ef6:	10a4      	asrs	r4, r4, #2
 8005ef8:	2500      	movs	r5, #0
 8005efa:	42a5      	cmp	r5, r4
 8005efc:	d105      	bne.n	8005f0a <__libc_init_array+0x2e>
 8005efe:	bd70      	pop	{r4, r5, r6, pc}
 8005f00:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005f04:	4798      	blx	r3
 8005f06:	3501      	adds	r5, #1
 8005f08:	e7ee      	b.n	8005ee8 <__libc_init_array+0xc>
 8005f0a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005f0e:	4798      	blx	r3
 8005f10:	3501      	adds	r5, #1
 8005f12:	e7f2      	b.n	8005efa <__libc_init_array+0x1e>
 8005f14:	08006000 	.word	0x08006000
 8005f18:	08006000 	.word	0x08006000
 8005f1c:	08006000 	.word	0x08006000
 8005f20:	08006004 	.word	0x08006004

08005f24 <memcpy>:
 8005f24:	b510      	push	{r4, lr}
 8005f26:	1e43      	subs	r3, r0, #1
 8005f28:	440a      	add	r2, r1
 8005f2a:	4291      	cmp	r1, r2
 8005f2c:	d100      	bne.n	8005f30 <memcpy+0xc>
 8005f2e:	bd10      	pop	{r4, pc}
 8005f30:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005f34:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005f38:	e7f7      	b.n	8005f2a <memcpy+0x6>

08005f3a <memset>:
 8005f3a:	4402      	add	r2, r0
 8005f3c:	4603      	mov	r3, r0
 8005f3e:	4293      	cmp	r3, r2
 8005f40:	d100      	bne.n	8005f44 <memset+0xa>
 8005f42:	4770      	bx	lr
 8005f44:	f803 1b01 	strb.w	r1, [r3], #1
 8005f48:	e7f9      	b.n	8005f3e <memset+0x4>
	...

08005f4c <_init>:
 8005f4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f4e:	bf00      	nop
 8005f50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f52:	bc08      	pop	{r3}
 8005f54:	469e      	mov	lr, r3
 8005f56:	4770      	bx	lr

08005f58 <_fini>:
 8005f58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f5a:	bf00      	nop
 8005f5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f5e:	bc08      	pop	{r3}
 8005f60:	469e      	mov	lr, r3
 8005f62:	4770      	bx	lr
