
TesteCANN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005c80  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  08005f18  08005f18  00015f18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005fac  08005fac  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08005fac  08005fac  00015fac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005fb4  08005fb4  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005fb4  08005fb4  00015fb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005fb8  08005fb8  00015fb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  24000000  08005fbc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000204  24000010  08005fcc  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  24000214  08005fcc  00020214  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c180  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000029d0  00000000  00000000  0003c1be  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000e78  00000000  00000000  0003eb90  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000d70  00000000  00000000  0003fa08  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0003654e  00000000  00000000  00040778  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000bd55  00000000  00000000  00076cc6  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0015d938  00000000  00000000  00082a1b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001e0353  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d14  00000000  00000000  001e03d0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08005f00 	.word	0x08005f00

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	08005f00 	.word	0x08005f00

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b972 	b.w	80005d4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9e08      	ldr	r6, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	4688      	mov	r8, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	d14b      	bne.n	80003ae <__udivmoddi4+0xa6>
 8000316:	428a      	cmp	r2, r1
 8000318:	4615      	mov	r5, r2
 800031a:	d967      	bls.n	80003ec <__udivmoddi4+0xe4>
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	b14a      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000322:	f1c2 0720 	rsb	r7, r2, #32
 8000326:	fa01 f302 	lsl.w	r3, r1, r2
 800032a:	fa20 f707 	lsr.w	r7, r0, r7
 800032e:	4095      	lsls	r5, r2
 8000330:	ea47 0803 	orr.w	r8, r7, r3
 8000334:	4094      	lsls	r4, r2
 8000336:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000340:	fa1f fc85 	uxth.w	ip, r5
 8000344:	fb0e 8817 	mls	r8, lr, r7, r8
 8000348:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800034c:	fb07 f10c 	mul.w	r1, r7, ip
 8000350:	4299      	cmp	r1, r3
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x60>
 8000354:	18eb      	adds	r3, r5, r3
 8000356:	f107 30ff 	add.w	r0, r7, #4294967295
 800035a:	f080 811b 	bcs.w	8000594 <__udivmoddi4+0x28c>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 8118 	bls.w	8000594 <__udivmoddi4+0x28c>
 8000364:	3f02      	subs	r7, #2
 8000366:	442b      	add	r3, r5
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000370:	fb0e 3310 	mls	r3, lr, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 fc0c 	mul.w	ip, r0, ip
 800037c:	45a4      	cmp	ip, r4
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x8c>
 8000380:	192c      	adds	r4, r5, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	f080 8107 	bcs.w	8000598 <__udivmoddi4+0x290>
 800038a:	45a4      	cmp	ip, r4
 800038c:	f240 8104 	bls.w	8000598 <__udivmoddi4+0x290>
 8000390:	3802      	subs	r0, #2
 8000392:	442c      	add	r4, r5
 8000394:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000398:	eba4 040c 	sub.w	r4, r4, ip
 800039c:	2700      	movs	r7, #0
 800039e:	b11e      	cbz	r6, 80003a8 <__udivmoddi4+0xa0>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c6 4300 	strd	r4, r3, [r6]
 80003a8:	4639      	mov	r1, r7
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d909      	bls.n	80003c6 <__udivmoddi4+0xbe>
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	f000 80eb 	beq.w	800058e <__udivmoddi4+0x286>
 80003b8:	2700      	movs	r7, #0
 80003ba:	e9c6 0100 	strd	r0, r1, [r6]
 80003be:	4638      	mov	r0, r7
 80003c0:	4639      	mov	r1, r7
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	fab3 f783 	clz	r7, r3
 80003ca:	2f00      	cmp	r7, #0
 80003cc:	d147      	bne.n	800045e <__udivmoddi4+0x156>
 80003ce:	428b      	cmp	r3, r1
 80003d0:	d302      	bcc.n	80003d8 <__udivmoddi4+0xd0>
 80003d2:	4282      	cmp	r2, r0
 80003d4:	f200 80fa 	bhi.w	80005cc <__udivmoddi4+0x2c4>
 80003d8:	1a84      	subs	r4, r0, r2
 80003da:	eb61 0303 	sbc.w	r3, r1, r3
 80003de:	2001      	movs	r0, #1
 80003e0:	4698      	mov	r8, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d0e0      	beq.n	80003a8 <__udivmoddi4+0xa0>
 80003e6:	e9c6 4800 	strd	r4, r8, [r6]
 80003ea:	e7dd      	b.n	80003a8 <__udivmoddi4+0xa0>
 80003ec:	b902      	cbnz	r2, 80003f0 <__udivmoddi4+0xe8>
 80003ee:	deff      	udf	#255	; 0xff
 80003f0:	fab2 f282 	clz	r2, r2
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	f040 808f 	bne.w	8000518 <__udivmoddi4+0x210>
 80003fa:	1b49      	subs	r1, r1, r5
 80003fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000400:	fa1f f885 	uxth.w	r8, r5
 8000404:	2701      	movs	r7, #1
 8000406:	fbb1 fcfe 	udiv	ip, r1, lr
 800040a:	0c23      	lsrs	r3, r4, #16
 800040c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000410:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000414:	fb08 f10c 	mul.w	r1, r8, ip
 8000418:	4299      	cmp	r1, r3
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x124>
 800041c:	18eb      	adds	r3, r5, r3
 800041e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x122>
 8000424:	4299      	cmp	r1, r3
 8000426:	f200 80cd 	bhi.w	80005c4 <__udivmoddi4+0x2bc>
 800042a:	4684      	mov	ip, r0
 800042c:	1a59      	subs	r1, r3, r1
 800042e:	b2a3      	uxth	r3, r4
 8000430:	fbb1 f0fe 	udiv	r0, r1, lr
 8000434:	fb0e 1410 	mls	r4, lr, r0, r1
 8000438:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800043c:	fb08 f800 	mul.w	r8, r8, r0
 8000440:	45a0      	cmp	r8, r4
 8000442:	d907      	bls.n	8000454 <__udivmoddi4+0x14c>
 8000444:	192c      	adds	r4, r5, r4
 8000446:	f100 33ff 	add.w	r3, r0, #4294967295
 800044a:	d202      	bcs.n	8000452 <__udivmoddi4+0x14a>
 800044c:	45a0      	cmp	r8, r4
 800044e:	f200 80b6 	bhi.w	80005be <__udivmoddi4+0x2b6>
 8000452:	4618      	mov	r0, r3
 8000454:	eba4 0408 	sub.w	r4, r4, r8
 8000458:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800045c:	e79f      	b.n	800039e <__udivmoddi4+0x96>
 800045e:	f1c7 0c20 	rsb	ip, r7, #32
 8000462:	40bb      	lsls	r3, r7
 8000464:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000468:	ea4e 0e03 	orr.w	lr, lr, r3
 800046c:	fa01 f407 	lsl.w	r4, r1, r7
 8000470:	fa20 f50c 	lsr.w	r5, r0, ip
 8000474:	fa21 f30c 	lsr.w	r3, r1, ip
 8000478:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800047c:	4325      	orrs	r5, r4
 800047e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000482:	0c2c      	lsrs	r4, r5, #16
 8000484:	fb08 3319 	mls	r3, r8, r9, r3
 8000488:	fa1f fa8e 	uxth.w	sl, lr
 800048c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000490:	fb09 f40a 	mul.w	r4, r9, sl
 8000494:	429c      	cmp	r4, r3
 8000496:	fa02 f207 	lsl.w	r2, r2, r7
 800049a:	fa00 f107 	lsl.w	r1, r0, r7
 800049e:	d90b      	bls.n	80004b8 <__udivmoddi4+0x1b0>
 80004a0:	eb1e 0303 	adds.w	r3, lr, r3
 80004a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004a8:	f080 8087 	bcs.w	80005ba <__udivmoddi4+0x2b2>
 80004ac:	429c      	cmp	r4, r3
 80004ae:	f240 8084 	bls.w	80005ba <__udivmoddi4+0x2b2>
 80004b2:	f1a9 0902 	sub.w	r9, r9, #2
 80004b6:	4473      	add	r3, lr
 80004b8:	1b1b      	subs	r3, r3, r4
 80004ba:	b2ad      	uxth	r5, r5
 80004bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c0:	fb08 3310 	mls	r3, r8, r0, r3
 80004c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80004cc:	45a2      	cmp	sl, r4
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x1da>
 80004d0:	eb1e 0404 	adds.w	r4, lr, r4
 80004d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80004d8:	d26b      	bcs.n	80005b2 <__udivmoddi4+0x2aa>
 80004da:	45a2      	cmp	sl, r4
 80004dc:	d969      	bls.n	80005b2 <__udivmoddi4+0x2aa>
 80004de:	3802      	subs	r0, #2
 80004e0:	4474      	add	r4, lr
 80004e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004e6:	fba0 8902 	umull	r8, r9, r0, r2
 80004ea:	eba4 040a 	sub.w	r4, r4, sl
 80004ee:	454c      	cmp	r4, r9
 80004f0:	46c2      	mov	sl, r8
 80004f2:	464b      	mov	r3, r9
 80004f4:	d354      	bcc.n	80005a0 <__udivmoddi4+0x298>
 80004f6:	d051      	beq.n	800059c <__udivmoddi4+0x294>
 80004f8:	2e00      	cmp	r6, #0
 80004fa:	d069      	beq.n	80005d0 <__udivmoddi4+0x2c8>
 80004fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000500:	eb64 0403 	sbc.w	r4, r4, r3
 8000504:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000508:	40fd      	lsrs	r5, r7
 800050a:	40fc      	lsrs	r4, r7
 800050c:	ea4c 0505 	orr.w	r5, ip, r5
 8000510:	e9c6 5400 	strd	r5, r4, [r6]
 8000514:	2700      	movs	r7, #0
 8000516:	e747      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000518:	f1c2 0320 	rsb	r3, r2, #32
 800051c:	fa20 f703 	lsr.w	r7, r0, r3
 8000520:	4095      	lsls	r5, r2
 8000522:	fa01 f002 	lsl.w	r0, r1, r2
 8000526:	fa21 f303 	lsr.w	r3, r1, r3
 800052a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800052e:	4338      	orrs	r0, r7
 8000530:	0c01      	lsrs	r1, r0, #16
 8000532:	fbb3 f7fe 	udiv	r7, r3, lr
 8000536:	fa1f f885 	uxth.w	r8, r5
 800053a:	fb0e 3317 	mls	r3, lr, r7, r3
 800053e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000542:	fb07 f308 	mul.w	r3, r7, r8
 8000546:	428b      	cmp	r3, r1
 8000548:	fa04 f402 	lsl.w	r4, r4, r2
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x256>
 800054e:	1869      	adds	r1, r5, r1
 8000550:	f107 3cff 	add.w	ip, r7, #4294967295
 8000554:	d22f      	bcs.n	80005b6 <__udivmoddi4+0x2ae>
 8000556:	428b      	cmp	r3, r1
 8000558:	d92d      	bls.n	80005b6 <__udivmoddi4+0x2ae>
 800055a:	3f02      	subs	r7, #2
 800055c:	4429      	add	r1, r5
 800055e:	1acb      	subs	r3, r1, r3
 8000560:	b281      	uxth	r1, r0
 8000562:	fbb3 f0fe 	udiv	r0, r3, lr
 8000566:	fb0e 3310 	mls	r3, lr, r0, r3
 800056a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056e:	fb00 f308 	mul.w	r3, r0, r8
 8000572:	428b      	cmp	r3, r1
 8000574:	d907      	bls.n	8000586 <__udivmoddi4+0x27e>
 8000576:	1869      	adds	r1, r5, r1
 8000578:	f100 3cff 	add.w	ip, r0, #4294967295
 800057c:	d217      	bcs.n	80005ae <__udivmoddi4+0x2a6>
 800057e:	428b      	cmp	r3, r1
 8000580:	d915      	bls.n	80005ae <__udivmoddi4+0x2a6>
 8000582:	3802      	subs	r0, #2
 8000584:	4429      	add	r1, r5
 8000586:	1ac9      	subs	r1, r1, r3
 8000588:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800058c:	e73b      	b.n	8000406 <__udivmoddi4+0xfe>
 800058e:	4637      	mov	r7, r6
 8000590:	4630      	mov	r0, r6
 8000592:	e709      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000594:	4607      	mov	r7, r0
 8000596:	e6e7      	b.n	8000368 <__udivmoddi4+0x60>
 8000598:	4618      	mov	r0, r3
 800059a:	e6fb      	b.n	8000394 <__udivmoddi4+0x8c>
 800059c:	4541      	cmp	r1, r8
 800059e:	d2ab      	bcs.n	80004f8 <__udivmoddi4+0x1f0>
 80005a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80005a4:	eb69 020e 	sbc.w	r2, r9, lr
 80005a8:	3801      	subs	r0, #1
 80005aa:	4613      	mov	r3, r2
 80005ac:	e7a4      	b.n	80004f8 <__udivmoddi4+0x1f0>
 80005ae:	4660      	mov	r0, ip
 80005b0:	e7e9      	b.n	8000586 <__udivmoddi4+0x27e>
 80005b2:	4618      	mov	r0, r3
 80005b4:	e795      	b.n	80004e2 <__udivmoddi4+0x1da>
 80005b6:	4667      	mov	r7, ip
 80005b8:	e7d1      	b.n	800055e <__udivmoddi4+0x256>
 80005ba:	4681      	mov	r9, r0
 80005bc:	e77c      	b.n	80004b8 <__udivmoddi4+0x1b0>
 80005be:	3802      	subs	r0, #2
 80005c0:	442c      	add	r4, r5
 80005c2:	e747      	b.n	8000454 <__udivmoddi4+0x14c>
 80005c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c8:	442b      	add	r3, r5
 80005ca:	e72f      	b.n	800042c <__udivmoddi4+0x124>
 80005cc:	4638      	mov	r0, r7
 80005ce:	e708      	b.n	80003e2 <__udivmoddi4+0xda>
 80005d0:	4637      	mov	r7, r6
 80005d2:	e6e9      	b.n	80003a8 <__udivmoddi4+0xa0>

080005d4 <__aeabi_idiv0>:
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <initialize_CAN>:

#include "CAN_handler.h"


//função para inicializar a CAN
void initialize_CAN(FDCAN_HandleTypeDef* hfdcan, void (* CAN_receive_callback)(FDCAN_HandleTypeDef* hfdcan, uint32_t RxFifo0ITs), FDCAN_TxHeaderTypeDef* TxHeader) {
 80005d8:	b580      	push	{r7, lr}
 80005da:	b084      	sub	sp, #16
 80005dc:	af00      	add	r7, sp, #0
 80005de:	60f8      	str	r0, [r7, #12]
 80005e0:	60b9      	str	r1, [r7, #8]
 80005e2:	607a      	str	r2, [r7, #4]

	if (HAL_FDCAN_RegisterRxFifo0Callback(hfdcan, CAN_receive_callback) != HAL_OK) { //função para registrar a função de callback
 80005e4:	68b9      	ldr	r1, [r7, #8]
 80005e6:	68f8      	ldr	r0, [r7, #12]
 80005e8:	f001 f85c 	bl	80016a4 <HAL_FDCAN_RegisterRxFifo0Callback>
 80005ec:	4603      	mov	r3, r0
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d001      	beq.n	80005f6 <initialize_CAN+0x1e>
		/* Callback Register Error */
		Error_Handler();
 80005f2:	f000 fa9d 	bl	8000b30 <Error_Handler>
	}

	if (HAL_FDCAN_Start(hfdcan) != HAL_OK) {
 80005f6:	68f8      	ldr	r0, [r7, #12]
 80005f8:	f001 f884 	bl	8001704 <HAL_FDCAN_Start>
 80005fc:	4603      	mov	r3, r0
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d001      	beq.n	8000606 <initialize_CAN+0x2e>
		/* Start Error */
		Error_Handler();
 8000602:	f000 fa95 	bl	8000b30 <Error_Handler>
	}

	if (HAL_FDCAN_ActivateNotification(hfdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK) {
 8000606:	2200      	movs	r2, #0
 8000608:	2101      	movs	r1, #1
 800060a:	68f8      	ldr	r0, [r7, #12]
 800060c:	f001 fa04 	bl	8001a18 <HAL_FDCAN_ActivateNotification>
 8000610:	4603      	mov	r3, r0
 8000612:	2b00      	cmp	r3, #0
 8000614:	d001      	beq.n	800061a <initialize_CAN+0x42>
		/* Notification Error */
		Error_Handler();
 8000616:	f000 fa8b 	bl	8000b30 <Error_Handler>
	}

//	TxHeader.Identifier = 0x321;
	TxHeader->IdType = FDCAN_STANDARD_ID;
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	2200      	movs	r2, #0
 800061e:	605a      	str	r2, [r3, #4]
	TxHeader->TxFrameType = FDCAN_DATA_FRAME;
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	2200      	movs	r2, #0
 8000624:	609a      	str	r2, [r3, #8]
	TxHeader->DataLength = FDCAN_DLC_BYTES_8;
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800062c:	60da      	str	r2, [r3, #12]
	TxHeader->ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	2200      	movs	r2, #0
 8000632:	611a      	str	r2, [r3, #16]
	TxHeader->BitRateSwitch = FDCAN_BRS_OFF;
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	2200      	movs	r2, #0
 8000638:	615a      	str	r2, [r3, #20]
	TxHeader->FDFormat = FDCAN_CLASSIC_CAN;
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	2200      	movs	r2, #0
 800063e:	619a      	str	r2, [r3, #24]
	TxHeader->TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	2200      	movs	r2, #0
 8000644:	61da      	str	r2, [r3, #28]
	TxHeader->MessageMarker = 0;
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	2200      	movs	r2, #0
 800064a:	621a      	str	r2, [r3, #32]
}
 800064c:	bf00      	nop
 800064e:	3710      	adds	r7, #16
 8000650:	46bd      	mov	sp, r7
 8000652:	bd80      	pop	{r7, pc}

08000654 <init_CAN>:
*/
//}

extern FDCAN_HandleTypeDef hfdcan1;

void init_CAN() {
 8000654:	b580      	push	{r7, lr}
 8000656:	af00      	add	r7, sp, #0
	  initialize_general_CAN(&hfdcan1);
 8000658:	4802      	ldr	r0, [pc, #8]	; (8000664 <init_CAN+0x10>)
 800065a:	f000 f805 	bl	8000668 <initialize_general_CAN>
	  //initialize_CAN_IDs();
}
 800065e:	bf00      	nop
 8000660:	bd80      	pop	{r7, pc}
 8000662:	bf00      	nop
 8000664:	24000090 	.word	0x24000090

08000668 <initialize_general_CAN>:
uint32_t idgeneral;



//função que inicializa a can geral, chamada em initializer.c
void initialize_general_CAN(FDCAN_HandleTypeDef* can_ref) {
 8000668:	b580      	push	{r7, lr}
 800066a:	b082      	sub	sp, #8
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
	can_ptr = can_ref;
 8000670:	4a06      	ldr	r2, [pc, #24]	; (800068c <initialize_general_CAN+0x24>)
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	6013      	str	r3, [r2, #0]
	void CAN_general_receive_callback(FDCAN_HandleTypeDef*, uint32_t);
	initialize_CAN(can_ptr, CAN_general_receive_callback, &TxHeader);
 8000676:	4b05      	ldr	r3, [pc, #20]	; (800068c <initialize_general_CAN+0x24>)
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	4a05      	ldr	r2, [pc, #20]	; (8000690 <initialize_general_CAN+0x28>)
 800067c:	4905      	ldr	r1, [pc, #20]	; (8000694 <initialize_general_CAN+0x2c>)
 800067e:	4618      	mov	r0, r3
 8000680:	f7ff ffaa 	bl	80005d8 <initialize_CAN>
}
 8000684:	bf00      	nop
 8000686:	3708      	adds	r7, #8
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}
 800068c:	2400002c 	.word	0x2400002c
 8000690:	24000030 	.word	0x24000030
 8000694:	08000699 	.word	0x08000699

08000698 <CAN_general_receive_callback>:
}



//função de callback, chamada quando chega qualquer mensagem, de qualquer ID
void CAN_general_receive_callback(FDCAN_HandleTypeDef* hfdcan, uint32_t RxFifo0ITs)  {
 8000698:	b580      	push	{r7, lr}
 800069a:	b084      	sub	sp, #16
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
 80006a0:	6039      	str	r1, [r7, #0]
	if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET) {
 80006a2:	683b      	ldr	r3, [r7, #0]
 80006a4:	f003 0301 	and.w	r3, r3, #1
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d03e      	beq.n	800072a <CAN_general_receive_callback+0x92>
		GPIOD->ODR &= ~ (1<<6); //reseta o pino PD6
 80006ac:	4b21      	ldr	r3, [pc, #132]	; (8000734 <CAN_general_receive_callback+0x9c>)
 80006ae:	695b      	ldr	r3, [r3, #20]
 80006b0:	4a20      	ldr	r2, [pc, #128]	; (8000734 <CAN_general_receive_callback+0x9c>)
 80006b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80006b6:	6153      	str	r3, [r2, #20]
		if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK) {
 80006b8:	4b1f      	ldr	r3, [pc, #124]	; (8000738 <CAN_general_receive_callback+0xa0>)
 80006ba:	4a20      	ldr	r2, [pc, #128]	; (800073c <CAN_general_receive_callback+0xa4>)
 80006bc:	2140      	movs	r1, #64	; 0x40
 80006be:	6878      	ldr	r0, [r7, #4]
 80006c0:	f001 f84c 	bl	800175c <HAL_FDCAN_GetRxMessage>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d001      	beq.n	80006ce <CAN_general_receive_callback+0x36>
			/* Reception Error */
			Error_Handler();
 80006ca:	f000 fa31 	bl	8000b30 <Error_Handler>

		//TESTAR HABILITAR SÓ UMA DAS INTERRUPÇÕES NO .IOC

		//TENTAR SETAR A LED APAGADA ANTES DA MAIN, USANDO REGISTRADOR E A LÓGICA INVERTIDA DO CÓDIGO DO LAB 2 DE EMBUTIDOS

		idgeneral = RxHeader.Identifier;
 80006ce:	4b1b      	ldr	r3, [pc, #108]	; (800073c <CAN_general_receive_callback+0xa4>)
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	4a1b      	ldr	r2, [pc, #108]	; (8000740 <CAN_general_receive_callback+0xa8>)
 80006d4:	6013      	str	r3, [r2, #0]
		for(int i = 0; i < 8; i += 2){
 80006d6:	2300      	movs	r3, #0
 80006d8:	60fb      	str	r3, [r7, #12]
 80006da:	e019      	b.n	8000710 <CAN_general_receive_callback+0x78>
			datageneral[i/2] = (RxData[i+1] << 8) | RxData[i];
 80006dc:	68fb      	ldr	r3, [r7, #12]
 80006de:	3301      	adds	r3, #1
 80006e0:	4a15      	ldr	r2, [pc, #84]	; (8000738 <CAN_general_receive_callback+0xa0>)
 80006e2:	5cd3      	ldrb	r3, [r2, r3]
 80006e4:	021b      	lsls	r3, r3, #8
 80006e6:	b219      	sxth	r1, r3
 80006e8:	4a13      	ldr	r2, [pc, #76]	; (8000738 <CAN_general_receive_callback+0xa0>)
 80006ea:	68fb      	ldr	r3, [r7, #12]
 80006ec:	4413      	add	r3, r2
 80006ee:	781b      	ldrb	r3, [r3, #0]
 80006f0:	b21a      	sxth	r2, r3
 80006f2:	68fb      	ldr	r3, [r7, #12]
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	da00      	bge.n	80006fa <CAN_general_receive_callback+0x62>
 80006f8:	3301      	adds	r3, #1
 80006fa:	105b      	asrs	r3, r3, #1
 80006fc:	4618      	mov	r0, r3
 80006fe:	ea41 0302 	orr.w	r3, r1, r2
 8000702:	b21a      	sxth	r2, r3
 8000704:	4b0f      	ldr	r3, [pc, #60]	; (8000744 <CAN_general_receive_callback+0xac>)
 8000706:	f823 2010 	strh.w	r2, [r3, r0, lsl #1]
		for(int i = 0; i < 8; i += 2){
 800070a:	68fb      	ldr	r3, [r7, #12]
 800070c:	3302      	adds	r3, #2
 800070e:	60fb      	str	r3, [r7, #12]
 8000710:	68fb      	ldr	r3, [r7, #12]
 8000712:	2b07      	cmp	r3, #7
 8000714:	dde2      	ble.n	80006dc <CAN_general_receive_callback+0x44>
		}
		//TODO: implementar lógica de colocar as mensagens nas variáveis certas

		if (HAL_FDCAN_ActivateNotification(hfdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK) {
 8000716:	2200      	movs	r2, #0
 8000718:	2101      	movs	r1, #1
 800071a:	6878      	ldr	r0, [r7, #4]
 800071c:	f001 f97c 	bl	8001a18 <HAL_FDCAN_ActivateNotification>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <CAN_general_receive_callback+0x92>
			/* Notification Error */
			Error_Handler();
 8000726:	f000 fa03 	bl	8000b30 <Error_Handler>
		}
	}
}
 800072a:	bf00      	nop
 800072c:	3710      	adds	r7, #16
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	58020c00 	.word	0x58020c00
 8000738:	24000060 	.word	0x24000060
 800073c:	24000068 	.word	0x24000068
 8000740:	24000054 	.word	0x24000054
 8000744:	24000058 	.word	0x24000058

08000748 <LED>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
//o reset vai acender e o set vai apagar, por conta da lógica eletrônica (ver easyeda)
void LED (uint32_t c)
{
 8000748:	b480      	push	{r7}
 800074a:	b083      	sub	sp, #12
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
	if(c == 1)
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	2b01      	cmp	r3, #1
 8000754:	d105      	bne.n	8000762 <LED+0x1a>
		GPIOD->ODR &= ~ (1<<6); //reseta o pino PD6
 8000756:	4b0a      	ldr	r3, [pc, #40]	; (8000780 <LED+0x38>)
 8000758:	695b      	ldr	r3, [r3, #20]
 800075a:	4a09      	ldr	r2, [pc, #36]	; (8000780 <LED+0x38>)
 800075c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000760:	6153      	str	r3, [r2, #20]
	if(c == 0)
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	2b00      	cmp	r3, #0
 8000766:	d105      	bne.n	8000774 <LED+0x2c>
		GPIOD->ODR |= (1<<6); //seta o pino PD6
 8000768:	4b05      	ldr	r3, [pc, #20]	; (8000780 <LED+0x38>)
 800076a:	695b      	ldr	r3, [r3, #20]
 800076c:	4a04      	ldr	r2, [pc, #16]	; (8000780 <LED+0x38>)
 800076e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000772:	6153      	str	r3, [r2, #20]
}
 8000774:	bf00      	nop
 8000776:	370c      	adds	r7, #12
 8000778:	46bd      	mov	sp, r7
 800077a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077e:	4770      	bx	lr
 8000780:	58020c00 	.word	0x58020c00

08000784 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000788:	f000 fb88 	bl	8000e9c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800078c:	f000 f834 	bl	80007f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000790:	f000 f996 	bl	8000ac0 <MX_GPIO_Init>
  MX_FDCAN1_Init();
 8000794:	f000 f8e4 	bl	8000960 <MX_FDCAN1_Init>
  MX_UART4_Init();
 8000798:	f000 f946 	bl	8000a28 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */
  RCC->AHB4ENR |= (1<<3); //habilita o clock do GPIO
 800079c:	4b14      	ldr	r3, [pc, #80]	; (80007f0 <main+0x6c>)
 800079e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007a2:	4a13      	ldr	r2, [pc, #76]	; (80007f0 <main+0x6c>)
 80007a4:	f043 0308 	orr.w	r3, r3, #8
 80007a8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  GPIOD->MODER = (GPIOD->MODER & 0xFFFFDFFF); //seta o pino GPIOD6 como output
 80007ac:	4b11      	ldr	r3, [pc, #68]	; (80007f4 <main+0x70>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	4a10      	ldr	r2, [pc, #64]	; (80007f4 <main+0x70>)
 80007b2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80007b6:	6013      	str	r3, [r2, #0]
  GPIOD->OTYPER &= ~(0<<6); //configura o pino GPIOD6 como output push-pull
 80007b8:	4b0e      	ldr	r3, [pc, #56]	; (80007f4 <main+0x70>)
 80007ba:	4a0e      	ldr	r2, [pc, #56]	; (80007f4 <main+0x70>)
 80007bc:	685b      	ldr	r3, [r3, #4]
 80007be:	6053      	str	r3, [r2, #4]
  GPIOD->OSPEEDR |= (1<<13); //configura a velocidade do pino GPIOD6como high speed
 80007c0:	4b0c      	ldr	r3, [pc, #48]	; (80007f4 <main+0x70>)
 80007c2:	689b      	ldr	r3, [r3, #8]
 80007c4:	4a0b      	ldr	r2, [pc, #44]	; (80007f4 <main+0x70>)
 80007c6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80007ca:	6093      	str	r3, [r2, #8]
  GPIOD->PUPDR &= ~((1<<13) | (1<<12)); //configura o pino GPIOD6 como no pull-up no pull-down
 80007cc:	4b09      	ldr	r3, [pc, #36]	; (80007f4 <main+0x70>)
 80007ce:	68db      	ldr	r3, [r3, #12]
 80007d0:	4a08      	ldr	r2, [pc, #32]	; (80007f4 <main+0x70>)
 80007d2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80007d6:	60d3      	str	r3, [r2, #12]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  LED(0);
 80007d8:	2000      	movs	r0, #0
 80007da:	f7ff ffb5 	bl	8000748 <LED>

  init_CAN();
 80007de:	f7ff ff39 	bl	8000654 <init_CAN>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  LED(0);
 80007e2:	2000      	movs	r0, #0
 80007e4:	f7ff ffb0 	bl	8000748 <LED>

  init_CAN();
 80007e8:	f7ff ff34 	bl	8000654 <init_CAN>
  /* USER CODE END 2 */



  while (1)
 80007ec:	e7fe      	b.n	80007ec <main+0x68>
 80007ee:	bf00      	nop
 80007f0:	58024400 	.word	0x58024400
 80007f4:	58020c00 	.word	0x58020c00

080007f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b0cc      	sub	sp, #304	; 0x130
 80007fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007fe:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000802:	224c      	movs	r2, #76	; 0x4c
 8000804:	2100      	movs	r1, #0
 8000806:	4618      	mov	r0, r3
 8000808:	f005 fb71 	bl	8005eee <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800080c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000810:	2220      	movs	r2, #32
 8000812:	2100      	movs	r1, #0
 8000814:	4618      	mov	r0, r3
 8000816:	f005 fb6a 	bl	8005eee <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800081a:	f107 0308 	add.w	r3, r7, #8
 800081e:	4618      	mov	r0, r3
 8000820:	23bc      	movs	r3, #188	; 0xbc
 8000822:	461a      	mov	r2, r3
 8000824:	2100      	movs	r1, #0
 8000826:	f005 fb62 	bl	8005eee <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800082a:	2002      	movs	r0, #2
 800082c:	f001 ffda 	bl	80027e4 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000830:	1d3b      	adds	r3, r7, #4
 8000832:	2200      	movs	r2, #0
 8000834:	601a      	str	r2, [r3, #0]
 8000836:	4b48      	ldr	r3, [pc, #288]	; (8000958 <SystemClock_Config+0x160>)
 8000838:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800083a:	4a47      	ldr	r2, [pc, #284]	; (8000958 <SystemClock_Config+0x160>)
 800083c:	f023 0301 	bic.w	r3, r3, #1
 8000840:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000842:	4b45      	ldr	r3, [pc, #276]	; (8000958 <SystemClock_Config+0x160>)
 8000844:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000846:	f003 0201 	and.w	r2, r3, #1
 800084a:	1d3b      	adds	r3, r7, #4
 800084c:	601a      	str	r2, [r3, #0]
 800084e:	4b43      	ldr	r3, [pc, #268]	; (800095c <SystemClock_Config+0x164>)
 8000850:	699b      	ldr	r3, [r3, #24]
 8000852:	4a42      	ldr	r2, [pc, #264]	; (800095c <SystemClock_Config+0x164>)
 8000854:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000858:	6193      	str	r3, [r2, #24]
 800085a:	4b40      	ldr	r3, [pc, #256]	; (800095c <SystemClock_Config+0x164>)
 800085c:	699b      	ldr	r3, [r3, #24]
 800085e:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 8000862:	1d3b      	adds	r3, r7, #4
 8000864:	601a      	str	r2, [r3, #0]
 8000866:	1d3b      	adds	r3, r7, #4
 8000868:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800086a:	bf00      	nop
 800086c:	4b3b      	ldr	r3, [pc, #236]	; (800095c <SystemClock_Config+0x164>)
 800086e:	699b      	ldr	r3, [r3, #24]
 8000870:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000874:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000878:	d1f8      	bne.n	800086c <SystemClock_Config+0x74>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800087a:	2301      	movs	r3, #1
 800087c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000880:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000884:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000888:	2302      	movs	r3, #2
 800088a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800088e:	2302      	movs	r3, #2
 8000890:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000894:	2301      	movs	r3, #1
 8000896:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 100;
 800089a:	2364      	movs	r3, #100	; 0x64
 800089c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 80008a0:	2302      	movs	r3, #2
 80008a2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80008a6:	2304      	movs	r3, #4
 80008a8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80008ac:	2302      	movs	r3, #2
 80008ae:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80008b2:	230c      	movs	r3, #12
 80008b4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80008b8:	2300      	movs	r3, #0
 80008ba:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80008be:	2300      	movs	r3, #0
 80008c0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008c4:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80008c8:	4618      	mov	r0, r3
 80008ca:	f001 ffc5 	bl	8002858 <HAL_RCC_OscConfig>
 80008ce:	4603      	mov	r3, r0
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d001      	beq.n	80008d8 <SystemClock_Config+0xe0>
  {
    Error_Handler();
 80008d4:	f000 f92c 	bl	8000b30 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008d8:	233f      	movs	r3, #63	; 0x3f
 80008da:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008de:	2303      	movs	r3, #3
 80008e0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80008e4:	2300      	movs	r3, #0
 80008e6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80008ea:	2308      	movs	r3, #8
 80008ec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80008f0:	2340      	movs	r3, #64	; 0x40
 80008f2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80008f6:	2340      	movs	r3, #64	; 0x40
 80008f8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80008fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000900:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000904:	2340      	movs	r3, #64	; 0x40
 8000906:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800090a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800090e:	2102      	movs	r1, #2
 8000910:	4618      	mov	r0, r3
 8000912:	f002 fbb1 	bl	8003078 <HAL_RCC_ClockConfig>
 8000916:	4603      	mov	r3, r0
 8000918:	2b00      	cmp	r3, #0
 800091a:	d001      	beq.n	8000920 <SystemClock_Config+0x128>
  {
    Error_Handler();
 800091c:	f000 f908 	bl	8000b30 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4|RCC_PERIPHCLK_FDCAN;
 8000920:	f107 0308 	add.w	r3, r7, #8
 8000924:	f248 0202 	movw	r2, #32770	; 0x8002
 8000928:	601a      	str	r2, [r3, #0]
  PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 800092a:	f107 0308 	add.w	r3, r7, #8
 800092e:	2200      	movs	r2, #0
 8000930:	66da      	str	r2, [r3, #108]	; 0x6c
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000932:	f107 0308 	add.w	r3, r7, #8
 8000936:	2200      	movs	r2, #0
 8000938:	675a      	str	r2, [r3, #116]	; 0x74
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800093a:	f107 0308 	add.w	r3, r7, #8
 800093e:	4618      	mov	r0, r3
 8000940:	f002 ff1e 	bl	8003780 <HAL_RCCEx_PeriphCLKConfig>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	d001      	beq.n	800094e <SystemClock_Config+0x156>
  {
    Error_Handler();
 800094a:	f000 f8f1 	bl	8000b30 <Error_Handler>
  }
}
 800094e:	bf00      	nop
 8000950:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}
 8000958:	58000400 	.word	0x58000400
 800095c:	58024800 	.word	0x58024800

08000960 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000964:	4b2e      	ldr	r3, [pc, #184]	; (8000a20 <MX_FDCAN1_Init+0xc0>)
 8000966:	4a2f      	ldr	r2, [pc, #188]	; (8000a24 <MX_FDCAN1_Init+0xc4>)
 8000968:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 800096a:	4b2d      	ldr	r3, [pc, #180]	; (8000a20 <MX_FDCAN1_Init+0xc0>)
 800096c:	2200      	movs	r2, #0
 800096e:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000970:	4b2b      	ldr	r3, [pc, #172]	; (8000a20 <MX_FDCAN1_Init+0xc0>)
 8000972:	2200      	movs	r2, #0
 8000974:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000976:	4b2a      	ldr	r3, [pc, #168]	; (8000a20 <MX_FDCAN1_Init+0xc0>)
 8000978:	2200      	movs	r2, #0
 800097a:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 800097c:	4b28      	ldr	r3, [pc, #160]	; (8000a20 <MX_FDCAN1_Init+0xc0>)
 800097e:	2200      	movs	r2, #0
 8000980:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000982:	4b27      	ldr	r3, [pc, #156]	; (8000a20 <MX_FDCAN1_Init+0xc0>)
 8000984:	2200      	movs	r2, #0
 8000986:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 8000988:	4b25      	ldr	r3, [pc, #148]	; (8000a20 <MX_FDCAN1_Init+0xc0>)
 800098a:	2201      	movs	r2, #1
 800098c:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 2;
 800098e:	4b24      	ldr	r3, [pc, #144]	; (8000a20 <MX_FDCAN1_Init+0xc0>)
 8000990:	2202      	movs	r2, #2
 8000992:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 13;
 8000994:	4b22      	ldr	r3, [pc, #136]	; (8000a20 <MX_FDCAN1_Init+0xc0>)
 8000996:	220d      	movs	r2, #13
 8000998:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 800099a:	4b21      	ldr	r3, [pc, #132]	; (8000a20 <MX_FDCAN1_Init+0xc0>)
 800099c:	2202      	movs	r2, #2
 800099e:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 80009a0:	4b1f      	ldr	r3, [pc, #124]	; (8000a20 <MX_FDCAN1_Init+0xc0>)
 80009a2:	2201      	movs	r2, #1
 80009a4:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 2;
 80009a6:	4b1e      	ldr	r3, [pc, #120]	; (8000a20 <MX_FDCAN1_Init+0xc0>)
 80009a8:	2202      	movs	r2, #2
 80009aa:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 13;
 80009ac:	4b1c      	ldr	r3, [pc, #112]	; (8000a20 <MX_FDCAN1_Init+0xc0>)
 80009ae:	220d      	movs	r2, #13
 80009b0:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 2;
 80009b2:	4b1b      	ldr	r3, [pc, #108]	; (8000a20 <MX_FDCAN1_Init+0xc0>)
 80009b4:	2202      	movs	r2, #2
 80009b6:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 80009b8:	4b19      	ldr	r3, [pc, #100]	; (8000a20 <MX_FDCAN1_Init+0xc0>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 80009be:	4b18      	ldr	r3, [pc, #96]	; (8000a20 <MX_FDCAN1_Init+0xc0>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 80009c4:	4b16      	ldr	r3, [pc, #88]	; (8000a20 <MX_FDCAN1_Init+0xc0>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 32;
 80009ca:	4b15      	ldr	r3, [pc, #84]	; (8000a20 <MX_FDCAN1_Init+0xc0>)
 80009cc:	2220      	movs	r2, #32
 80009ce:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 80009d0:	4b13      	ldr	r3, [pc, #76]	; (8000a20 <MX_FDCAN1_Init+0xc0>)
 80009d2:	2204      	movs	r2, #4
 80009d4:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 32;
 80009d6:	4b12      	ldr	r3, [pc, #72]	; (8000a20 <MX_FDCAN1_Init+0xc0>)
 80009d8:	2220      	movs	r2, #32
 80009da:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 80009dc:	4b10      	ldr	r3, [pc, #64]	; (8000a20 <MX_FDCAN1_Init+0xc0>)
 80009de:	2204      	movs	r2, #4
 80009e0:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 32;
 80009e2:	4b0f      	ldr	r3, [pc, #60]	; (8000a20 <MX_FDCAN1_Init+0xc0>)
 80009e4:	2220      	movs	r2, #32
 80009e6:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 80009e8:	4b0d      	ldr	r3, [pc, #52]	; (8000a20 <MX_FDCAN1_Init+0xc0>)
 80009ea:	2204      	movs	r2, #4
 80009ec:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 32;
 80009ee:	4b0c      	ldr	r3, [pc, #48]	; (8000a20 <MX_FDCAN1_Init+0xc0>)
 80009f0:	2220      	movs	r2, #32
 80009f2:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 32;
 80009f4:	4b0a      	ldr	r3, [pc, #40]	; (8000a20 <MX_FDCAN1_Init+0xc0>)
 80009f6:	2220      	movs	r2, #32
 80009f8:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 32;
 80009fa:	4b09      	ldr	r3, [pc, #36]	; (8000a20 <MX_FDCAN1_Init+0xc0>)
 80009fc:	2220      	movs	r2, #32
 80009fe:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000a00:	4b07      	ldr	r3, [pc, #28]	; (8000a20 <MX_FDCAN1_Init+0xc0>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000a06:	4b06      	ldr	r3, [pc, #24]	; (8000a20 <MX_FDCAN1_Init+0xc0>)
 8000a08:	2204      	movs	r2, #4
 8000a0a:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000a0c:	4804      	ldr	r0, [pc, #16]	; (8000a20 <MX_FDCAN1_Init+0xc0>)
 8000a0e:	f000 fbf3 	bl	80011f8 <HAL_FDCAN_Init>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d001      	beq.n	8000a1c <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 8000a18:	f000 f88a 	bl	8000b30 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000a1c:	bf00      	nop
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	24000090 	.word	0x24000090
 8000a24:	4000a000 	.word	0x4000a000

08000a28 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000a2c:	4b22      	ldr	r3, [pc, #136]	; (8000ab8 <MX_UART4_Init+0x90>)
 8000a2e:	4a23      	ldr	r2, [pc, #140]	; (8000abc <MX_UART4_Init+0x94>)
 8000a30:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000a32:	4b21      	ldr	r3, [pc, #132]	; (8000ab8 <MX_UART4_Init+0x90>)
 8000a34:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a38:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000a3a:	4b1f      	ldr	r3, [pc, #124]	; (8000ab8 <MX_UART4_Init+0x90>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000a40:	4b1d      	ldr	r3, [pc, #116]	; (8000ab8 <MX_UART4_Init+0x90>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000a46:	4b1c      	ldr	r3, [pc, #112]	; (8000ab8 <MX_UART4_Init+0x90>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000a4c:	4b1a      	ldr	r3, [pc, #104]	; (8000ab8 <MX_UART4_Init+0x90>)
 8000a4e:	220c      	movs	r2, #12
 8000a50:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a52:	4b19      	ldr	r3, [pc, #100]	; (8000ab8 <MX_UART4_Init+0x90>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a58:	4b17      	ldr	r3, [pc, #92]	; (8000ab8 <MX_UART4_Init+0x90>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a5e:	4b16      	ldr	r3, [pc, #88]	; (8000ab8 <MX_UART4_Init+0x90>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a64:	4b14      	ldr	r3, [pc, #80]	; (8000ab8 <MX_UART4_Init+0x90>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a6a:	4b13      	ldr	r3, [pc, #76]	; (8000ab8 <MX_UART4_Init+0x90>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000a70:	4811      	ldr	r0, [pc, #68]	; (8000ab8 <MX_UART4_Init+0x90>)
 8000a72:	f004 f985 	bl	8004d80 <HAL_UART_Init>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d001      	beq.n	8000a80 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8000a7c:	f000 f858 	bl	8000b30 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a80:	2100      	movs	r1, #0
 8000a82:	480d      	ldr	r0, [pc, #52]	; (8000ab8 <MX_UART4_Init+0x90>)
 8000a84:	f005 f91f 	bl	8005cc6 <HAL_UARTEx_SetTxFifoThreshold>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d001      	beq.n	8000a92 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8000a8e:	f000 f84f 	bl	8000b30 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a92:	2100      	movs	r1, #0
 8000a94:	4808      	ldr	r0, [pc, #32]	; (8000ab8 <MX_UART4_Init+0x90>)
 8000a96:	f005 f954 	bl	8005d42 <HAL_UARTEx_SetRxFifoThreshold>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d001      	beq.n	8000aa4 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8000aa0:	f000 f846 	bl	8000b30 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8000aa4:	4804      	ldr	r0, [pc, #16]	; (8000ab8 <MX_UART4_Init+0x90>)
 8000aa6:	f005 f8d5 	bl	8005c54 <HAL_UARTEx_DisableFifoMode>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d001      	beq.n	8000ab4 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8000ab0:	f000 f83e 	bl	8000b30 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000ab4:	bf00      	nop
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	24000184 	.word	0x24000184
 8000abc:	40004c00 	.word	0x40004c00

08000ac0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	b085      	sub	sp, #20
 8000ac4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ac6:	4b19      	ldr	r3, [pc, #100]	; (8000b2c <MX_GPIO_Init+0x6c>)
 8000ac8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000acc:	4a17      	ldr	r2, [pc, #92]	; (8000b2c <MX_GPIO_Init+0x6c>)
 8000ace:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ad2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ad6:	4b15      	ldr	r3, [pc, #84]	; (8000b2c <MX_GPIO_Init+0x6c>)
 8000ad8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000adc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ae0:	60fb      	str	r3, [r7, #12]
 8000ae2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ae4:	4b11      	ldr	r3, [pc, #68]	; (8000b2c <MX_GPIO_Init+0x6c>)
 8000ae6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aea:	4a10      	ldr	r2, [pc, #64]	; (8000b2c <MX_GPIO_Init+0x6c>)
 8000aec:	f043 0301 	orr.w	r3, r3, #1
 8000af0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000af4:	4b0d      	ldr	r3, [pc, #52]	; (8000b2c <MX_GPIO_Init+0x6c>)
 8000af6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000afa:	f003 0301 	and.w	r3, r3, #1
 8000afe:	60bb      	str	r3, [r7, #8]
 8000b00:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b02:	4b0a      	ldr	r3, [pc, #40]	; (8000b2c <MX_GPIO_Init+0x6c>)
 8000b04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b08:	4a08      	ldr	r2, [pc, #32]	; (8000b2c <MX_GPIO_Init+0x6c>)
 8000b0a:	f043 0302 	orr.w	r3, r3, #2
 8000b0e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b12:	4b06      	ldr	r3, [pc, #24]	; (8000b2c <MX_GPIO_Init+0x6c>)
 8000b14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b18:	f003 0302 	and.w	r3, r3, #2
 8000b1c:	607b      	str	r3, [r7, #4]
 8000b1e:	687b      	ldr	r3, [r7, #4]

}
 8000b20:	bf00      	nop
 8000b22:	3714      	adds	r7, #20
 8000b24:	46bd      	mov	sp, r7
 8000b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2a:	4770      	bx	lr
 8000b2c:	58024400 	.word	0x58024400

08000b30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b30:	b480      	push	{r7}
 8000b32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b34:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b36:	e7fe      	b.n	8000b36 <Error_Handler+0x6>

08000b38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	b083      	sub	sp, #12
 8000b3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b3e:	4b0a      	ldr	r3, [pc, #40]	; (8000b68 <HAL_MspInit+0x30>)
 8000b40:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000b44:	4a08      	ldr	r2, [pc, #32]	; (8000b68 <HAL_MspInit+0x30>)
 8000b46:	f043 0302 	orr.w	r3, r3, #2
 8000b4a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000b4e:	4b06      	ldr	r3, [pc, #24]	; (8000b68 <HAL_MspInit+0x30>)
 8000b50:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000b54:	f003 0302 	and.w	r3, r3, #2
 8000b58:	607b      	str	r3, [r7, #4]
 8000b5a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b5c:	bf00      	nop
 8000b5e:	370c      	adds	r7, #12
 8000b60:	46bd      	mov	sp, r7
 8000b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b66:	4770      	bx	lr
 8000b68:	58024400 	.word	0x58024400

08000b6c <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b08a      	sub	sp, #40	; 0x28
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b74:	f107 0314 	add.w	r3, r7, #20
 8000b78:	2200      	movs	r2, #0
 8000b7a:	601a      	str	r2, [r3, #0]
 8000b7c:	605a      	str	r2, [r3, #4]
 8000b7e:	609a      	str	r2, [r3, #8]
 8000b80:	60da      	str	r2, [r3, #12]
 8000b82:	611a      	str	r2, [r3, #16]
  if(hfdcan->Instance==FDCAN1)
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	4a22      	ldr	r2, [pc, #136]	; (8000c14 <HAL_FDCAN_MspInit+0xa8>)
 8000b8a:	4293      	cmp	r3, r2
 8000b8c:	d13e      	bne.n	8000c0c <HAL_FDCAN_MspInit+0xa0>
  {
  /* USER CODE BEGIN FDCAN1_MspInit 0 */

  /* USER CODE END FDCAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000b8e:	4b22      	ldr	r3, [pc, #136]	; (8000c18 <HAL_FDCAN_MspInit+0xac>)
 8000b90:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8000b94:	4a20      	ldr	r2, [pc, #128]	; (8000c18 <HAL_FDCAN_MspInit+0xac>)
 8000b96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b9a:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8000b9e:	4b1e      	ldr	r3, [pc, #120]	; (8000c18 <HAL_FDCAN_MspInit+0xac>)
 8000ba0:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8000ba4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ba8:	613b      	str	r3, [r7, #16]
 8000baa:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bac:	4b1a      	ldr	r3, [pc, #104]	; (8000c18 <HAL_FDCAN_MspInit+0xac>)
 8000bae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bb2:	4a19      	ldr	r2, [pc, #100]	; (8000c18 <HAL_FDCAN_MspInit+0xac>)
 8000bb4:	f043 0302 	orr.w	r3, r3, #2
 8000bb8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bbc:	4b16      	ldr	r3, [pc, #88]	; (8000c18 <HAL_FDCAN_MspInit+0xac>)
 8000bbe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bc2:	f003 0302 	and.w	r3, r3, #2
 8000bc6:	60fb      	str	r3, [r7, #12]
 8000bc8:	68fb      	ldr	r3, [r7, #12]
    /**FDCAN1 GPIO Configuration
    PB8     ------> FDCAN1_RX
    PB9     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000bca:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000bce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd0:	2302      	movs	r3, #2
 8000bd2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000bdc:	2309      	movs	r3, #9
 8000bde:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000be0:	f107 0314 	add.w	r3, r7, #20
 8000be4:	4619      	mov	r1, r3
 8000be6:	480d      	ldr	r0, [pc, #52]	; (8000c1c <HAL_FDCAN_MspInit+0xb0>)
 8000be8:	f001 fc4c 	bl	8002484 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8000bec:	2200      	movs	r2, #0
 8000bee:	2100      	movs	r1, #0
 8000bf0:	2013      	movs	r0, #19
 8000bf2:	f000 facc 	bl	800118e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8000bf6:	2013      	movs	r0, #19
 8000bf8:	f000 fae3 	bl	80011c2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN1_IT1_IRQn, 0, 0);
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	2100      	movs	r1, #0
 8000c00:	2015      	movs	r0, #21
 8000c02:	f000 fac4 	bl	800118e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
 8000c06:	2015      	movs	r0, #21
 8000c08:	f000 fadb 	bl	80011c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 8000c0c:	bf00      	nop
 8000c0e:	3728      	adds	r7, #40	; 0x28
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}
 8000c14:	4000a000 	.word	0x4000a000
 8000c18:	58024400 	.word	0x58024400
 8000c1c:	58020400 	.word	0x58020400

08000c20 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b08a      	sub	sp, #40	; 0x28
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c28:	f107 0314 	add.w	r3, r7, #20
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	601a      	str	r2, [r3, #0]
 8000c30:	605a      	str	r2, [r3, #4]
 8000c32:	609a      	str	r2, [r3, #8]
 8000c34:	60da      	str	r2, [r3, #12]
 8000c36:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	4a1a      	ldr	r2, [pc, #104]	; (8000ca8 <HAL_UART_MspInit+0x88>)
 8000c3e:	4293      	cmp	r3, r2
 8000c40:	d12d      	bne.n	8000c9e <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000c42:	4b1a      	ldr	r3, [pc, #104]	; (8000cac <HAL_UART_MspInit+0x8c>)
 8000c44:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c48:	4a18      	ldr	r2, [pc, #96]	; (8000cac <HAL_UART_MspInit+0x8c>)
 8000c4a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000c4e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000c52:	4b16      	ldr	r3, [pc, #88]	; (8000cac <HAL_UART_MspInit+0x8c>)
 8000c54:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c58:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000c5c:	613b      	str	r3, [r7, #16]
 8000c5e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c60:	4b12      	ldr	r3, [pc, #72]	; (8000cac <HAL_UART_MspInit+0x8c>)
 8000c62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c66:	4a11      	ldr	r2, [pc, #68]	; (8000cac <HAL_UART_MspInit+0x8c>)
 8000c68:	f043 0301 	orr.w	r3, r3, #1
 8000c6c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c70:	4b0e      	ldr	r3, [pc, #56]	; (8000cac <HAL_UART_MspInit+0x8c>)
 8000c72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c76:	f003 0301 	and.w	r3, r3, #1
 8000c7a:	60fb      	str	r3, [r7, #12]
 8000c7c:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000c7e:	2303      	movs	r3, #3
 8000c80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c82:	2302      	movs	r3, #2
 8000c84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c86:	2300      	movs	r3, #0
 8000c88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000c8e:	2308      	movs	r3, #8
 8000c90:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c92:	f107 0314 	add.w	r3, r7, #20
 8000c96:	4619      	mov	r1, r3
 8000c98:	4805      	ldr	r0, [pc, #20]	; (8000cb0 <HAL_UART_MspInit+0x90>)
 8000c9a:	f001 fbf3 	bl	8002484 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 8000c9e:	bf00      	nop
 8000ca0:	3728      	adds	r7, #40	; 0x28
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	40004c00 	.word	0x40004c00
 8000cac:	58024400 	.word	0x58024400
 8000cb0:	58020000 	.word	0x58020000

08000cb4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cb8:	e7fe      	b.n	8000cb8 <NMI_Handler+0x4>

08000cba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cba:	b480      	push	{r7}
 8000cbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cbe:	e7fe      	b.n	8000cbe <HardFault_Handler+0x4>

08000cc0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cc4:	e7fe      	b.n	8000cc4 <MemManage_Handler+0x4>

08000cc6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cc6:	b480      	push	{r7}
 8000cc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cca:	e7fe      	b.n	8000cca <BusFault_Handler+0x4>

08000ccc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cd0:	e7fe      	b.n	8000cd0 <UsageFault_Handler+0x4>

08000cd2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cd2:	b480      	push	{r7}
 8000cd4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cd6:	bf00      	nop
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cde:	4770      	bx	lr

08000ce0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ce4:	bf00      	nop
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cec:	4770      	bx	lr

08000cee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cee:	b480      	push	{r7}
 8000cf0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cf2:	bf00      	nop
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfa:	4770      	bx	lr

08000cfc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d00:	f000 f93e 	bl	8000f80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d04:	bf00      	nop
 8000d06:	bd80      	pop	{r7, pc}

08000d08 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8000d0c:	4802      	ldr	r0, [pc, #8]	; (8000d18 <FDCAN1_IT0_IRQHandler+0x10>)
 8000d0e:	f000 fefd 	bl	8001b0c <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8000d12:	bf00      	nop
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	24000090 	.word	0x24000090

08000d1c <FDCAN1_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 1.
  */
void FDCAN1_IT1_IRQHandler(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 0 */

  /* USER CODE END FDCAN1_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8000d20:	4802      	ldr	r0, [pc, #8]	; (8000d2c <FDCAN1_IT1_IRQHandler+0x10>)
 8000d22:	f000 fef3 	bl	8001b0c <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 1 */

  /* USER CODE END FDCAN1_IT1_IRQn 1 */
}
 8000d26:	bf00      	nop
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	24000090 	.word	0x24000090

08000d30 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000d34:	4b39      	ldr	r3, [pc, #228]	; (8000e1c <SystemInit+0xec>)
 8000d36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d3a:	4a38      	ldr	r2, [pc, #224]	; (8000e1c <SystemInit+0xec>)
 8000d3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d40:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000d44:	4b36      	ldr	r3, [pc, #216]	; (8000e20 <SystemInit+0xf0>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	f003 030f 	and.w	r3, r3, #15
 8000d4c:	2b06      	cmp	r3, #6
 8000d4e:	d807      	bhi.n	8000d60 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000d50:	4b33      	ldr	r3, [pc, #204]	; (8000e20 <SystemInit+0xf0>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	f023 030f 	bic.w	r3, r3, #15
 8000d58:	4a31      	ldr	r2, [pc, #196]	; (8000e20 <SystemInit+0xf0>)
 8000d5a:	f043 0307 	orr.w	r3, r3, #7
 8000d5e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000d60:	4b30      	ldr	r3, [pc, #192]	; (8000e24 <SystemInit+0xf4>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	4a2f      	ldr	r2, [pc, #188]	; (8000e24 <SystemInit+0xf4>)
 8000d66:	f043 0301 	orr.w	r3, r3, #1
 8000d6a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000d6c:	4b2d      	ldr	r3, [pc, #180]	; (8000e24 <SystemInit+0xf4>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000d72:	4b2c      	ldr	r3, [pc, #176]	; (8000e24 <SystemInit+0xf4>)
 8000d74:	681a      	ldr	r2, [r3, #0]
 8000d76:	492b      	ldr	r1, [pc, #172]	; (8000e24 <SystemInit+0xf4>)
 8000d78:	4b2b      	ldr	r3, [pc, #172]	; (8000e28 <SystemInit+0xf8>)
 8000d7a:	4013      	ands	r3, r2
 8000d7c:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000d7e:	4b28      	ldr	r3, [pc, #160]	; (8000e20 <SystemInit+0xf0>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	f003 030f 	and.w	r3, r3, #15
 8000d86:	2b07      	cmp	r3, #7
 8000d88:	d907      	bls.n	8000d9a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000d8a:	4b25      	ldr	r3, [pc, #148]	; (8000e20 <SystemInit+0xf0>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	f023 030f 	bic.w	r3, r3, #15
 8000d92:	4a23      	ldr	r2, [pc, #140]	; (8000e20 <SystemInit+0xf0>)
 8000d94:	f043 0307 	orr.w	r3, r3, #7
 8000d98:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000d9a:	4b22      	ldr	r3, [pc, #136]	; (8000e24 <SystemInit+0xf4>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000da0:	4b20      	ldr	r3, [pc, #128]	; (8000e24 <SystemInit+0xf4>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000da6:	4b1f      	ldr	r3, [pc, #124]	; (8000e24 <SystemInit+0xf4>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000dac:	4b1d      	ldr	r3, [pc, #116]	; (8000e24 <SystemInit+0xf4>)
 8000dae:	4a1f      	ldr	r2, [pc, #124]	; (8000e2c <SystemInit+0xfc>)
 8000db0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000db2:	4b1c      	ldr	r3, [pc, #112]	; (8000e24 <SystemInit+0xf4>)
 8000db4:	4a1e      	ldr	r2, [pc, #120]	; (8000e30 <SystemInit+0x100>)
 8000db6:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000db8:	4b1a      	ldr	r3, [pc, #104]	; (8000e24 <SystemInit+0xf4>)
 8000dba:	4a1e      	ldr	r2, [pc, #120]	; (8000e34 <SystemInit+0x104>)
 8000dbc:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000dbe:	4b19      	ldr	r3, [pc, #100]	; (8000e24 <SystemInit+0xf4>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000dc4:	4b17      	ldr	r3, [pc, #92]	; (8000e24 <SystemInit+0xf4>)
 8000dc6:	4a1b      	ldr	r2, [pc, #108]	; (8000e34 <SystemInit+0x104>)
 8000dc8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000dca:	4b16      	ldr	r3, [pc, #88]	; (8000e24 <SystemInit+0xf4>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000dd0:	4b14      	ldr	r3, [pc, #80]	; (8000e24 <SystemInit+0xf4>)
 8000dd2:	4a18      	ldr	r2, [pc, #96]	; (8000e34 <SystemInit+0x104>)
 8000dd4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000dd6:	4b13      	ldr	r3, [pc, #76]	; (8000e24 <SystemInit+0xf4>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000ddc:	4b11      	ldr	r3, [pc, #68]	; (8000e24 <SystemInit+0xf4>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	4a10      	ldr	r2, [pc, #64]	; (8000e24 <SystemInit+0xf4>)
 8000de2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000de6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000de8:	4b0e      	ldr	r3, [pc, #56]	; (8000e24 <SystemInit+0xf4>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000dee:	4b12      	ldr	r3, [pc, #72]	; (8000e38 <SystemInit+0x108>)
 8000df0:	681a      	ldr	r2, [r3, #0]
 8000df2:	4b12      	ldr	r3, [pc, #72]	; (8000e3c <SystemInit+0x10c>)
 8000df4:	4013      	ands	r3, r2
 8000df6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000dfa:	d202      	bcs.n	8000e02 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000dfc:	4b10      	ldr	r3, [pc, #64]	; (8000e40 <SystemInit+0x110>)
 8000dfe:	2201      	movs	r2, #1
 8000e00:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000e02:	4b10      	ldr	r3, [pc, #64]	; (8000e44 <SystemInit+0x114>)
 8000e04:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000e08:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000e0a:	4b04      	ldr	r3, [pc, #16]	; (8000e1c <SystemInit+0xec>)
 8000e0c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000e10:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8000e12:	bf00      	nop
 8000e14:	46bd      	mov	sp, r7
 8000e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1a:	4770      	bx	lr
 8000e1c:	e000ed00 	.word	0xe000ed00
 8000e20:	52002000 	.word	0x52002000
 8000e24:	58024400 	.word	0x58024400
 8000e28:	eaf6ed7f 	.word	0xeaf6ed7f
 8000e2c:	02020200 	.word	0x02020200
 8000e30:	01ff0000 	.word	0x01ff0000
 8000e34:	01010280 	.word	0x01010280
 8000e38:	5c001000 	.word	0x5c001000
 8000e3c:	ffff0000 	.word	0xffff0000
 8000e40:	51008108 	.word	0x51008108
 8000e44:	52004000 	.word	0x52004000

08000e48 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000e48:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e80 <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000e4c:	f7ff ff70 	bl	8000d30 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000e50:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000e52:	e003      	b.n	8000e5c <LoopCopyDataInit>

08000e54 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000e54:	4b0b      	ldr	r3, [pc, #44]	; (8000e84 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 8000e56:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000e58:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000e5a:	3104      	adds	r1, #4

08000e5c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000e5c:	480a      	ldr	r0, [pc, #40]	; (8000e88 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 8000e5e:	4b0b      	ldr	r3, [pc, #44]	; (8000e8c <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 8000e60:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000e62:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000e64:	d3f6      	bcc.n	8000e54 <CopyDataInit>
  ldr  r2, =_sbss
 8000e66:	4a0a      	ldr	r2, [pc, #40]	; (8000e90 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8000e68:	e002      	b.n	8000e70 <LoopFillZerobss>

08000e6a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000e6a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000e6c:	f842 3b04 	str.w	r3, [r2], #4

08000e70 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000e70:	4b08      	ldr	r3, [pc, #32]	; (8000e94 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 8000e72:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000e74:	d3f9      	bcc.n	8000e6a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e76:	f005 f80b 	bl	8005e90 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e7a:	f7ff fc83 	bl	8000784 <main>
  bx  lr    
 8000e7e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e80:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 8000e84:	08005fbc 	.word	0x08005fbc
  ldr  r0, =_sdata
 8000e88:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 8000e8c:	24000010 	.word	0x24000010
  ldr  r2, =_sbss
 8000e90:	24000010 	.word	0x24000010
  ldr  r3, = _ebss
 8000e94:	24000214 	.word	0x24000214

08000e98 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e98:	e7fe      	b.n	8000e98 <ADC3_IRQHandler>
	...

08000e9c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b082      	sub	sp, #8
 8000ea0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ea2:	2003      	movs	r0, #3
 8000ea4:	f000 f968 	bl	8001178 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000ea8:	f002 fa9c 	bl	80033e4 <HAL_RCC_GetSysClockFreq>
 8000eac:	4601      	mov	r1, r0
 8000eae:	4b15      	ldr	r3, [pc, #84]	; (8000f04 <HAL_Init+0x68>)
 8000eb0:	699b      	ldr	r3, [r3, #24]
 8000eb2:	0a1b      	lsrs	r3, r3, #8
 8000eb4:	f003 030f 	and.w	r3, r3, #15
 8000eb8:	4a13      	ldr	r2, [pc, #76]	; (8000f08 <HAL_Init+0x6c>)
 8000eba:	5cd3      	ldrb	r3, [r2, r3]
 8000ebc:	f003 031f 	and.w	r3, r3, #31
 8000ec0:	fa21 f303 	lsr.w	r3, r1, r3
 8000ec4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000ec6:	4b0f      	ldr	r3, [pc, #60]	; (8000f04 <HAL_Init+0x68>)
 8000ec8:	699b      	ldr	r3, [r3, #24]
 8000eca:	f003 030f 	and.w	r3, r3, #15
 8000ece:	4a0e      	ldr	r2, [pc, #56]	; (8000f08 <HAL_Init+0x6c>)
 8000ed0:	5cd3      	ldrb	r3, [r2, r3]
 8000ed2:	f003 031f 	and.w	r3, r3, #31
 8000ed6:	687a      	ldr	r2, [r7, #4]
 8000ed8:	fa22 f303 	lsr.w	r3, r2, r3
 8000edc:	4a0b      	ldr	r2, [pc, #44]	; (8000f0c <HAL_Init+0x70>)
 8000ede:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000ee0:	4a0b      	ldr	r2, [pc, #44]	; (8000f10 <HAL_Init+0x74>)
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ee6:	2000      	movs	r0, #0
 8000ee8:	f000 f814 	bl	8000f14 <HAL_InitTick>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d001      	beq.n	8000ef6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	e002      	b.n	8000efc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000ef6:	f7ff fe1f 	bl	8000b38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000efa:	2300      	movs	r3, #0
}
 8000efc:	4618      	mov	r0, r3
 8000efe:	3708      	adds	r7, #8
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	58024400 	.word	0x58024400
 8000f08:	08005f74 	.word	0x08005f74
 8000f0c:	24000004 	.word	0x24000004
 8000f10:	24000000 	.word	0x24000000

08000f14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b082      	sub	sp, #8
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000f1c:	4b15      	ldr	r3, [pc, #84]	; (8000f74 <HAL_InitTick+0x60>)
 8000f1e:	781b      	ldrb	r3, [r3, #0]
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d101      	bne.n	8000f28 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000f24:	2301      	movs	r3, #1
 8000f26:	e021      	b.n	8000f6c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000f28:	4b13      	ldr	r3, [pc, #76]	; (8000f78 <HAL_InitTick+0x64>)
 8000f2a:	681a      	ldr	r2, [r3, #0]
 8000f2c:	4b11      	ldr	r3, [pc, #68]	; (8000f74 <HAL_InitTick+0x60>)
 8000f2e:	781b      	ldrb	r3, [r3, #0]
 8000f30:	4619      	mov	r1, r3
 8000f32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f36:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f000 f94d 	bl	80011de <HAL_SYSTICK_Config>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d001      	beq.n	8000f4e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	e00e      	b.n	8000f6c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	2b0f      	cmp	r3, #15
 8000f52:	d80a      	bhi.n	8000f6a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f54:	2200      	movs	r2, #0
 8000f56:	6879      	ldr	r1, [r7, #4]
 8000f58:	f04f 30ff 	mov.w	r0, #4294967295
 8000f5c:	f000 f917 	bl	800118e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f60:	4a06      	ldr	r2, [pc, #24]	; (8000f7c <HAL_InitTick+0x68>)
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f66:	2300      	movs	r3, #0
 8000f68:	e000      	b.n	8000f6c <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000f6a:	2301      	movs	r3, #1
}
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	3708      	adds	r7, #8
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	2400000c 	.word	0x2400000c
 8000f78:	24000000 	.word	0x24000000
 8000f7c:	24000008 	.word	0x24000008

08000f80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f80:	b480      	push	{r7}
 8000f82:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f84:	4b06      	ldr	r3, [pc, #24]	; (8000fa0 <HAL_IncTick+0x20>)
 8000f86:	781b      	ldrb	r3, [r3, #0]
 8000f88:	461a      	mov	r2, r3
 8000f8a:	4b06      	ldr	r3, [pc, #24]	; (8000fa4 <HAL_IncTick+0x24>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	4413      	add	r3, r2
 8000f90:	4a04      	ldr	r2, [pc, #16]	; (8000fa4 <HAL_IncTick+0x24>)
 8000f92:	6013      	str	r3, [r2, #0]
}
 8000f94:	bf00      	nop
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr
 8000f9e:	bf00      	nop
 8000fa0:	2400000c 	.word	0x2400000c
 8000fa4:	24000210 	.word	0x24000210

08000fa8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0
  return uwTick;
 8000fac:	4b03      	ldr	r3, [pc, #12]	; (8000fbc <HAL_GetTick+0x14>)
 8000fae:	681b      	ldr	r3, [r3, #0]
}
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb8:	4770      	bx	lr
 8000fba:	bf00      	nop
 8000fbc:	24000210 	.word	0x24000210

08000fc0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000fc4:	4b03      	ldr	r3, [pc, #12]	; (8000fd4 <HAL_GetREVID+0x14>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	0c1b      	lsrs	r3, r3, #16
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd2:	4770      	bx	lr
 8000fd4:	5c001000 	.word	0x5c001000

08000fd8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b085      	sub	sp, #20
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	f003 0307 	and.w	r3, r3, #7
 8000fe6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fe8:	4b0b      	ldr	r3, [pc, #44]	; (8001018 <__NVIC_SetPriorityGrouping+0x40>)
 8000fea:	68db      	ldr	r3, [r3, #12]
 8000fec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fee:	68ba      	ldr	r2, [r7, #8]
 8000ff0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ff4:	4013      	ands	r3, r2
 8000ff6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ffc:	68bb      	ldr	r3, [r7, #8]
 8000ffe:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001000:	4b06      	ldr	r3, [pc, #24]	; (800101c <__NVIC_SetPriorityGrouping+0x44>)
 8001002:	4313      	orrs	r3, r2
 8001004:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001006:	4a04      	ldr	r2, [pc, #16]	; (8001018 <__NVIC_SetPriorityGrouping+0x40>)
 8001008:	68bb      	ldr	r3, [r7, #8]
 800100a:	60d3      	str	r3, [r2, #12]
}
 800100c:	bf00      	nop
 800100e:	3714      	adds	r7, #20
 8001010:	46bd      	mov	sp, r7
 8001012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001016:	4770      	bx	lr
 8001018:	e000ed00 	.word	0xe000ed00
 800101c:	05fa0000 	.word	0x05fa0000

08001020 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001024:	4b04      	ldr	r3, [pc, #16]	; (8001038 <__NVIC_GetPriorityGrouping+0x18>)
 8001026:	68db      	ldr	r3, [r3, #12]
 8001028:	0a1b      	lsrs	r3, r3, #8
 800102a:	f003 0307 	and.w	r3, r3, #7
}
 800102e:	4618      	mov	r0, r3
 8001030:	46bd      	mov	sp, r7
 8001032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001036:	4770      	bx	lr
 8001038:	e000ed00 	.word	0xe000ed00

0800103c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800103c:	b480      	push	{r7}
 800103e:	b083      	sub	sp, #12
 8001040:	af00      	add	r7, sp, #0
 8001042:	4603      	mov	r3, r0
 8001044:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001046:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800104a:	2b00      	cmp	r3, #0
 800104c:	db0b      	blt.n	8001066 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800104e:	88fb      	ldrh	r3, [r7, #6]
 8001050:	f003 021f 	and.w	r2, r3, #31
 8001054:	4907      	ldr	r1, [pc, #28]	; (8001074 <__NVIC_EnableIRQ+0x38>)
 8001056:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800105a:	095b      	lsrs	r3, r3, #5
 800105c:	2001      	movs	r0, #1
 800105e:	fa00 f202 	lsl.w	r2, r0, r2
 8001062:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001066:	bf00      	nop
 8001068:	370c      	adds	r7, #12
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr
 8001072:	bf00      	nop
 8001074:	e000e100 	.word	0xe000e100

08001078 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001078:	b480      	push	{r7}
 800107a:	b083      	sub	sp, #12
 800107c:	af00      	add	r7, sp, #0
 800107e:	4603      	mov	r3, r0
 8001080:	6039      	str	r1, [r7, #0]
 8001082:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001084:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001088:	2b00      	cmp	r3, #0
 800108a:	db0a      	blt.n	80010a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	b2da      	uxtb	r2, r3
 8001090:	490c      	ldr	r1, [pc, #48]	; (80010c4 <__NVIC_SetPriority+0x4c>)
 8001092:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001096:	0112      	lsls	r2, r2, #4
 8001098:	b2d2      	uxtb	r2, r2
 800109a:	440b      	add	r3, r1
 800109c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010a0:	e00a      	b.n	80010b8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	b2da      	uxtb	r2, r3
 80010a6:	4908      	ldr	r1, [pc, #32]	; (80010c8 <__NVIC_SetPriority+0x50>)
 80010a8:	88fb      	ldrh	r3, [r7, #6]
 80010aa:	f003 030f 	and.w	r3, r3, #15
 80010ae:	3b04      	subs	r3, #4
 80010b0:	0112      	lsls	r2, r2, #4
 80010b2:	b2d2      	uxtb	r2, r2
 80010b4:	440b      	add	r3, r1
 80010b6:	761a      	strb	r2, [r3, #24]
}
 80010b8:	bf00      	nop
 80010ba:	370c      	adds	r7, #12
 80010bc:	46bd      	mov	sp, r7
 80010be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c2:	4770      	bx	lr
 80010c4:	e000e100 	.word	0xe000e100
 80010c8:	e000ed00 	.word	0xe000ed00

080010cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b089      	sub	sp, #36	; 0x24
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	60f8      	str	r0, [r7, #12]
 80010d4:	60b9      	str	r1, [r7, #8]
 80010d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	f003 0307 	and.w	r3, r3, #7
 80010de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010e0:	69fb      	ldr	r3, [r7, #28]
 80010e2:	f1c3 0307 	rsb	r3, r3, #7
 80010e6:	2b04      	cmp	r3, #4
 80010e8:	bf28      	it	cs
 80010ea:	2304      	movcs	r3, #4
 80010ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010ee:	69fb      	ldr	r3, [r7, #28]
 80010f0:	3304      	adds	r3, #4
 80010f2:	2b06      	cmp	r3, #6
 80010f4:	d902      	bls.n	80010fc <NVIC_EncodePriority+0x30>
 80010f6:	69fb      	ldr	r3, [r7, #28]
 80010f8:	3b03      	subs	r3, #3
 80010fa:	e000      	b.n	80010fe <NVIC_EncodePriority+0x32>
 80010fc:	2300      	movs	r3, #0
 80010fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001100:	f04f 32ff 	mov.w	r2, #4294967295
 8001104:	69bb      	ldr	r3, [r7, #24]
 8001106:	fa02 f303 	lsl.w	r3, r2, r3
 800110a:	43da      	mvns	r2, r3
 800110c:	68bb      	ldr	r3, [r7, #8]
 800110e:	401a      	ands	r2, r3
 8001110:	697b      	ldr	r3, [r7, #20]
 8001112:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001114:	f04f 31ff 	mov.w	r1, #4294967295
 8001118:	697b      	ldr	r3, [r7, #20]
 800111a:	fa01 f303 	lsl.w	r3, r1, r3
 800111e:	43d9      	mvns	r1, r3
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001124:	4313      	orrs	r3, r2
         );
}
 8001126:	4618      	mov	r0, r3
 8001128:	3724      	adds	r7, #36	; 0x24
 800112a:	46bd      	mov	sp, r7
 800112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001130:	4770      	bx	lr
	...

08001134 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b082      	sub	sp, #8
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	3b01      	subs	r3, #1
 8001140:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001144:	d301      	bcc.n	800114a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001146:	2301      	movs	r3, #1
 8001148:	e00f      	b.n	800116a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800114a:	4a0a      	ldr	r2, [pc, #40]	; (8001174 <SysTick_Config+0x40>)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	3b01      	subs	r3, #1
 8001150:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001152:	210f      	movs	r1, #15
 8001154:	f04f 30ff 	mov.w	r0, #4294967295
 8001158:	f7ff ff8e 	bl	8001078 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800115c:	4b05      	ldr	r3, [pc, #20]	; (8001174 <SysTick_Config+0x40>)
 800115e:	2200      	movs	r2, #0
 8001160:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001162:	4b04      	ldr	r3, [pc, #16]	; (8001174 <SysTick_Config+0x40>)
 8001164:	2207      	movs	r2, #7
 8001166:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001168:	2300      	movs	r3, #0
}
 800116a:	4618      	mov	r0, r3
 800116c:	3708      	adds	r7, #8
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	e000e010 	.word	0xe000e010

08001178 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001180:	6878      	ldr	r0, [r7, #4]
 8001182:	f7ff ff29 	bl	8000fd8 <__NVIC_SetPriorityGrouping>
}
 8001186:	bf00      	nop
 8001188:	3708      	adds	r7, #8
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}

0800118e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800118e:	b580      	push	{r7, lr}
 8001190:	b086      	sub	sp, #24
 8001192:	af00      	add	r7, sp, #0
 8001194:	4603      	mov	r3, r0
 8001196:	60b9      	str	r1, [r7, #8]
 8001198:	607a      	str	r2, [r7, #4]
 800119a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800119c:	f7ff ff40 	bl	8001020 <__NVIC_GetPriorityGrouping>
 80011a0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011a2:	687a      	ldr	r2, [r7, #4]
 80011a4:	68b9      	ldr	r1, [r7, #8]
 80011a6:	6978      	ldr	r0, [r7, #20]
 80011a8:	f7ff ff90 	bl	80010cc <NVIC_EncodePriority>
 80011ac:	4602      	mov	r2, r0
 80011ae:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80011b2:	4611      	mov	r1, r2
 80011b4:	4618      	mov	r0, r3
 80011b6:	f7ff ff5f 	bl	8001078 <__NVIC_SetPriority>
}
 80011ba:	bf00      	nop
 80011bc:	3718      	adds	r7, #24
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}

080011c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011c2:	b580      	push	{r7, lr}
 80011c4:	b082      	sub	sp, #8
 80011c6:	af00      	add	r7, sp, #0
 80011c8:	4603      	mov	r3, r0
 80011ca:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011cc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011d0:	4618      	mov	r0, r3
 80011d2:	f7ff ff33 	bl	800103c <__NVIC_EnableIRQ>
}
 80011d6:	bf00      	nop
 80011d8:	3708      	adds	r7, #8
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}

080011de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011de:	b580      	push	{r7, lr}
 80011e0:	b082      	sub	sp, #8
 80011e2:	af00      	add	r7, sp, #0
 80011e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011e6:	6878      	ldr	r0, [r7, #4]
 80011e8:	f7ff ffa4 	bl	8001134 <SysTick_Config>
 80011ec:	4603      	mov	r3, r0
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	3708      	adds	r7, #8
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
	...

080011f8 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b098      	sub	sp, #96	; 0x60
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8001200:	4a99      	ldr	r2, [pc, #612]	; (8001468 <HAL_FDCAN_Init+0x270>)
 8001202:	f107 030c 	add.w	r3, r7, #12
 8001206:	4611      	mov	r1, r2
 8001208:	224c      	movs	r2, #76	; 0x4c
 800120a:	4618      	mov	r0, r3
 800120c:	f004 fe64 	bl	8005ed8 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	2b00      	cmp	r3, #0
 8001214:	d101      	bne.n	800121a <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8001216:	2301      	movs	r3, #1
 8001218:	e23d      	b.n	8001696 <HAL_FDCAN_Init+0x49e>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	4a93      	ldr	r2, [pc, #588]	; (800146c <HAL_FDCAN_Init+0x274>)
 8001220:	4293      	cmp	r3, r2
 8001222:	d106      	bne.n	8001232 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800122c:	461a      	mov	r2, r3
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	605a      	str	r2, [r3, #4]
  {
    assert_param(IS_FDCAN_DATA_SIZE(hfdcan->Init.TxElmtSize));
  }

#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8001238:	b2db      	uxtb	r3, r3
 800123a:	2b00      	cmp	r3, #0
 800123c:	d155      	bne.n	80012ea <HAL_FDCAN_Init+0xf2>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	2200      	movs	r2, #0
 8001242:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Reset callbacks to legacy functions */
    hfdcan->ClockCalibrationCallback    = HAL_FDCAN_ClockCalibrationCallback;    /* Legacy weak ClockCalibrationCallback    */
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	4a89      	ldr	r2, [pc, #548]	; (8001470 <HAL_FDCAN_Init+0x278>)
 800124a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    hfdcan->TxEventFifoCallback         = HAL_FDCAN_TxEventFifoCallback;         /* Legacy weak TxEventFifoCallback         */
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	4a88      	ldr	r2, [pc, #544]	; (8001474 <HAL_FDCAN_Init+0x27c>)
 8001252:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
    hfdcan->RxFifo0Callback             = HAL_FDCAN_RxFifo0Callback;             /* Legacy weak RxFifo0Callback             */
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	4a87      	ldr	r2, [pc, #540]	; (8001478 <HAL_FDCAN_Init+0x280>)
 800125a:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
    hfdcan->RxFifo1Callback             = HAL_FDCAN_RxFifo1Callback;             /* Legacy weak RxFifo1Callback             */
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	4a86      	ldr	r2, [pc, #536]	; (800147c <HAL_FDCAN_Init+0x284>)
 8001262:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
    hfdcan->TxFifoEmptyCallback         = HAL_FDCAN_TxFifoEmptyCallback;         /* Legacy weak TxFifoEmptyCallback         */
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	4a85      	ldr	r2, [pc, #532]	; (8001480 <HAL_FDCAN_Init+0x288>)
 800126a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
    hfdcan->TxBufferCompleteCallback    = HAL_FDCAN_TxBufferCompleteCallback;    /* Legacy weak TxBufferCompleteCallback    */
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	4a84      	ldr	r2, [pc, #528]	; (8001484 <HAL_FDCAN_Init+0x28c>)
 8001272:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
    hfdcan->TxBufferAbortCallback       = HAL_FDCAN_TxBufferAbortCallback;       /* Legacy weak TxBufferAbortCallback       */
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	4a83      	ldr	r2, [pc, #524]	; (8001488 <HAL_FDCAN_Init+0x290>)
 800127a:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
    hfdcan->RxBufferNewMessageCallback  = HAL_FDCAN_RxBufferNewMessageCallback;  /* Legacy weak RxBufferNewMessageCallback  */
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	4a82      	ldr	r2, [pc, #520]	; (800148c <HAL_FDCAN_Init+0x294>)
 8001282:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
    hfdcan->HighPriorityMessageCallback = HAL_FDCAN_HighPriorityMessageCallback; /* Legacy weak HighPriorityMessageCallback */
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	4a81      	ldr	r2, [pc, #516]	; (8001490 <HAL_FDCAN_Init+0x298>)
 800128a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    hfdcan->TimestampWraparoundCallback = HAL_FDCAN_TimestampWraparoundCallback; /* Legacy weak TimestampWraparoundCallback */
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	4a80      	ldr	r2, [pc, #512]	; (8001494 <HAL_FDCAN_Init+0x29c>)
 8001292:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
    hfdcan->TimeoutOccurredCallback     = HAL_FDCAN_TimeoutOccurredCallback;     /* Legacy weak TimeoutOccurredCallback     */
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	4a7f      	ldr	r2, [pc, #508]	; (8001498 <HAL_FDCAN_Init+0x2a0>)
 800129a:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
    hfdcan->ErrorCallback               = HAL_FDCAN_ErrorCallback;               /* Legacy weak ErrorCallback               */
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	4a7e      	ldr	r2, [pc, #504]	; (800149c <HAL_FDCAN_Init+0x2a4>)
 80012a2:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
    hfdcan->ErrorStatusCallback         = HAL_FDCAN_ErrorStatusCallback;         /* Legacy weak ErrorStatusCallback         */
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	4a7d      	ldr	r2, [pc, #500]	; (80014a0 <HAL_FDCAN_Init+0x2a8>)
 80012aa:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
    hfdcan->TT_ScheduleSyncCallback     = HAL_FDCAN_TT_ScheduleSyncCallback;     /* Legacy weak TT_ScheduleSyncCallback     */
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	4a7c      	ldr	r2, [pc, #496]	; (80014a4 <HAL_FDCAN_Init+0x2ac>)
 80012b2:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
    hfdcan->TT_TimeMarkCallback         = HAL_FDCAN_TT_TimeMarkCallback;         /* Legacy weak TT_TimeMarkCallback         */
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	4a7b      	ldr	r2, [pc, #492]	; (80014a8 <HAL_FDCAN_Init+0x2b0>)
 80012ba:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
    hfdcan->TT_StopWatchCallback        = HAL_FDCAN_TT_StopWatchCallback;        /* Legacy weak TT_StopWatchCallback        */
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	4a7a      	ldr	r2, [pc, #488]	; (80014ac <HAL_FDCAN_Init+0x2b4>)
 80012c2:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    hfdcan->TT_GlobalTimeCallback       = HAL_FDCAN_TT_GlobalTimeCallback;       /* Legacy weak TT_GlobalTimeCallback       */
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	4a79      	ldr	r2, [pc, #484]	; (80014b0 <HAL_FDCAN_Init+0x2b8>)
 80012ca:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0

    if (hfdcan->MspInitCallback == NULL)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d103      	bne.n	80012e0 <HAL_FDCAN_Init+0xe8>
    {
      hfdcan->MspInitCallback = HAL_FDCAN_MspInit;  /* Legacy weak MspInit */
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	4a76      	ldr	r2, [pc, #472]	; (80014b4 <HAL_FDCAN_Init+0x2bc>)
 80012dc:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    }

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80012e6:	6878      	ldr	r0, [r7, #4]
 80012e8:	4798      	blx	r3
    HAL_FDCAN_MspInit(hfdcan);
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	699a      	ldr	r2, [r3, #24]
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f022 0210 	bic.w	r2, r2, #16
 80012f8:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80012fa:	f7ff fe55 	bl	8000fa8 <HAL_GetTick>
 80012fe:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8001300:	e014      	b.n	800132c <HAL_FDCAN_Init+0x134>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001302:	f7ff fe51 	bl	8000fa8 <HAL_GetTick>
 8001306:	4602      	mov	r2, r0
 8001308:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800130a:	1ad3      	subs	r3, r2, r3
 800130c:	2b0a      	cmp	r3, #10
 800130e:	d90d      	bls.n	800132c <HAL_FDCAN_Init+0x134>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001316:	f043 0201 	orr.w	r2, r3, #1
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	2203      	movs	r2, #3
 8001324:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8001328:	2301      	movs	r3, #1
 800132a:	e1b4      	b.n	8001696 <HAL_FDCAN_Init+0x49e>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	699b      	ldr	r3, [r3, #24]
 8001332:	f003 0308 	and.w	r3, r3, #8
 8001336:	2b08      	cmp	r3, #8
 8001338:	d0e3      	beq.n	8001302 <HAL_FDCAN_Init+0x10a>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	699a      	ldr	r2, [r3, #24]
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f042 0201 	orr.w	r2, r2, #1
 8001348:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800134a:	f7ff fe2d 	bl	8000fa8 <HAL_GetTick>
 800134e:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8001350:	e014      	b.n	800137c <HAL_FDCAN_Init+0x184>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001352:	f7ff fe29 	bl	8000fa8 <HAL_GetTick>
 8001356:	4602      	mov	r2, r0
 8001358:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800135a:	1ad3      	subs	r3, r2, r3
 800135c:	2b0a      	cmp	r3, #10
 800135e:	d90d      	bls.n	800137c <HAL_FDCAN_Init+0x184>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001366:	f043 0201 	orr.w	r2, r3, #1
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	2203      	movs	r2, #3
 8001374:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8001378:	2301      	movs	r3, #1
 800137a:	e18c      	b.n	8001696 <HAL_FDCAN_Init+0x49e>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	699b      	ldr	r3, [r3, #24]
 8001382:	f003 0301 	and.w	r3, r3, #1
 8001386:	2b00      	cmp	r3, #0
 8001388:	d0e3      	beq.n	8001352 <HAL_FDCAN_Init+0x15a>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	699a      	ldr	r2, [r3, #24]
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f042 0202 	orr.w	r2, r2, #2
 8001398:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	7c1b      	ldrb	r3, [r3, #16]
 800139e:	2b01      	cmp	r3, #1
 80013a0:	d108      	bne.n	80013b4 <HAL_FDCAN_Init+0x1bc>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	699a      	ldr	r2, [r3, #24]
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80013b0:	619a      	str	r2, [r3, #24]
 80013b2:	e007      	b.n	80013c4 <HAL_FDCAN_Init+0x1cc>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	699a      	ldr	r2, [r3, #24]
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80013c2:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	7c5b      	ldrb	r3, [r3, #17]
 80013c8:	2b01      	cmp	r3, #1
 80013ca:	d108      	bne.n	80013de <HAL_FDCAN_Init+0x1e6>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	699a      	ldr	r2, [r3, #24]
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80013da:	619a      	str	r2, [r3, #24]
 80013dc:	e007      	b.n	80013ee <HAL_FDCAN_Init+0x1f6>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	699a      	ldr	r2, [r3, #24]
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80013ec:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	7c9b      	ldrb	r3, [r3, #18]
 80013f2:	2b01      	cmp	r3, #1
 80013f4:	d108      	bne.n	8001408 <HAL_FDCAN_Init+0x210>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	699a      	ldr	r2, [r3, #24]
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001404:	619a      	str	r2, [r3, #24]
 8001406:	e007      	b.n	8001418 <HAL_FDCAN_Init+0x220>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	699a      	ldr	r2, [r3, #24]
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001416:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	699b      	ldr	r3, [r3, #24]
 800141e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	689a      	ldr	r2, [r3, #8]
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	430a      	orrs	r2, r1
 800142c:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	699a      	ldr	r2, [r3, #24]
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 800143c:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	691a      	ldr	r2, [r3, #16]
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f022 0210 	bic.w	r2, r2, #16
 800144c:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	68db      	ldr	r3, [r3, #12]
 8001452:	2b01      	cmp	r3, #1
 8001454:	d130      	bne.n	80014b8 <HAL_FDCAN_Init+0x2c0>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	699a      	ldr	r2, [r3, #24]
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f042 0204 	orr.w	r2, r2, #4
 8001464:	619a      	str	r2, [r3, #24]
 8001466:	e054      	b.n	8001512 <HAL_FDCAN_Init+0x31a>
 8001468:	08005f18 	.word	0x08005f18
 800146c:	4000a000 	.word	0x4000a000
 8001470:	0800200d 	.word	0x0800200d
 8001474:	08002023 	.word	0x08002023
 8001478:	08002039 	.word	0x08002039
 800147c:	0800204f 	.word	0x0800204f
 8001480:	08002065 	.word	0x08002065
 8001484:	08002079 	.word	0x08002079
 8001488:	0800208f 	.word	0x0800208f
 800148c:	080020a5 	.word	0x080020a5
 8001490:	080020e1 	.word	0x080020e1
 8001494:	080020b9 	.word	0x080020b9
 8001498:	080020cd 	.word	0x080020cd
 800149c:	080020f5 	.word	0x080020f5
 80014a0:	08002109 	.word	0x08002109
 80014a4:	0800211f 	.word	0x0800211f
 80014a8:	08002135 	.word	0x08002135
 80014ac:	0800214b 	.word	0x0800214b
 80014b0:	08002163 	.word	0x08002163
 80014b4:	08000b6d 	.word	0x08000b6d
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	68db      	ldr	r3, [r3, #12]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d028      	beq.n	8001512 <HAL_FDCAN_Init+0x31a>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	68db      	ldr	r3, [r3, #12]
 80014c4:	2b02      	cmp	r3, #2
 80014c6:	d01c      	beq.n	8001502 <HAL_FDCAN_Init+0x30a>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	699a      	ldr	r2, [r3, #24]
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80014d6:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	691a      	ldr	r2, [r3, #16]
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f042 0210 	orr.w	r2, r2, #16
 80014e6:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	68db      	ldr	r3, [r3, #12]
 80014ec:	2b03      	cmp	r3, #3
 80014ee:	d110      	bne.n	8001512 <HAL_FDCAN_Init+0x31a>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	699a      	ldr	r2, [r3, #24]
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f042 0220 	orr.w	r2, r2, #32
 80014fe:	619a      	str	r2, [r3, #24]
 8001500:	e007      	b.n	8001512 <HAL_FDCAN_Init+0x31a>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	699a      	ldr	r2, [r3, #24]
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f042 0220 	orr.w	r2, r2, #32
 8001510:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	699b      	ldr	r3, [r3, #24]
 8001516:	3b01      	subs	r3, #1
 8001518:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	69db      	ldr	r3, [r3, #28]
 800151e:	3b01      	subs	r3, #1
 8001520:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001522:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6a1b      	ldr	r3, [r3, #32]
 8001528:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800152a:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	695b      	ldr	r3, [r3, #20]
 8001532:	3b01      	subs	r3, #1
 8001534:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800153a:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800153c:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	689b      	ldr	r3, [r3, #8]
 8001542:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001546:	d115      	bne.n	8001574 <HAL_FDCAN_Init+0x37c>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800154c:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001552:	3b01      	subs	r3, #1
 8001554:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8001556:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155c:	3b01      	subs	r3, #1
 800155e:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8001560:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001568:	3b01      	subs	r3, #1
 800156a:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8001570:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8001572:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001578:	2b00      	cmp	r3, #0
 800157a:	d00a      	beq.n	8001592 <HAL_FDCAN_Init+0x39a>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	430a      	orrs	r2, r1
 800158e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800159a:	4413      	add	r3, r2
 800159c:	2b00      	cmp	r3, #0
 800159e:	d012      	beq.n	80015c6 <HAL_FDCAN_Init+0x3ce>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80015a8:	f023 0107 	bic.w	r1, r3, #7
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80015b0:	009b      	lsls	r3, r3, #2
 80015b2:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80015b6:	4413      	add	r3, r2
 80015b8:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	430a      	orrs	r2, r1
 80015c2:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d012      	beq.n	80015f4 <HAL_FDCAN_Init+0x3fc>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80015d6:	f023 0107 	bic.w	r1, r3, #7
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015de:	009b      	lsls	r3, r3, #2
 80015e0:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80015e4:	4413      	add	r3, r2
 80015e6:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	430a      	orrs	r2, r1
 80015f0:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d013      	beq.n	8001624 <HAL_FDCAN_Init+0x42c>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8001604:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800160c:	009b      	lsls	r3, r3, #2
 800160e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001612:	4413      	add	r3, r2
 8001614:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8001618:	011a      	lsls	r2, r3, #4
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	430a      	orrs	r2, r1
 8001620:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001628:	2b00      	cmp	r3, #0
 800162a:	d013      	beq.n	8001654 <HAL_FDCAN_Init+0x45c>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8001634:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800163c:	009b      	lsls	r3, r3, #2
 800163e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001642:	4413      	add	r3, r2
 8001644:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8001648:	021a      	lsls	r2, r3, #8
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	430a      	orrs	r2, r1
 8001650:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4a11      	ldr	r2, [pc, #68]	; (80016a0 <HAL_FDCAN_Init+0x4a8>)
 800165a:	4293      	cmp	r3, r2
 800165c:	d107      	bne.n	800166e <HAL_FDCAN_Init+0x476>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	689a      	ldr	r2, [r3, #8]
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	f022 0203 	bic.w	r2, r2, #3
 800166c:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	2200      	movs	r2, #0
 8001672:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	2200      	movs	r2, #0
 800167a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2201      	movs	r2, #1
 8001682:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8001686:	6878      	ldr	r0, [r7, #4]
 8001688:	f000 fd76 	bl	8002178 <FDCAN_CalcultateRamBlockAddresses>
 800168c:	4603      	mov	r3, r0
 800168e:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8001692:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8001696:	4618      	mov	r0, r3
 8001698:	3760      	adds	r7, #96	; 0x60
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	4000a000 	.word	0x4000a000

080016a4 <HAL_FDCAN_RegisterRxFifo0Callback>:
  * @param  hfdcan FDCAN handle
  * @param  pCallback pointer to the Rx Fifo 0 Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_RegisterRxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, pFDCAN_RxFifo0CallbackTypeDef pCallback)
{
 80016a4:	b480      	push	{r7}
 80016a6:	b085      	sub	sp, #20
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
 80016ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80016ae:	2300      	movs	r3, #0
 80016b0:	73fb      	strb	r3, [r7, #15]

  if (pCallback == NULL)
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d109      	bne.n	80016cc <HAL_FDCAN_RegisterRxFifo0Callback+0x28>
  {
    /* Update the error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_INVALID_CALLBACK;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80016be:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    return HAL_ERROR;
 80016c8:	2301      	movs	r3, #1
 80016ca:	e015      	b.n	80016f8 <HAL_FDCAN_RegisterRxFifo0Callback+0x54>
  }

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80016d2:	b2db      	uxtb	r3, r3
 80016d4:	2b01      	cmp	r3, #1
 80016d6:	d104      	bne.n	80016e2 <HAL_FDCAN_RegisterRxFifo0Callback+0x3e>
  {
    hfdcan->RxFifo0Callback = pCallback;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	683a      	ldr	r2, [r7, #0]
 80016dc:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 80016e0:	e009      	b.n	80016f6 <HAL_FDCAN_RegisterRxFifo0Callback+0x52>
  }
  else
  {
    /* Update the error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_INVALID_CALLBACK;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80016e8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Return error status */
    status =  HAL_ERROR;
 80016f2:	2301      	movs	r3, #1
 80016f4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80016f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80016f8:	4618      	mov	r0, r3
 80016fa:	3714      	adds	r7, #20
 80016fc:	46bd      	mov	sp, r7
 80016fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001702:	4770      	bx	lr

08001704 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8001704:	b480      	push	{r7}
 8001706:	b083      	sub	sp, #12
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8001712:	b2db      	uxtb	r3, r3
 8001714:	2b01      	cmp	r3, #1
 8001716:	d111      	bne.n	800173c <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	2202      	movs	r2, #2
 800171c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	699a      	ldr	r2, [r3, #24]
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f022 0201 	bic.w	r2, r2, #1
 800172e:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	2200      	movs	r2, #0
 8001734:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Return function status */
    return HAL_OK;
 8001738:	2300      	movs	r3, #0
 800173a:	e008      	b.n	800174e <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001742:	f043 0204 	orr.w	r2, r3, #4
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 800174c:	2301      	movs	r3, #1
  }
}
 800174e:	4618      	mov	r0, r3
 8001750:	370c      	adds	r7, #12
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr
	...

0800175c <HAL_FDCAN_GetRxMessage>:
  * @param  pRxHeader pointer to a FDCAN_RxHeaderTypeDef structure.
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation, FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 800175c:	b480      	push	{r7}
 800175e:	b08b      	sub	sp, #44	; 0x2c
 8001760:	af00      	add	r7, sp, #0
 8001762:	60f8      	str	r0, [r7, #12]
 8001764:	60b9      	str	r1, [r7, #8]
 8001766:	607a      	str	r2, [r7, #4]
 8001768:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 800176a:	2300      	movs	r3, #0
 800176c:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8001774:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 8001776:	7efb      	ldrb	r3, [r7, #27]
 8001778:	2b02      	cmp	r3, #2
 800177a:	f040 813b 	bne.w	80019f4 <HAL_FDCAN_GetRxMessage+0x298>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800177e:	68bb      	ldr	r3, [r7, #8]
 8001780:	2b40      	cmp	r3, #64	; 0x40
 8001782:	d145      	bne.n	8001810 <HAL_FDCAN_GetRxMessage+0xb4>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800178c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001790:	2b00      	cmp	r3, #0
 8001792:	d109      	bne.n	80017a8 <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800179a:	f043 0220 	orr.w	r2, r3, #32
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 80017a4:	2301      	movs	r3, #1
 80017a6:	e12e      	b.n	8001a06 <HAL_FDCAN_GetRxMessage+0x2aa>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80017b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d109      	bne.n	80017cc <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80017be:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 80017c8:	2301      	movs	r3, #1
 80017ca:	e11c      	b.n	8001a06 <HAL_FDCAN_GetRxMessage+0x2aa>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80017d4:	0e1b      	lsrs	r3, r3, #24
 80017d6:	f003 0301 	and.w	r3, r3, #1
 80017da:	2b01      	cmp	r3, #1
 80017dc:	d103      	bne.n	80017e6 <HAL_FDCAN_GetRxMessage+0x8a>
        {
          if(((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
            GetIndex = 1U;
          }
        }

        /* Calculate Rx FIFO 0 element index*/
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80017ee:	0a1b      	lsrs	r3, r3, #8
 80017f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80017f4:	69fa      	ldr	r2, [r7, #28]
 80017f6:	4413      	add	r3, r2
 80017f8:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001802:	69f9      	ldr	r1, [r7, #28]
 8001804:	fb01 f303 	mul.w	r3, r1, r3
 8001808:	009b      	lsls	r3, r3, #2
 800180a:	4413      	add	r3, r2
 800180c:	627b      	str	r3, [r7, #36]	; 0x24
 800180e:	e061      	b.n	80018d4 <HAL_FDCAN_GetRxMessage+0x178>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8001810:	68bb      	ldr	r3, [r7, #8]
 8001812:	2b41      	cmp	r3, #65	; 0x41
 8001814:	d145      	bne.n	80018a2 <HAL_FDCAN_GetRxMessage+0x146>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800181e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001822:	2b00      	cmp	r3, #0
 8001824:	d109      	bne.n	800183a <HAL_FDCAN_GetRxMessage+0xde>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800182c:	f043 0220 	orr.w	r2, r3, #32
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8001836:	2301      	movs	r3, #1
 8001838:	e0e5      	b.n	8001a06 <HAL_FDCAN_GetRxMessage+0x2aa>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8001842:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001846:	2b00      	cmp	r3, #0
 8001848:	d109      	bne.n	800185e <HAL_FDCAN_GetRxMessage+0x102>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001850:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 800185a:	2301      	movs	r3, #1
 800185c:	e0d3      	b.n	8001a06 <HAL_FDCAN_GetRxMessage+0x2aa>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8001866:	0e1b      	lsrs	r3, r3, #24
 8001868:	f003 0301 	and.w	r3, r3, #1
 800186c:	2b01      	cmp	r3, #1
 800186e:	d103      	bne.n	8001878 <HAL_FDCAN_GetRxMessage+0x11c>
        {
          if(((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
            GetIndex = 1U;
          }
        }

        /* Calculate Rx FIFO 1 element index*/
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8001880:	0a1b      	lsrs	r3, r3, #8
 8001882:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001886:	69fa      	ldr	r2, [r7, #28]
 8001888:	4413      	add	r3, r2
 800188a:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001894:	69f9      	ldr	r1, [r7, #28]
 8001896:	fb01 f303 	mul.w	r3, r1, r3
 800189a:	009b      	lsls	r3, r3, #2
 800189c:	4413      	add	r3, r2
 800189e:	627b      	str	r3, [r7, #36]	; 0x24
 80018a0:	e018      	b.n	80018d4 <HAL_FDCAN_GetRxMessage+0x178>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80018a6:	68ba      	ldr	r2, [r7, #8]
 80018a8:	429a      	cmp	r2, r3
 80018aa:	d309      	bcc.n	80018c0 <HAL_FDCAN_GetRxMessage+0x164>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80018b2:	f043 0220 	orr.w	r2, r3, #32
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 80018bc:	2301      	movs	r3, #1
 80018be:	e0a2      	b.n	8001a06 <HAL_FDCAN_GetRxMessage+0x2aa>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018c8:	68b9      	ldr	r1, [r7, #8]
 80018ca:	fb01 f303 	mul.w	r3, r1, r3
 80018ce:	009b      	lsls	r3, r3, #2
 80018d0:	4413      	add	r3, r2
 80018d2:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 80018d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d107      	bne.n	80018f8 <HAL_FDCAN_GetRxMessage+0x19c>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18);
 80018e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	0c9b      	lsrs	r3, r3, #18
 80018ee:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	601a      	str	r2, [r3, #0]
 80018f6:	e005      	b.n	8001904 <HAL_FDCAN_GetRxMessage+0x1a8>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 80018f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8001904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8001910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 800191c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800191e:	3304      	adds	r3, #4
 8001920:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8001922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	b29a      	uxth	r2, r3
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 800192c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8001938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8001944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24);
 8001950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	0e1b      	lsrs	r3, r3, #24
 8001956:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31);
 800195e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	0fda      	lsrs	r2, r3, #31
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8001968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800196a:	3304      	adds	r3, #4
 800196c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 800196e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001970:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 8001972:	2300      	movs	r3, #0
 8001974:	623b      	str	r3, [r7, #32]
 8001976:	e00a      	b.n	800198e <HAL_FDCAN_GetRxMessage+0x232>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8001978:	697a      	ldr	r2, [r7, #20]
 800197a:	6a3b      	ldr	r3, [r7, #32]
 800197c:	441a      	add	r2, r3
 800197e:	6839      	ldr	r1, [r7, #0]
 8001980:	6a3b      	ldr	r3, [r7, #32]
 8001982:	440b      	add	r3, r1
 8001984:	7812      	ldrb	r2, [r2, #0]
 8001986:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 8001988:	6a3b      	ldr	r3, [r7, #32]
 800198a:	3301      	adds	r3, #1
 800198c:	623b      	str	r3, [r7, #32]
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	68db      	ldr	r3, [r3, #12]
 8001992:	0c1b      	lsrs	r3, r3, #16
 8001994:	4a1f      	ldr	r2, [pc, #124]	; (8001a14 <HAL_FDCAN_GetRxMessage+0x2b8>)
 8001996:	5cd3      	ldrb	r3, [r2, r3]
 8001998:	461a      	mov	r2, r3
 800199a:	6a3b      	ldr	r3, [r7, #32]
 800199c:	4293      	cmp	r3, r2
 800199e:	d3eb      	bcc.n	8001978 <HAL_FDCAN_GetRxMessage+0x21c>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80019a0:	68bb      	ldr	r3, [r7, #8]
 80019a2:	2b40      	cmp	r3, #64	; 0x40
 80019a4:	d105      	bne.n	80019b2 <HAL_FDCAN_GetRxMessage+0x256>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	69fa      	ldr	r2, [r7, #28]
 80019ac:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 80019b0:	e01e      	b.n	80019f0 <HAL_FDCAN_GetRxMessage+0x294>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 80019b2:	68bb      	ldr	r3, [r7, #8]
 80019b4:	2b41      	cmp	r3, #65	; 0x41
 80019b6:	d105      	bne.n	80019c4 <HAL_FDCAN_GetRxMessage+0x268>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	69fa      	ldr	r2, [r7, #28]
 80019be:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 80019c2:	e015      	b.n	80019f0 <HAL_FDCAN_GetRxMessage+0x294>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 80019c4:	68bb      	ldr	r3, [r7, #8]
 80019c6:	2b1f      	cmp	r3, #31
 80019c8:	d808      	bhi.n	80019dc <HAL_FDCAN_GetRxMessage+0x280>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1 << RxLocation);
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	2101      	movs	r1, #1
 80019d0:	68ba      	ldr	r2, [r7, #8]
 80019d2:	fa01 f202 	lsl.w	r2, r1, r2
 80019d6:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 80019da:	e009      	b.n	80019f0 <HAL_FDCAN_GetRxMessage+0x294>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1 << (RxLocation & 0x1FU));
 80019dc:	68bb      	ldr	r3, [r7, #8]
 80019de:	f003 021f 	and.w	r2, r3, #31
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	2101      	movs	r1, #1
 80019e8:	fa01 f202 	lsl.w	r2, r1, r2
 80019ec:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 80019f0:	2300      	movs	r3, #0
 80019f2:	e008      	b.n	8001a06 <HAL_FDCAN_GetRxMessage+0x2aa>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80019fa:	f043 0208 	orr.w	r2, r3, #8
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8001a04:	2301      	movs	r3, #1
  }
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	372c      	adds	r7, #44	; 0x2c
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a10:	4770      	bx	lr
 8001a12:	bf00      	nop
 8001a14:	08005f84 	.word	0x08005f84

08001a18 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_COMPLETE
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs, uint32_t BufferIndexes)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	b087      	sub	sp, #28
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	60f8      	str	r0, [r7, #12]
 8001a20:	60b9      	str	r1, [r7, #8]
 8001a22:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8001a2a:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8001a2c:	7dfb      	ldrb	r3, [r7, #23]
 8001a2e:	2b01      	cmp	r3, #1
 8001a30:	d002      	beq.n	8001a38 <HAL_FDCAN_ActivateNotification+0x20>
 8001a32:	7dfb      	ldrb	r3, [r7, #23]
 8001a34:	2b02      	cmp	r3, #2
 8001a36:	d155      	bne.n	8001ae4 <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001a3e:	68bb      	ldr	r3, [r7, #8]
 8001a40:	4013      	ands	r3, r2
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d108      	bne.n	8001a58 <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f042 0201 	orr.w	r2, r2, #1
 8001a54:	65da      	str	r2, [r3, #92]	; 0x5c
 8001a56:	e014      	b.n	8001a82 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001a5e:	68bb      	ldr	r3, [r7, #8]
 8001a60:	4013      	ands	r3, r2
 8001a62:	68ba      	ldr	r2, [r7, #8]
 8001a64:	429a      	cmp	r2, r3
 8001a66:	d108      	bne.n	8001a7a <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f042 0202 	orr.w	r2, r2, #2
 8001a76:	65da      	str	r2, [r3, #92]	; 0x5c
 8001a78:	e003      	b.n	8001a82 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	2203      	movs	r2, #3
 8001a80:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8001a82:	68bb      	ldr	r3, [r7, #8]
 8001a84:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d009      	beq.n	8001aa0 <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occure if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	687a      	ldr	r2, [r7, #4]
 8001a9a:	430a      	orrs	r2, r1
 8001a9c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8001aa0:	68bb      	ldr	r3, [r7, #8]
 8001aa2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d009      	beq.n	8001abe <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occure if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f8d3 10e4 	ldr.w	r1, [r3, #228]	; 0xe4
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	687a      	ldr	r2, [r7, #4]
 8001ab8:	430a      	orrs	r2, r1
 8001aba:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8001ac4:	68ba      	ldr	r2, [r7, #8]
 8001ac6:	4b0f      	ldr	r3, [pc, #60]	; (8001b04 <HAL_FDCAN_ActivateNotification+0xec>)
 8001ac8:	4013      	ands	r3, r2
 8001aca:	68fa      	ldr	r2, [r7, #12]
 8001acc:	6812      	ldr	r2, [r2, #0]
 8001ace:	430b      	orrs	r3, r1
 8001ad0:	6553      	str	r3, [r2, #84]	; 0x54
 8001ad2:	4b0d      	ldr	r3, [pc, #52]	; (8001b08 <HAL_FDCAN_ActivateNotification+0xf0>)
 8001ad4:	695a      	ldr	r2, [r3, #20]
 8001ad6:	68bb      	ldr	r3, [r7, #8]
 8001ad8:	0f9b      	lsrs	r3, r3, #30
 8001ada:	490b      	ldr	r1, [pc, #44]	; (8001b08 <HAL_FDCAN_ActivateNotification+0xf0>)
 8001adc:	4313      	orrs	r3, r2
 8001ade:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	e008      	b.n	8001af6 <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001aea:	f043 0202 	orr.w	r2, r3, #2
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8001af4:	2301      	movs	r3, #1
  }
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	371c      	adds	r7, #28
 8001afa:	46bd      	mov	sp, r7
 8001afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b00:	4770      	bx	lr
 8001b02:	bf00      	nop
 8001b04:	3fcfffff 	.word	0x3fcfffff
 8001b08:	4000a800 	.word	0x4000a800

08001b0c <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b092      	sub	sp, #72	; 0x48
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  uint32_t TTDistErrors;
  uint32_t TTFatalErrors;
  uint32_t SWTime;
  uint32_t SWCycleCount;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 8001b14:	4b98      	ldr	r3, [pc, #608]	; (8001d78 <HAL_FDCAN_IRQHandler+0x26c>)
 8001b16:	691b      	ldr	r3, [r3, #16]
 8001b18:	079b      	lsls	r3, r3, #30
 8001b1a:	647b      	str	r3, [r7, #68]	; 0x44
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 8001b1c:	4b96      	ldr	r3, [pc, #600]	; (8001d78 <HAL_FDCAN_IRQHandler+0x26c>)
 8001b1e:	695b      	ldr	r3, [r3, #20]
 8001b20:	079b      	lsls	r3, r3, #30
 8001b22:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001b24:	4013      	ands	r3, r2
 8001b26:	647b      	str	r3, [r7, #68]	; 0x44
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b2e:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8001b32:	643b      	str	r3, [r7, #64]	; 0x40
  TxEventFifoITs &= hfdcan->Instance->IE;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b3a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	643b      	str	r3, [r7, #64]	; 0x40
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b46:	f003 030f 	and.w	r3, r3, #15
 8001b4a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RxFifo0ITs &= hfdcan->Instance->IE;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b52:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001b54:	4013      	ands	r3, r2
 8001b56:	63fb      	str	r3, [r7, #60]	; 0x3c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b5e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b62:	63bb      	str	r3, [r7, #56]	; 0x38
  RxFifo1ITs &= hfdcan->Instance->IE;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b6a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001b6c:	4013      	ands	r3, r2
 8001b6e:	63bb      	str	r3, [r7, #56]	; 0x38
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b76:	f003 5371 	and.w	r3, r3, #1010827264	; 0x3c400000
 8001b7a:	637b      	str	r3, [r7, #52]	; 0x34
  Errors &= hfdcan->Instance->IE;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b82:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001b84:	4013      	ands	r3, r2
 8001b86:	637b      	str	r3, [r7, #52]	; 0x34
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b8e:	f003 7360 	and.w	r3, r3, #58720256	; 0x3800000
 8001b92:	633b      	str	r3, [r7, #48]	; 0x30
  ErrorStatusITs &= hfdcan->Instance->IE;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b9a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001b9c:	4013      	ands	r3, r2
 8001b9e:	633b      	str	r3, [r7, #48]	; 0x30

  /* High Priority Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ba6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d013      	beq.n	8001bd6 <HAL_FDCAN_IRQHandler+0xca>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001bb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d00c      	beq.n	8001bd6 <HAL_FDCAN_IRQHandler+0xca>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001bc4:	651a      	str	r2, [r3, #80]	; 0x50
 8001bc6:	4b6c      	ldr	r3, [pc, #432]	; (8001d78 <HAL_FDCAN_IRQHandler+0x26c>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	611a      	str	r2, [r3, #16]

#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001bd2:	6878      	ldr	r0, [r7, #4]
 8001bd4:	4798      	blx	r3
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bdc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d020      	beq.n	8001c26 <HAL_FDCAN_IRQHandler+0x11a>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001bea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d019      	beq.n	8001c26 <HAL_FDCAN_IRQHandler+0x11a>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8001bfa:	62fb      	str	r3, [r7, #44]	; 0x2c
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8001c04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c06:	4013      	ands	r3, r2
 8001c08:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c12:	651a      	str	r2, [r3, #80]	; 0x50
 8001c14:	4b58      	ldr	r3, [pc, #352]	; (8001d78 <HAL_FDCAN_IRQHandler+0x26c>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	611a      	str	r2, [r3, #16]

#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8001c20:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001c22:	6878      	ldr	r0, [r7, #4]
 8001c24:	4798      	blx	r3
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 8001c26:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d00f      	beq.n	8001c4c <HAL_FDCAN_IRQHandler+0x140>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681a      	ldr	r2, [r3, #0]
 8001c30:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001c32:	4b52      	ldr	r3, [pc, #328]	; (8001d7c <HAL_FDCAN_IRQHandler+0x270>)
 8001c34:	400b      	ands	r3, r1
 8001c36:	6513      	str	r3, [r2, #80]	; 0x50
 8001c38:	4a4f      	ldr	r2, [pc, #316]	; (8001d78 <HAL_FDCAN_IRQHandler+0x26c>)
 8001c3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c3c:	0f9b      	lsrs	r3, r3, #30
 8001c3e:	6113      	str	r3, [r2, #16]

#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8001c46:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001c48:	6878      	ldr	r0, [r7, #4]
 8001c4a:	4798      	blx	r3
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8001c4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d00f      	beq.n	8001c72 <HAL_FDCAN_IRQHandler+0x166>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681a      	ldr	r2, [r3, #0]
 8001c56:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8001c58:	4b48      	ldr	r3, [pc, #288]	; (8001d7c <HAL_FDCAN_IRQHandler+0x270>)
 8001c5a:	400b      	ands	r3, r1
 8001c5c:	6513      	str	r3, [r2, #80]	; 0x50
 8001c5e:	4a46      	ldr	r2, [pc, #280]	; (8001d78 <HAL_FDCAN_IRQHandler+0x26c>)
 8001c60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001c62:	0f9b      	lsrs	r3, r3, #30
 8001c64:	6113      	str	r3, [r2, #16]

#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001c6c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8001c6e:	6878      	ldr	r0, [r7, #4]
 8001c70:	4798      	blx	r3
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8001c72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d00f      	beq.n	8001c98 <HAL_FDCAN_IRQHandler+0x18c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681a      	ldr	r2, [r3, #0]
 8001c7c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001c7e:	4b3f      	ldr	r3, [pc, #252]	; (8001d7c <HAL_FDCAN_IRQHandler+0x270>)
 8001c80:	400b      	ands	r3, r1
 8001c82:	6513      	str	r3, [r2, #80]	; 0x50
 8001c84:	4a3c      	ldr	r2, [pc, #240]	; (8001d78 <HAL_FDCAN_IRQHandler+0x26c>)
 8001c86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c88:	0f9b      	lsrs	r3, r3, #30
 8001c8a:	6113      	str	r3, [r2, #16]

#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8001c92:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001c94:	6878      	ldr	r0, [r7, #4]
 8001c96:	4798      	blx	r3
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8001c98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d00f      	beq.n	8001cbe <HAL_FDCAN_IRQHandler+0x1b2>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681a      	ldr	r2, [r3, #0]
 8001ca2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001ca4:	4b35      	ldr	r3, [pc, #212]	; (8001d7c <HAL_FDCAN_IRQHandler+0x270>)
 8001ca6:	400b      	ands	r3, r1
 8001ca8:	6513      	str	r3, [r2, #80]	; 0x50
 8001caa:	4a33      	ldr	r2, [pc, #204]	; (8001d78 <HAL_FDCAN_IRQHandler+0x26c>)
 8001cac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001cae:	0f9b      	lsrs	r3, r3, #30
 8001cb0:	6113      	str	r3, [r2, #16]

#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8001cb8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001cba:	6878      	ldr	r0, [r7, #4]
 8001cbc:	4798      	blx	r3
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cc4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d013      	beq.n	8001cf4 <HAL_FDCAN_IRQHandler+0x1e8>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001cd2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d00c      	beq.n	8001cf4 <HAL_FDCAN_IRQHandler+0x1e8>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001ce2:	651a      	str	r2, [r3, #80]	; 0x50
 8001ce4:	4b24      	ldr	r3, [pc, #144]	; (8001d78 <HAL_FDCAN_IRQHandler+0x26c>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	611a      	str	r2, [r3, #16]

#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8001cf0:	6878      	ldr	r0, [r7, #4]
 8001cf2:	4798      	blx	r3
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cfa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d020      	beq.n	8001d44 <HAL_FDCAN_IRQHandler+0x238>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d08:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d019      	beq.n	8001d44 <HAL_FDCAN_IRQHandler+0x238>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001d18:	62bb      	str	r3, [r7, #40]	; 0x28
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d22:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001d24:	4013      	ands	r3, r2
 8001d26:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d30:	651a      	str	r2, [r3, #80]	; 0x50
 8001d32:	4b11      	ldr	r3, [pc, #68]	; (8001d78 <HAL_FDCAN_IRQHandler+0x26c>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	611a      	str	r2, [r3, #16]

#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8001d3e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001d40:	6878      	ldr	r0, [r7, #4]
 8001d42:	4798      	blx	r3
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != 0U)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d4a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d018      	beq.n	8001d84 <HAL_FDCAN_IRQHandler+0x278>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != 0U)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d58:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d011      	beq.n	8001d84 <HAL_FDCAN_IRQHandler+0x278>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001d68:	651a      	str	r2, [r3, #80]	; 0x50
 8001d6a:	4b03      	ldr	r3, [pc, #12]	; (8001d78 <HAL_FDCAN_IRQHandler+0x26c>)
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	611a      	str	r2, [r3, #16]

#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8001d76:	e003      	b.n	8001d80 <HAL_FDCAN_IRQHandler+0x274>
 8001d78:	4000a800 	.word	0x4000a800
 8001d7c:	3fcfffff 	.word	0x3fcfffff
 8001d80:	6878      	ldr	r0, [r7, #4]
 8001d82:	4798      	blx	r3
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d013      	beq.n	8001dba <HAL_FDCAN_IRQHandler+0x2ae>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d00c      	beq.n	8001dba <HAL_FDCAN_IRQHandler+0x2ae>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001da8:	651a      	str	r2, [r3, #80]	; 0x50
 8001daa:	4b95      	ldr	r3, [pc, #596]	; (8002000 <HAL_FDCAN_IRQHandler+0x4f4>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	611a      	str	r2, [r3, #16]

#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8001db6:	6878      	ldr	r0, [r7, #4]
 8001db8:	4798      	blx	r3
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dc0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d013      	beq.n	8001df0 <HAL_FDCAN_IRQHandler+0x2e4>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001dce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d00c      	beq.n	8001df0 <HAL_FDCAN_IRQHandler+0x2e4>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001dde:	651a      	str	r2, [r3, #80]	; 0x50
 8001de0:	4b87      	ldr	r3, [pc, #540]	; (8002000 <HAL_FDCAN_IRQHandler+0x4f4>)
 8001de2:	2200      	movs	r2, #0
 8001de4:	611a      	str	r2, [r3, #16]

#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8001dec:	6878      	ldr	r0, [r7, #4]
 8001dee:	4798      	blx	r3
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001df6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d016      	beq.n	8001e2c <HAL_FDCAN_IRQHandler+0x320>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d00f      	beq.n	8001e2c <HAL_FDCAN_IRQHandler+0x320>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001e14:	651a      	str	r2, [r3, #80]	; 0x50
 8001e16:	4b7a      	ldr	r3, [pc, #488]	; (8002000 <HAL_FDCAN_IRQHandler+0x4f4>)
 8001e18:	2200      	movs	r2, #0
 8001e1a:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001e22:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8001e2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d00f      	beq.n	8001e52 <HAL_FDCAN_IRQHandler+0x346>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681a      	ldr	r2, [r3, #0]
 8001e36:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001e38:	4b72      	ldr	r3, [pc, #456]	; (8002004 <HAL_FDCAN_IRQHandler+0x4f8>)
 8001e3a:	400b      	ands	r3, r1
 8001e3c:	6513      	str	r3, [r2, #80]	; 0x50
 8001e3e:	4a70      	ldr	r2, [pc, #448]	; (8002000 <HAL_FDCAN_IRQHandler+0x4f4>)
 8001e40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e42:	0f9b      	lsrs	r3, r3, #30
 8001e44:	6113      	str	r3, [r2, #16]

#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8001e4c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001e4e:	6878      	ldr	r0, [r7, #4]
 8001e50:	4798      	blx	r3
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8001e52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d011      	beq.n	8001e7c <HAL_FDCAN_IRQHandler+0x370>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681a      	ldr	r2, [r3, #0]
 8001e5c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001e5e:	4b69      	ldr	r3, [pc, #420]	; (8002004 <HAL_FDCAN_IRQHandler+0x4f8>)
 8001e60:	400b      	ands	r3, r1
 8001e62:	6513      	str	r3, [r2, #80]	; 0x50
 8001e64:	4a66      	ldr	r2, [pc, #408]	; (8002000 <HAL_FDCAN_IRQHandler+0x4f4>)
 8001e66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e68:	0f9b      	lsrs	r3, r3, #30
 8001e6a:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8001e72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e74:	431a      	orrs	r2, r3
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a61      	ldr	r2, [pc, #388]	; (8002008 <HAL_FDCAN_IRQHandler+0x4fc>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	f040 80ae 	bne.w	8001fe4 <HAL_FDCAN_IRQHandler+0x4d8>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	689b      	ldr	r3, [r3, #8]
 8001e8e:	f003 0303 	and.w	r3, r3, #3
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	f000 80a6 	beq.w	8001fe4 <HAL_FDCAN_IRQHandler+0x4d8>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	6a1b      	ldr	r3, [r3, #32]
 8001e9e:	f003 030f 	and.w	r3, r3, #15
 8001ea2:	627b      	str	r3, [r7, #36]	; 0x24
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eaa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001eac:	4013      	ands	r3, r2
 8001eae:	627b      	str	r3, [r7, #36]	; 0x24
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	6a1b      	ldr	r3, [r3, #32]
 8001eb6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001eba:	623b      	str	r3, [r7, #32]
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ec2:	6a3a      	ldr	r2, [r7, #32]
 8001ec4:	4013      	ands	r3, r2
 8001ec6:	623b      	str	r3, [r7, #32]
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	6a1b      	ldr	r3, [r3, #32]
 8001ece:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8001ed2:	61fb      	str	r3, [r7, #28]
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eda:	69fa      	ldr	r2, [r7, #28]
 8001edc:	4013      	ands	r3, r2
 8001ede:	61fb      	str	r3, [r7, #28]
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	6a1b      	ldr	r3, [r3, #32]
 8001ee6:	f403 43fc 	and.w	r3, r3, #32256	; 0x7e00
 8001eea:	61bb      	str	r3, [r7, #24]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ef2:	69ba      	ldr	r2, [r7, #24]
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	61bb      	str	r3, [r7, #24]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	6a1b      	ldr	r3, [r3, #32]
 8001efe:	f403 23f0 	and.w	r3, r3, #491520	; 0x78000
 8001f02:	617b      	str	r3, [r7, #20]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f0a:	697a      	ldr	r2, [r7, #20]
 8001f0c:	4013      	ands	r3, r2
 8001f0e:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 8001f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d009      	beq.n	8001f2a <HAL_FDCAN_IRQHandler+0x41e>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f1c:	621a      	str	r2, [r3, #32]

#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001f24:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001f26:	6878      	ldr	r0, [r7, #4]
 8001f28:	4798      	blx	r3
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 8001f2a:	6a3b      	ldr	r3, [r7, #32]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d009      	beq.n	8001f44 <HAL_FDCAN_IRQHandler+0x438>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	6a3a      	ldr	r2, [r7, #32]
 8001f36:	621a      	str	r2, [r3, #32]

#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001f3e:	6a39      	ldr	r1, [r7, #32]
 8001f40:	6878      	ldr	r0, [r7, #4]
 8001f42:	4798      	blx	r3
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (__HAL_FDCAN_TT_GET_IT_SOURCE(hfdcan, FDCAN_TT_IT_STOP_WATCH) != 0U)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d01d      	beq.n	8001f8e <HAL_FDCAN_IRQHandler+0x482>
      {
        if (__HAL_FDCAN_TT_GET_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH) != 0U)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	6a1b      	ldr	r3, [r3, #32]
 8001f58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d016      	beq.n	8001f8e <HAL_FDCAN_IRQHandler+0x482>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f66:	0c1b      	lsrs	r3, r3, #16
 8001f68:	b29b      	uxth	r3, r3
 8001f6a:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f72:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001f76:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	2240      	movs	r2, #64	; 0x40
 8001f7e:	621a      	str	r2, [r3, #32]

#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8001f86:	68fa      	ldr	r2, [r7, #12]
 8001f88:	6939      	ldr	r1, [r7, #16]
 8001f8a:	6878      	ldr	r0, [r7, #4]
 8001f8c:	4798      	blx	r3
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 8001f8e:	69fb      	ldr	r3, [r7, #28]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d009      	beq.n	8001fa8 <HAL_FDCAN_IRQHandler+0x49c>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	69fa      	ldr	r2, [r7, #28]
 8001f9a:	621a      	str	r2, [r3, #32]

#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fa2:	69f9      	ldr	r1, [r7, #28]
 8001fa4:	6878      	ldr	r0, [r7, #4]
 8001fa6:	4798      	blx	r3
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 8001fa8:	69bb      	ldr	r3, [r7, #24]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d00b      	beq.n	8001fc6 <HAL_FDCAN_IRQHandler+0x4ba>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	69ba      	ldr	r2, [r7, #24]
 8001fb4:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8001fbc:	69bb      	ldr	r3, [r7, #24]
 8001fbe:	431a      	orrs	r2, r3
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 8001fc6:	697b      	ldr	r3, [r7, #20]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d00b      	beq.n	8001fe4 <HAL_FDCAN_IRQHandler+0x4d8>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	697a      	ldr	r2, [r7, #20]
 8001fd2:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8001fda:	697b      	ldr	r3, [r7, #20]
 8001fdc:	431a      	orrs	r2, r3
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d004      	beq.n	8001ff8 <HAL_FDCAN_IRQHandler+0x4ec>
  {
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8001ff4:	6878      	ldr	r0, [r7, #4]
 8001ff6:	4798      	blx	r3
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8001ff8:	bf00      	nop
 8001ffa:	3748      	adds	r7, #72	; 0x48
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bd80      	pop	{r7, pc}
 8002000:	4000a800 	.word	0x4000a800
 8002004:	3fcfffff 	.word	0x3fcfffff
 8002008:	4000a000 	.word	0x4000a000

0800200c <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 800200c:	b480      	push	{r7}
 800200e:	b083      	sub	sp, #12
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
 8002014:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 8002016:	bf00      	nop
 8002018:	370c      	adds	r7, #12
 800201a:	46bd      	mov	sp, r7
 800201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002020:	4770      	bx	lr

08002022 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8002022:	b480      	push	{r7}
 8002024:	b083      	sub	sp, #12
 8002026:	af00      	add	r7, sp, #0
 8002028:	6078      	str	r0, [r7, #4]
 800202a:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 800202c:	bf00      	nop
 800202e:	370c      	adds	r7, #12
 8002030:	46bd      	mov	sp, r7
 8002032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002036:	4770      	bx	lr

08002038 <HAL_FDCAN_RxFifo0Callback>:
  * @param  RxFifo0ITs indicates which Rx FIFO 0 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo0_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8002038:	b480      	push	{r7}
 800203a:	b083      	sub	sp, #12
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
 8002040:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo0ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo0Callback could be implemented in the user file
   */
}
 8002042:	bf00      	nop
 8002044:	370c      	adds	r7, #12
 8002046:	46bd      	mov	sp, r7
 8002048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204c:	4770      	bx	lr

0800204e <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 800204e:	b480      	push	{r7}
 8002050:	b083      	sub	sp, #12
 8002052:	af00      	add	r7, sp, #0
 8002054:	6078      	str	r0, [r7, #4]
 8002056:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8002058:	bf00      	nop
 800205a:	370c      	adds	r7, #12
 800205c:	46bd      	mov	sp, r7
 800205e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002062:	4770      	bx	lr

08002064 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002064:	b480      	push	{r7}
 8002066:	b083      	sub	sp, #12
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 800206c:	bf00      	nop
 800206e:	370c      	adds	r7, #12
 8002070:	46bd      	mov	sp, r7
 8002072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002076:	4770      	bx	lr

08002078 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8002078:	b480      	push	{r7}
 800207a:	b083      	sub	sp, #12
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
 8002080:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8002082:	bf00      	nop
 8002084:	370c      	adds	r7, #12
 8002086:	46bd      	mov	sp, r7
 8002088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208c:	4770      	bx	lr

0800208e <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 800208e:	b480      	push	{r7}
 8002090:	b083      	sub	sp, #12
 8002092:	af00      	add	r7, sp, #0
 8002094:	6078      	str	r0, [r7, #4]
 8002096:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8002098:	bf00      	nop
 800209a:	370c      	adds	r7, #12
 800209c:	46bd      	mov	sp, r7
 800209e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a2:	4770      	bx	lr

080020a4 <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b083      	sub	sp, #12
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 80020ac:	bf00      	nop
 80020ae:	370c      	adds	r7, #12
 80020b0:	46bd      	mov	sp, r7
 80020b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b6:	4770      	bx	lr

080020b8 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b083      	sub	sp, #12
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 80020c0:	bf00      	nop
 80020c2:	370c      	adds	r7, #12
 80020c4:	46bd      	mov	sp, r7
 80020c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ca:	4770      	bx	lr

080020cc <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b083      	sub	sp, #12
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 80020d4:	bf00      	nop
 80020d6:	370c      	adds	r7, #12
 80020d8:	46bd      	mov	sp, r7
 80020da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020de:	4770      	bx	lr

080020e0 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b083      	sub	sp, #12
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 80020e8:	bf00      	nop
 80020ea:	370c      	adds	r7, #12
 80020ec:	46bd      	mov	sp, r7
 80020ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f2:	4770      	bx	lr

080020f4 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80020f4:	b480      	push	{r7}
 80020f6:	b083      	sub	sp, #12
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 80020fc:	bf00      	nop
 80020fe:	370c      	adds	r7, #12
 8002100:	46bd      	mov	sp, r7
 8002102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002106:	4770      	bx	lr

08002108 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8002108:	b480      	push	{r7}
 800210a:	b083      	sub	sp, #12
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
 8002110:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8002112:	bf00      	nop
 8002114:	370c      	adds	r7, #12
 8002116:	46bd      	mov	sp, r7
 8002118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211c:	4770      	bx	lr

0800211e <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 800211e:	b480      	push	{r7}
 8002120:	b083      	sub	sp, #12
 8002122:	af00      	add	r7, sp, #0
 8002124:	6078      	str	r0, [r7, #4]
 8002126:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 8002128:	bf00      	nop
 800212a:	370c      	adds	r7, #12
 800212c:	46bd      	mov	sp, r7
 800212e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002132:	4770      	bx	lr

08002134 <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 8002134:	b480      	push	{r7}
 8002136:	b083      	sub	sp, #12
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
 800213c:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 800213e:	bf00      	nop
 8002140:	370c      	adds	r7, #12
 8002142:	46bd      	mov	sp, r7
 8002144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002148:	4770      	bx	lr

0800214a <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 800214a:	b480      	push	{r7}
 800214c:	b085      	sub	sp, #20
 800214e:	af00      	add	r7, sp, #0
 8002150:	60f8      	str	r0, [r7, #12]
 8002152:	60b9      	str	r1, [r7, #8]
 8002154:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 8002156:	bf00      	nop
 8002158:	3714      	adds	r7, #20
 800215a:	46bd      	mov	sp, r7
 800215c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002160:	4770      	bx	lr

08002162 <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 8002162:	b480      	push	{r7}
 8002164:	b083      	sub	sp, #12
 8002166:	af00      	add	r7, sp, #0
 8002168:	6078      	str	r0, [r7, #4]
 800216a:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 800216c:	bf00      	nop
 800216e:	370c      	adds	r7, #12
 8002170:	46bd      	mov	sp, r7
 8002172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002176:	4770      	bx	lr

08002178 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8002178:	b480      	push	{r7}
 800217a:	b085      	sub	sp, #20
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002184:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800218e:	4ba7      	ldr	r3, [pc, #668]	; (800242c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8002190:	4013      	ands	r3, r2
 8002192:	68ba      	ldr	r2, [r7, #8]
 8002194:	0091      	lsls	r1, r2, #2
 8002196:	687a      	ldr	r2, [r7, #4]
 8002198:	6812      	ldr	r2, [r2, #0]
 800219a:	430b      	orrs	r3, r1
 800219c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80021a8:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021b0:	041a      	lsls	r2, r3, #16
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	430a      	orrs	r2, r1
 80021b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021c0:	68ba      	ldr	r2, [r7, #8]
 80021c2:	4413      	add	r3, r2
 80021c4:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80021ce:	4b97      	ldr	r3, [pc, #604]	; (800242c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80021d0:	4013      	ands	r3, r2
 80021d2:	68ba      	ldr	r2, [r7, #8]
 80021d4:	0091      	lsls	r1, r2, #2
 80021d6:	687a      	ldr	r2, [r7, #4]
 80021d8:	6812      	ldr	r2, [r2, #0]
 80021da:	430b      	orrs	r3, r1
 80021dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021e8:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021f0:	041a      	lsls	r2, r3, #16
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	430a      	orrs	r2, r1
 80021f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002200:	005b      	lsls	r3, r3, #1
 8002202:	68ba      	ldr	r2, [r7, #8]
 8002204:	4413      	add	r3, r2
 8002206:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8002210:	4b86      	ldr	r3, [pc, #536]	; (800242c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8002212:	4013      	ands	r3, r2
 8002214:	68ba      	ldr	r2, [r7, #8]
 8002216:	0091      	lsls	r1, r2, #2
 8002218:	687a      	ldr	r2, [r7, #4]
 800221a:	6812      	ldr	r2, [r2, #0]
 800221c:	430b      	orrs	r3, r1
 800221e:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800222a:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002232:	041a      	lsls	r2, r3, #16
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	430a      	orrs	r2, r1
 800223a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002242:	687a      	ldr	r2, [r7, #4]
 8002244:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002246:	fb02 f303 	mul.w	r3, r2, r3
 800224a:	68ba      	ldr	r2, [r7, #8]
 800224c:	4413      	add	r3, r2
 800224e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002258:	4b74      	ldr	r3, [pc, #464]	; (800242c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800225a:	4013      	ands	r3, r2
 800225c:	68ba      	ldr	r2, [r7, #8]
 800225e:	0091      	lsls	r1, r2, #2
 8002260:	687a      	ldr	r2, [r7, #4]
 8002262:	6812      	ldr	r2, [r2, #0]
 8002264:	430b      	orrs	r3, r1
 8002266:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002272:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800227a:	041a      	lsls	r2, r3, #16
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	430a      	orrs	r2, r1
 8002282:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800228a:	687a      	ldr	r2, [r7, #4]
 800228c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800228e:	fb02 f303 	mul.w	r3, r2, r3
 8002292:	68ba      	ldr	r2, [r7, #8]
 8002294:	4413      	add	r3, r2
 8002296:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 80022a0:	4b62      	ldr	r3, [pc, #392]	; (800242c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80022a2:	4013      	ands	r3, r2
 80022a4:	68ba      	ldr	r2, [r7, #8]
 80022a6:	0091      	lsls	r1, r2, #2
 80022a8:	687a      	ldr	r2, [r7, #4]
 80022aa:	6812      	ldr	r2, [r2, #0]
 80022ac:	430b      	orrs	r3, r1
 80022ae:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022b6:	687a      	ldr	r2, [r7, #4]
 80022b8:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80022ba:	fb02 f303 	mul.w	r3, r2, r3
 80022be:	68ba      	ldr	r2, [r7, #8]
 80022c0:	4413      	add	r3, r2
 80022c2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 80022cc:	4b57      	ldr	r3, [pc, #348]	; (800242c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80022ce:	4013      	ands	r3, r2
 80022d0:	68ba      	ldr	r2, [r7, #8]
 80022d2:	0091      	lsls	r1, r2, #2
 80022d4:	687a      	ldr	r2, [r7, #4]
 80022d6:	6812      	ldr	r2, [r2, #0]
 80022d8:	430b      	orrs	r3, r1
 80022da:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80022e6:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022ee:	041a      	lsls	r2, r3, #16
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	430a      	orrs	r2, r1
 80022f6:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022fe:	005b      	lsls	r3, r3, #1
 8002300:	68ba      	ldr	r2, [r7, #8]
 8002302:	4413      	add	r3, r2
 8002304:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800230e:	4b47      	ldr	r3, [pc, #284]	; (800242c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8002310:	4013      	ands	r3, r2
 8002312:	68ba      	ldr	r2, [r7, #8]
 8002314:	0091      	lsls	r1, r2, #2
 8002316:	687a      	ldr	r2, [r7, #4]
 8002318:	6812      	ldr	r2, [r2, #0]
 800231a:	430b      	orrs	r3, r1
 800231c:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002328:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002330:	041a      	lsls	r2, r3, #16
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	430a      	orrs	r2, r1
 8002338:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002344:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800234c:	061a      	lsls	r2, r3, #24
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	430a      	orrs	r2, r1
 8002354:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800235c:	4b34      	ldr	r3, [pc, #208]	; (8002430 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 800235e:	4413      	add	r3, r2
 8002360:	009a      	lsls	r2, r3, #2
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800236e:	009b      	lsls	r3, r3, #2
 8002370:	441a      	add	r2, r3
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800237e:	00db      	lsls	r3, r3, #3
 8002380:	441a      	add	r2, r3
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800238e:	6879      	ldr	r1, [r7, #4]
 8002390:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8002392:	fb01 f303 	mul.w	r3, r1, r3
 8002396:	009b      	lsls	r3, r3, #2
 8002398:	441a      	add	r2, r3
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023a6:	6879      	ldr	r1, [r7, #4]
 80023a8:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 80023aa:	fb01 f303 	mul.w	r3, r1, r3
 80023ae:	009b      	lsls	r3, r3, #2
 80023b0:	441a      	add	r2, r3
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023be:	6879      	ldr	r1, [r7, #4]
 80023c0:	6d49      	ldr	r1, [r1, #84]	; 0x54
 80023c2:	fb01 f303 	mul.w	r3, r1, r3
 80023c6:	009b      	lsls	r3, r3, #2
 80023c8:	441a      	add	r2, r3
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023da:	00db      	lsls	r3, r3, #3
 80023dc:	441a      	add	r2, r3
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023ee:	6879      	ldr	r1, [r7, #4]
 80023f0:	6e89      	ldr	r1, [r1, #104]	; 0x68
 80023f2:	fb01 f303 	mul.w	r3, r1, r3
 80023f6:	009b      	lsls	r3, r3, #2
 80023f8:	441a      	add	r2, r3
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800240a:	6879      	ldr	r1, [r7, #4]
 800240c:	6e89      	ldr	r1, [r1, #104]	; 0x68
 800240e:	fb01 f303 	mul.w	r3, r1, r3
 8002412:	009b      	lsls	r3, r3, #2
 8002414:	441a      	add	r2, r3
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002422:	4a04      	ldr	r2, [pc, #16]	; (8002434 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8002424:	4293      	cmp	r3, r2
 8002426:	d915      	bls.n	8002454 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8002428:	e006      	b.n	8002438 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 800242a:	bf00      	nop
 800242c:	ffff0003 	.word	0xffff0003
 8002430:	10002b00 	.word	0x10002b00
 8002434:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800243e:	f043 0220 	orr.w	r2, r3, #32
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2203      	movs	r2, #3
 800244c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8002450:	2301      	movs	r3, #1
 8002452:	e010      	b.n	8002476 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002458:	60fb      	str	r3, [r7, #12]
 800245a:	e005      	b.n	8002468 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	2200      	movs	r2, #0
 8002460:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	3304      	adds	r3, #4
 8002466:	60fb      	str	r3, [r7, #12]
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800246e:	68fa      	ldr	r2, [r7, #12]
 8002470:	429a      	cmp	r2, r3
 8002472:	d3f3      	bcc.n	800245c <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8002474:	2300      	movs	r3, #0
}
 8002476:	4618      	mov	r0, r3
 8002478:	3714      	adds	r7, #20
 800247a:	46bd      	mov	sp, r7
 800247c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002480:	4770      	bx	lr
 8002482:	bf00      	nop

08002484 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002484:	b480      	push	{r7}
 8002486:	b089      	sub	sp, #36	; 0x24
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
 800248c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800248e:	2300      	movs	r3, #0
 8002490:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002492:	4b89      	ldr	r3, [pc, #548]	; (80026b8 <HAL_GPIO_Init+0x234>)
 8002494:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002496:	e194      	b.n	80027c2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	681a      	ldr	r2, [r3, #0]
 800249c:	2101      	movs	r1, #1
 800249e:	69fb      	ldr	r3, [r7, #28]
 80024a0:	fa01 f303 	lsl.w	r3, r1, r3
 80024a4:	4013      	ands	r3, r2
 80024a6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80024a8:	693b      	ldr	r3, [r7, #16]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	f000 8186 	beq.w	80027bc <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	2b01      	cmp	r3, #1
 80024b6:	d00b      	beq.n	80024d0 <HAL_GPIO_Init+0x4c>
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	2b02      	cmp	r3, #2
 80024be:	d007      	beq.n	80024d0 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80024c4:	2b11      	cmp	r3, #17
 80024c6:	d003      	beq.n	80024d0 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	2b12      	cmp	r3, #18
 80024ce:	d130      	bne.n	8002532 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	689b      	ldr	r3, [r3, #8]
 80024d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80024d6:	69fb      	ldr	r3, [r7, #28]
 80024d8:	005b      	lsls	r3, r3, #1
 80024da:	2203      	movs	r2, #3
 80024dc:	fa02 f303 	lsl.w	r3, r2, r3
 80024e0:	43db      	mvns	r3, r3
 80024e2:	69ba      	ldr	r2, [r7, #24]
 80024e4:	4013      	ands	r3, r2
 80024e6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	68da      	ldr	r2, [r3, #12]
 80024ec:	69fb      	ldr	r3, [r7, #28]
 80024ee:	005b      	lsls	r3, r3, #1
 80024f0:	fa02 f303 	lsl.w	r3, r2, r3
 80024f4:	69ba      	ldr	r2, [r7, #24]
 80024f6:	4313      	orrs	r3, r2
 80024f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	69ba      	ldr	r2, [r7, #24]
 80024fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002506:	2201      	movs	r2, #1
 8002508:	69fb      	ldr	r3, [r7, #28]
 800250a:	fa02 f303 	lsl.w	r3, r2, r3
 800250e:	43db      	mvns	r3, r3
 8002510:	69ba      	ldr	r2, [r7, #24]
 8002512:	4013      	ands	r3, r2
 8002514:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	091b      	lsrs	r3, r3, #4
 800251c:	f003 0201 	and.w	r2, r3, #1
 8002520:	69fb      	ldr	r3, [r7, #28]
 8002522:	fa02 f303 	lsl.w	r3, r2, r3
 8002526:	69ba      	ldr	r2, [r7, #24]
 8002528:	4313      	orrs	r3, r2
 800252a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	69ba      	ldr	r2, [r7, #24]
 8002530:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	68db      	ldr	r3, [r3, #12]
 8002536:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002538:	69fb      	ldr	r3, [r7, #28]
 800253a:	005b      	lsls	r3, r3, #1
 800253c:	2203      	movs	r2, #3
 800253e:	fa02 f303 	lsl.w	r3, r2, r3
 8002542:	43db      	mvns	r3, r3
 8002544:	69ba      	ldr	r2, [r7, #24]
 8002546:	4013      	ands	r3, r2
 8002548:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	689a      	ldr	r2, [r3, #8]
 800254e:	69fb      	ldr	r3, [r7, #28]
 8002550:	005b      	lsls	r3, r3, #1
 8002552:	fa02 f303 	lsl.w	r3, r2, r3
 8002556:	69ba      	ldr	r2, [r7, #24]
 8002558:	4313      	orrs	r3, r2
 800255a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	69ba      	ldr	r2, [r7, #24]
 8002560:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	2b02      	cmp	r3, #2
 8002568:	d003      	beq.n	8002572 <HAL_GPIO_Init+0xee>
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	2b12      	cmp	r3, #18
 8002570:	d123      	bne.n	80025ba <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002572:	69fb      	ldr	r3, [r7, #28]
 8002574:	08da      	lsrs	r2, r3, #3
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	3208      	adds	r2, #8
 800257a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800257e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002580:	69fb      	ldr	r3, [r7, #28]
 8002582:	f003 0307 	and.w	r3, r3, #7
 8002586:	009b      	lsls	r3, r3, #2
 8002588:	220f      	movs	r2, #15
 800258a:	fa02 f303 	lsl.w	r3, r2, r3
 800258e:	43db      	mvns	r3, r3
 8002590:	69ba      	ldr	r2, [r7, #24]
 8002592:	4013      	ands	r3, r2
 8002594:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	691a      	ldr	r2, [r3, #16]
 800259a:	69fb      	ldr	r3, [r7, #28]
 800259c:	f003 0307 	and.w	r3, r3, #7
 80025a0:	009b      	lsls	r3, r3, #2
 80025a2:	fa02 f303 	lsl.w	r3, r2, r3
 80025a6:	69ba      	ldr	r2, [r7, #24]
 80025a8:	4313      	orrs	r3, r2
 80025aa:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80025ac:	69fb      	ldr	r3, [r7, #28]
 80025ae:	08da      	lsrs	r2, r3, #3
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	3208      	adds	r2, #8
 80025b4:	69b9      	ldr	r1, [r7, #24]
 80025b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80025c0:	69fb      	ldr	r3, [r7, #28]
 80025c2:	005b      	lsls	r3, r3, #1
 80025c4:	2203      	movs	r2, #3
 80025c6:	fa02 f303 	lsl.w	r3, r2, r3
 80025ca:	43db      	mvns	r3, r3
 80025cc:	69ba      	ldr	r2, [r7, #24]
 80025ce:	4013      	ands	r3, r2
 80025d0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	f003 0203 	and.w	r2, r3, #3
 80025da:	69fb      	ldr	r3, [r7, #28]
 80025dc:	005b      	lsls	r3, r3, #1
 80025de:	fa02 f303 	lsl.w	r3, r2, r3
 80025e2:	69ba      	ldr	r2, [r7, #24]
 80025e4:	4313      	orrs	r3, r2
 80025e6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	69ba      	ldr	r2, [r7, #24]
 80025ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	f000 80e0 	beq.w	80027bc <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025fc:	4b2f      	ldr	r3, [pc, #188]	; (80026bc <HAL_GPIO_Init+0x238>)
 80025fe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002602:	4a2e      	ldr	r2, [pc, #184]	; (80026bc <HAL_GPIO_Init+0x238>)
 8002604:	f043 0302 	orr.w	r3, r3, #2
 8002608:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800260c:	4b2b      	ldr	r3, [pc, #172]	; (80026bc <HAL_GPIO_Init+0x238>)
 800260e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002612:	f003 0302 	and.w	r3, r3, #2
 8002616:	60fb      	str	r3, [r7, #12]
 8002618:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800261a:	4a29      	ldr	r2, [pc, #164]	; (80026c0 <HAL_GPIO_Init+0x23c>)
 800261c:	69fb      	ldr	r3, [r7, #28]
 800261e:	089b      	lsrs	r3, r3, #2
 8002620:	3302      	adds	r3, #2
 8002622:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002626:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002628:	69fb      	ldr	r3, [r7, #28]
 800262a:	f003 0303 	and.w	r3, r3, #3
 800262e:	009b      	lsls	r3, r3, #2
 8002630:	220f      	movs	r2, #15
 8002632:	fa02 f303 	lsl.w	r3, r2, r3
 8002636:	43db      	mvns	r3, r3
 8002638:	69ba      	ldr	r2, [r7, #24]
 800263a:	4013      	ands	r3, r2
 800263c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	4a20      	ldr	r2, [pc, #128]	; (80026c4 <HAL_GPIO_Init+0x240>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d052      	beq.n	80026ec <HAL_GPIO_Init+0x268>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	4a1f      	ldr	r2, [pc, #124]	; (80026c8 <HAL_GPIO_Init+0x244>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d031      	beq.n	80026b2 <HAL_GPIO_Init+0x22e>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	4a1e      	ldr	r2, [pc, #120]	; (80026cc <HAL_GPIO_Init+0x248>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d02b      	beq.n	80026ae <HAL_GPIO_Init+0x22a>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	4a1d      	ldr	r2, [pc, #116]	; (80026d0 <HAL_GPIO_Init+0x24c>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d025      	beq.n	80026aa <HAL_GPIO_Init+0x226>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	4a1c      	ldr	r2, [pc, #112]	; (80026d4 <HAL_GPIO_Init+0x250>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d01f      	beq.n	80026a6 <HAL_GPIO_Init+0x222>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	4a1b      	ldr	r2, [pc, #108]	; (80026d8 <HAL_GPIO_Init+0x254>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d019      	beq.n	80026a2 <HAL_GPIO_Init+0x21e>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	4a1a      	ldr	r2, [pc, #104]	; (80026dc <HAL_GPIO_Init+0x258>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d013      	beq.n	800269e <HAL_GPIO_Init+0x21a>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	4a19      	ldr	r2, [pc, #100]	; (80026e0 <HAL_GPIO_Init+0x25c>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d00d      	beq.n	800269a <HAL_GPIO_Init+0x216>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	4a18      	ldr	r2, [pc, #96]	; (80026e4 <HAL_GPIO_Init+0x260>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d007      	beq.n	8002696 <HAL_GPIO_Init+0x212>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	4a17      	ldr	r2, [pc, #92]	; (80026e8 <HAL_GPIO_Init+0x264>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d101      	bne.n	8002692 <HAL_GPIO_Init+0x20e>
 800268e:	2309      	movs	r3, #9
 8002690:	e02d      	b.n	80026ee <HAL_GPIO_Init+0x26a>
 8002692:	230a      	movs	r3, #10
 8002694:	e02b      	b.n	80026ee <HAL_GPIO_Init+0x26a>
 8002696:	2308      	movs	r3, #8
 8002698:	e029      	b.n	80026ee <HAL_GPIO_Init+0x26a>
 800269a:	2307      	movs	r3, #7
 800269c:	e027      	b.n	80026ee <HAL_GPIO_Init+0x26a>
 800269e:	2306      	movs	r3, #6
 80026a0:	e025      	b.n	80026ee <HAL_GPIO_Init+0x26a>
 80026a2:	2305      	movs	r3, #5
 80026a4:	e023      	b.n	80026ee <HAL_GPIO_Init+0x26a>
 80026a6:	2304      	movs	r3, #4
 80026a8:	e021      	b.n	80026ee <HAL_GPIO_Init+0x26a>
 80026aa:	2303      	movs	r3, #3
 80026ac:	e01f      	b.n	80026ee <HAL_GPIO_Init+0x26a>
 80026ae:	2302      	movs	r3, #2
 80026b0:	e01d      	b.n	80026ee <HAL_GPIO_Init+0x26a>
 80026b2:	2301      	movs	r3, #1
 80026b4:	e01b      	b.n	80026ee <HAL_GPIO_Init+0x26a>
 80026b6:	bf00      	nop
 80026b8:	58000080 	.word	0x58000080
 80026bc:	58024400 	.word	0x58024400
 80026c0:	58000400 	.word	0x58000400
 80026c4:	58020000 	.word	0x58020000
 80026c8:	58020400 	.word	0x58020400
 80026cc:	58020800 	.word	0x58020800
 80026d0:	58020c00 	.word	0x58020c00
 80026d4:	58021000 	.word	0x58021000
 80026d8:	58021400 	.word	0x58021400
 80026dc:	58021800 	.word	0x58021800
 80026e0:	58021c00 	.word	0x58021c00
 80026e4:	58022000 	.word	0x58022000
 80026e8:	58022400 	.word	0x58022400
 80026ec:	2300      	movs	r3, #0
 80026ee:	69fa      	ldr	r2, [r7, #28]
 80026f0:	f002 0203 	and.w	r2, r2, #3
 80026f4:	0092      	lsls	r2, r2, #2
 80026f6:	4093      	lsls	r3, r2
 80026f8:	69ba      	ldr	r2, [r7, #24]
 80026fa:	4313      	orrs	r3, r2
 80026fc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80026fe:	4938      	ldr	r1, [pc, #224]	; (80027e0 <HAL_GPIO_Init+0x35c>)
 8002700:	69fb      	ldr	r3, [r7, #28]
 8002702:	089b      	lsrs	r3, r3, #2
 8002704:	3302      	adds	r3, #2
 8002706:	69ba      	ldr	r2, [r7, #24]
 8002708:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800270c:	697b      	ldr	r3, [r7, #20]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002712:	693b      	ldr	r3, [r7, #16]
 8002714:	43db      	mvns	r3, r3
 8002716:	69ba      	ldr	r2, [r7, #24]
 8002718:	4013      	ands	r3, r2
 800271a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002724:	2b00      	cmp	r3, #0
 8002726:	d003      	beq.n	8002730 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002728:	69ba      	ldr	r2, [r7, #24]
 800272a:	693b      	ldr	r3, [r7, #16]
 800272c:	4313      	orrs	r3, r2
 800272e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002730:	697b      	ldr	r3, [r7, #20]
 8002732:	69ba      	ldr	r2, [r7, #24]
 8002734:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800273c:	693b      	ldr	r3, [r7, #16]
 800273e:	43db      	mvns	r3, r3
 8002740:	69ba      	ldr	r2, [r7, #24]
 8002742:	4013      	ands	r3, r2
 8002744:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800274e:	2b00      	cmp	r3, #0
 8002750:	d003      	beq.n	800275a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002752:	69ba      	ldr	r2, [r7, #24]
 8002754:	693b      	ldr	r3, [r7, #16]
 8002756:	4313      	orrs	r3, r2
 8002758:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800275a:	697b      	ldr	r3, [r7, #20]
 800275c:	69ba      	ldr	r2, [r7, #24]
 800275e:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002760:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002768:	693b      	ldr	r3, [r7, #16]
 800276a:	43db      	mvns	r3, r3
 800276c:	69ba      	ldr	r2, [r7, #24]
 800276e:	4013      	ands	r3, r2
 8002770:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800277a:	2b00      	cmp	r3, #0
 800277c:	d003      	beq.n	8002786 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 800277e:	69ba      	ldr	r2, [r7, #24]
 8002780:	693b      	ldr	r3, [r7, #16]
 8002782:	4313      	orrs	r3, r2
 8002784:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002786:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800278a:	69bb      	ldr	r3, [r7, #24]
 800278c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800278e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002796:	693b      	ldr	r3, [r7, #16]
 8002798:	43db      	mvns	r3, r3
 800279a:	69ba      	ldr	r2, [r7, #24]
 800279c:	4013      	ands	r3, r2
 800279e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d003      	beq.n	80027b4 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 80027ac:	69ba      	ldr	r2, [r7, #24]
 80027ae:	693b      	ldr	r3, [r7, #16]
 80027b0:	4313      	orrs	r3, r2
 80027b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80027b4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80027b8:	69bb      	ldr	r3, [r7, #24]
 80027ba:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 80027bc:	69fb      	ldr	r3, [r7, #28]
 80027be:	3301      	adds	r3, #1
 80027c0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	681a      	ldr	r2, [r3, #0]
 80027c6:	69fb      	ldr	r3, [r7, #28]
 80027c8:	fa22 f303 	lsr.w	r3, r2, r3
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	f47f ae63 	bne.w	8002498 <HAL_GPIO_Init+0x14>
  }
}
 80027d2:	bf00      	nop
 80027d4:	3724      	adds	r7, #36	; 0x24
 80027d6:	46bd      	mov	sp, r7
 80027d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027dc:	4770      	bx	lr
 80027de:	bf00      	nop
 80027e0:	58000400 	.word	0x58000400

080027e4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b084      	sub	sp, #16
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80027ec:	4b19      	ldr	r3, [pc, #100]	; (8002854 <HAL_PWREx_ConfigSupply+0x70>)
 80027ee:	68db      	ldr	r3, [r3, #12]
 80027f0:	f003 0304 	and.w	r3, r3, #4
 80027f4:	2b04      	cmp	r3, #4
 80027f6:	d00a      	beq.n	800280e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80027f8:	4b16      	ldr	r3, [pc, #88]	; (8002854 <HAL_PWREx_ConfigSupply+0x70>)
 80027fa:	68db      	ldr	r3, [r3, #12]
 80027fc:	f003 0307 	and.w	r3, r3, #7
 8002800:	687a      	ldr	r2, [r7, #4]
 8002802:	429a      	cmp	r2, r3
 8002804:	d001      	beq.n	800280a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002806:	2301      	movs	r3, #1
 8002808:	e01f      	b.n	800284a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800280a:	2300      	movs	r3, #0
 800280c:	e01d      	b.n	800284a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800280e:	4b11      	ldr	r3, [pc, #68]	; (8002854 <HAL_PWREx_ConfigSupply+0x70>)
 8002810:	68db      	ldr	r3, [r3, #12]
 8002812:	f023 0207 	bic.w	r2, r3, #7
 8002816:	490f      	ldr	r1, [pc, #60]	; (8002854 <HAL_PWREx_ConfigSupply+0x70>)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	4313      	orrs	r3, r2
 800281c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800281e:	f7fe fbc3 	bl	8000fa8 <HAL_GetTick>
 8002822:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002824:	e009      	b.n	800283a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002826:	f7fe fbbf 	bl	8000fa8 <HAL_GetTick>
 800282a:	4602      	mov	r2, r0
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	1ad3      	subs	r3, r2, r3
 8002830:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002834:	d901      	bls.n	800283a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002836:	2301      	movs	r3, #1
 8002838:	e007      	b.n	800284a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800283a:	4b06      	ldr	r3, [pc, #24]	; (8002854 <HAL_PWREx_ConfigSupply+0x70>)
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002842:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002846:	d1ee      	bne.n	8002826 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002848:	2300      	movs	r3, #0
}
 800284a:	4618      	mov	r0, r3
 800284c:	3710      	adds	r7, #16
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}
 8002852:	bf00      	nop
 8002854:	58024800 	.word	0x58024800

08002858 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b08c      	sub	sp, #48	; 0x30
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d101      	bne.n	800286a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002866:	2301      	movs	r3, #1
 8002868:	e3ff      	b.n	800306a <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f003 0301 	and.w	r3, r3, #1
 8002872:	2b00      	cmp	r3, #0
 8002874:	f000 8087 	beq.w	8002986 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002878:	4b99      	ldr	r3, [pc, #612]	; (8002ae0 <HAL_RCC_OscConfig+0x288>)
 800287a:	691b      	ldr	r3, [r3, #16]
 800287c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002880:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002882:	4b97      	ldr	r3, [pc, #604]	; (8002ae0 <HAL_RCC_OscConfig+0x288>)
 8002884:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002886:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002888:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800288a:	2b10      	cmp	r3, #16
 800288c:	d007      	beq.n	800289e <HAL_RCC_OscConfig+0x46>
 800288e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002890:	2b18      	cmp	r3, #24
 8002892:	d110      	bne.n	80028b6 <HAL_RCC_OscConfig+0x5e>
 8002894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002896:	f003 0303 	and.w	r3, r3, #3
 800289a:	2b02      	cmp	r3, #2
 800289c:	d10b      	bne.n	80028b6 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800289e:	4b90      	ldr	r3, [pc, #576]	; (8002ae0 <HAL_RCC_OscConfig+0x288>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d06c      	beq.n	8002984 <HAL_RCC_OscConfig+0x12c>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d168      	bne.n	8002984 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80028b2:	2301      	movs	r3, #1
 80028b4:	e3d9      	b.n	800306a <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028be:	d106      	bne.n	80028ce <HAL_RCC_OscConfig+0x76>
 80028c0:	4b87      	ldr	r3, [pc, #540]	; (8002ae0 <HAL_RCC_OscConfig+0x288>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a86      	ldr	r2, [pc, #536]	; (8002ae0 <HAL_RCC_OscConfig+0x288>)
 80028c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028ca:	6013      	str	r3, [r2, #0]
 80028cc:	e02e      	b.n	800292c <HAL_RCC_OscConfig+0xd4>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d10c      	bne.n	80028f0 <HAL_RCC_OscConfig+0x98>
 80028d6:	4b82      	ldr	r3, [pc, #520]	; (8002ae0 <HAL_RCC_OscConfig+0x288>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4a81      	ldr	r2, [pc, #516]	; (8002ae0 <HAL_RCC_OscConfig+0x288>)
 80028dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028e0:	6013      	str	r3, [r2, #0]
 80028e2:	4b7f      	ldr	r3, [pc, #508]	; (8002ae0 <HAL_RCC_OscConfig+0x288>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4a7e      	ldr	r2, [pc, #504]	; (8002ae0 <HAL_RCC_OscConfig+0x288>)
 80028e8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028ec:	6013      	str	r3, [r2, #0]
 80028ee:	e01d      	b.n	800292c <HAL_RCC_OscConfig+0xd4>
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80028f8:	d10c      	bne.n	8002914 <HAL_RCC_OscConfig+0xbc>
 80028fa:	4b79      	ldr	r3, [pc, #484]	; (8002ae0 <HAL_RCC_OscConfig+0x288>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4a78      	ldr	r2, [pc, #480]	; (8002ae0 <HAL_RCC_OscConfig+0x288>)
 8002900:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002904:	6013      	str	r3, [r2, #0]
 8002906:	4b76      	ldr	r3, [pc, #472]	; (8002ae0 <HAL_RCC_OscConfig+0x288>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a75      	ldr	r2, [pc, #468]	; (8002ae0 <HAL_RCC_OscConfig+0x288>)
 800290c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002910:	6013      	str	r3, [r2, #0]
 8002912:	e00b      	b.n	800292c <HAL_RCC_OscConfig+0xd4>
 8002914:	4b72      	ldr	r3, [pc, #456]	; (8002ae0 <HAL_RCC_OscConfig+0x288>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a71      	ldr	r2, [pc, #452]	; (8002ae0 <HAL_RCC_OscConfig+0x288>)
 800291a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800291e:	6013      	str	r3, [r2, #0]
 8002920:	4b6f      	ldr	r3, [pc, #444]	; (8002ae0 <HAL_RCC_OscConfig+0x288>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4a6e      	ldr	r2, [pc, #440]	; (8002ae0 <HAL_RCC_OscConfig+0x288>)
 8002926:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800292a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d013      	beq.n	800295c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002934:	f7fe fb38 	bl	8000fa8 <HAL_GetTick>
 8002938:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800293a:	e008      	b.n	800294e <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800293c:	f7fe fb34 	bl	8000fa8 <HAL_GetTick>
 8002940:	4602      	mov	r2, r0
 8002942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002944:	1ad3      	subs	r3, r2, r3
 8002946:	2b64      	cmp	r3, #100	; 0x64
 8002948:	d901      	bls.n	800294e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800294a:	2303      	movs	r3, #3
 800294c:	e38d      	b.n	800306a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800294e:	4b64      	ldr	r3, [pc, #400]	; (8002ae0 <HAL_RCC_OscConfig+0x288>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002956:	2b00      	cmp	r3, #0
 8002958:	d0f0      	beq.n	800293c <HAL_RCC_OscConfig+0xe4>
 800295a:	e014      	b.n	8002986 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800295c:	f7fe fb24 	bl	8000fa8 <HAL_GetTick>
 8002960:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002962:	e008      	b.n	8002976 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002964:	f7fe fb20 	bl	8000fa8 <HAL_GetTick>
 8002968:	4602      	mov	r2, r0
 800296a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800296c:	1ad3      	subs	r3, r2, r3
 800296e:	2b64      	cmp	r3, #100	; 0x64
 8002970:	d901      	bls.n	8002976 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002972:	2303      	movs	r3, #3
 8002974:	e379      	b.n	800306a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002976:	4b5a      	ldr	r3, [pc, #360]	; (8002ae0 <HAL_RCC_OscConfig+0x288>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800297e:	2b00      	cmp	r3, #0
 8002980:	d1f0      	bne.n	8002964 <HAL_RCC_OscConfig+0x10c>
 8002982:	e000      	b.n	8002986 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002984:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f003 0302 	and.w	r3, r3, #2
 800298e:	2b00      	cmp	r3, #0
 8002990:	f000 80ae 	beq.w	8002af0 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002994:	4b52      	ldr	r3, [pc, #328]	; (8002ae0 <HAL_RCC_OscConfig+0x288>)
 8002996:	691b      	ldr	r3, [r3, #16]
 8002998:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800299c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800299e:	4b50      	ldr	r3, [pc, #320]	; (8002ae0 <HAL_RCC_OscConfig+0x288>)
 80029a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029a2:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80029a4:	6a3b      	ldr	r3, [r7, #32]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d007      	beq.n	80029ba <HAL_RCC_OscConfig+0x162>
 80029aa:	6a3b      	ldr	r3, [r7, #32]
 80029ac:	2b18      	cmp	r3, #24
 80029ae:	d13a      	bne.n	8002a26 <HAL_RCC_OscConfig+0x1ce>
 80029b0:	69fb      	ldr	r3, [r7, #28]
 80029b2:	f003 0303 	and.w	r3, r3, #3
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d135      	bne.n	8002a26 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80029ba:	4b49      	ldr	r3, [pc, #292]	; (8002ae0 <HAL_RCC_OscConfig+0x288>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f003 0304 	and.w	r3, r3, #4
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d005      	beq.n	80029d2 <HAL_RCC_OscConfig+0x17a>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	68db      	ldr	r3, [r3, #12]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d101      	bne.n	80029d2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80029ce:	2301      	movs	r3, #1
 80029d0:	e34b      	b.n	800306a <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029d2:	f7fe faf5 	bl	8000fc0 <HAL_GetREVID>
 80029d6:	4602      	mov	r2, r0
 80029d8:	f241 0303 	movw	r3, #4099	; 0x1003
 80029dc:	429a      	cmp	r2, r3
 80029de:	d817      	bhi.n	8002a10 <HAL_RCC_OscConfig+0x1b8>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	691b      	ldr	r3, [r3, #16]
 80029e4:	2b40      	cmp	r3, #64	; 0x40
 80029e6:	d108      	bne.n	80029fa <HAL_RCC_OscConfig+0x1a2>
 80029e8:	4b3d      	ldr	r3, [pc, #244]	; (8002ae0 <HAL_RCC_OscConfig+0x288>)
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80029f0:	4a3b      	ldr	r2, [pc, #236]	; (8002ae0 <HAL_RCC_OscConfig+0x288>)
 80029f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029f6:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80029f8:	e07a      	b.n	8002af0 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029fa:	4b39      	ldr	r3, [pc, #228]	; (8002ae0 <HAL_RCC_OscConfig+0x288>)
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	691b      	ldr	r3, [r3, #16]
 8002a06:	031b      	lsls	r3, r3, #12
 8002a08:	4935      	ldr	r1, [pc, #212]	; (8002ae0 <HAL_RCC_OscConfig+0x288>)
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a0e:	e06f      	b.n	8002af0 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a10:	4b33      	ldr	r3, [pc, #204]	; (8002ae0 <HAL_RCC_OscConfig+0x288>)
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	691b      	ldr	r3, [r3, #16]
 8002a1c:	061b      	lsls	r3, r3, #24
 8002a1e:	4930      	ldr	r1, [pc, #192]	; (8002ae0 <HAL_RCC_OscConfig+0x288>)
 8002a20:	4313      	orrs	r3, r2
 8002a22:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a24:	e064      	b.n	8002af0 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	68db      	ldr	r3, [r3, #12]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d045      	beq.n	8002aba <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002a2e:	4b2c      	ldr	r3, [pc, #176]	; (8002ae0 <HAL_RCC_OscConfig+0x288>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f023 0219 	bic.w	r2, r3, #25
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	68db      	ldr	r3, [r3, #12]
 8002a3a:	4929      	ldr	r1, [pc, #164]	; (8002ae0 <HAL_RCC_OscConfig+0x288>)
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a40:	f7fe fab2 	bl	8000fa8 <HAL_GetTick>
 8002a44:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002a46:	e008      	b.n	8002a5a <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a48:	f7fe faae 	bl	8000fa8 <HAL_GetTick>
 8002a4c:	4602      	mov	r2, r0
 8002a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a50:	1ad3      	subs	r3, r2, r3
 8002a52:	2b02      	cmp	r3, #2
 8002a54:	d901      	bls.n	8002a5a <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8002a56:	2303      	movs	r3, #3
 8002a58:	e307      	b.n	800306a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002a5a:	4b21      	ldr	r3, [pc, #132]	; (8002ae0 <HAL_RCC_OscConfig+0x288>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f003 0304 	and.w	r3, r3, #4
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d0f0      	beq.n	8002a48 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a66:	f7fe faab 	bl	8000fc0 <HAL_GetREVID>
 8002a6a:	4602      	mov	r2, r0
 8002a6c:	f241 0303 	movw	r3, #4099	; 0x1003
 8002a70:	429a      	cmp	r2, r3
 8002a72:	d817      	bhi.n	8002aa4 <HAL_RCC_OscConfig+0x24c>
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	691b      	ldr	r3, [r3, #16]
 8002a78:	2b40      	cmp	r3, #64	; 0x40
 8002a7a:	d108      	bne.n	8002a8e <HAL_RCC_OscConfig+0x236>
 8002a7c:	4b18      	ldr	r3, [pc, #96]	; (8002ae0 <HAL_RCC_OscConfig+0x288>)
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002a84:	4a16      	ldr	r2, [pc, #88]	; (8002ae0 <HAL_RCC_OscConfig+0x288>)
 8002a86:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a8a:	6053      	str	r3, [r2, #4]
 8002a8c:	e030      	b.n	8002af0 <HAL_RCC_OscConfig+0x298>
 8002a8e:	4b14      	ldr	r3, [pc, #80]	; (8002ae0 <HAL_RCC_OscConfig+0x288>)
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	691b      	ldr	r3, [r3, #16]
 8002a9a:	031b      	lsls	r3, r3, #12
 8002a9c:	4910      	ldr	r1, [pc, #64]	; (8002ae0 <HAL_RCC_OscConfig+0x288>)
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	604b      	str	r3, [r1, #4]
 8002aa2:	e025      	b.n	8002af0 <HAL_RCC_OscConfig+0x298>
 8002aa4:	4b0e      	ldr	r3, [pc, #56]	; (8002ae0 <HAL_RCC_OscConfig+0x288>)
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	691b      	ldr	r3, [r3, #16]
 8002ab0:	061b      	lsls	r3, r3, #24
 8002ab2:	490b      	ldr	r1, [pc, #44]	; (8002ae0 <HAL_RCC_OscConfig+0x288>)
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	604b      	str	r3, [r1, #4]
 8002ab8:	e01a      	b.n	8002af0 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002aba:	4b09      	ldr	r3, [pc, #36]	; (8002ae0 <HAL_RCC_OscConfig+0x288>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4a08      	ldr	r2, [pc, #32]	; (8002ae0 <HAL_RCC_OscConfig+0x288>)
 8002ac0:	f023 0301 	bic.w	r3, r3, #1
 8002ac4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ac6:	f7fe fa6f 	bl	8000fa8 <HAL_GetTick>
 8002aca:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002acc:	e00a      	b.n	8002ae4 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ace:	f7fe fa6b 	bl	8000fa8 <HAL_GetTick>
 8002ad2:	4602      	mov	r2, r0
 8002ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad6:	1ad3      	subs	r3, r2, r3
 8002ad8:	2b02      	cmp	r3, #2
 8002ada:	d903      	bls.n	8002ae4 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8002adc:	2303      	movs	r3, #3
 8002ade:	e2c4      	b.n	800306a <HAL_RCC_OscConfig+0x812>
 8002ae0:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002ae4:	4ba4      	ldr	r3, [pc, #656]	; (8002d78 <HAL_RCC_OscConfig+0x520>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f003 0304 	and.w	r3, r3, #4
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d1ee      	bne.n	8002ace <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f003 0310 	and.w	r3, r3, #16
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	f000 80a9 	beq.w	8002c50 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002afe:	4b9e      	ldr	r3, [pc, #632]	; (8002d78 <HAL_RCC_OscConfig+0x520>)
 8002b00:	691b      	ldr	r3, [r3, #16]
 8002b02:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002b06:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002b08:	4b9b      	ldr	r3, [pc, #620]	; (8002d78 <HAL_RCC_OscConfig+0x520>)
 8002b0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b0c:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002b0e:	69bb      	ldr	r3, [r7, #24]
 8002b10:	2b08      	cmp	r3, #8
 8002b12:	d007      	beq.n	8002b24 <HAL_RCC_OscConfig+0x2cc>
 8002b14:	69bb      	ldr	r3, [r7, #24]
 8002b16:	2b18      	cmp	r3, #24
 8002b18:	d13a      	bne.n	8002b90 <HAL_RCC_OscConfig+0x338>
 8002b1a:	697b      	ldr	r3, [r7, #20]
 8002b1c:	f003 0303 	and.w	r3, r3, #3
 8002b20:	2b01      	cmp	r3, #1
 8002b22:	d135      	bne.n	8002b90 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002b24:	4b94      	ldr	r3, [pc, #592]	; (8002d78 <HAL_RCC_OscConfig+0x520>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d005      	beq.n	8002b3c <HAL_RCC_OscConfig+0x2e4>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	69db      	ldr	r3, [r3, #28]
 8002b34:	2b80      	cmp	r3, #128	; 0x80
 8002b36:	d001      	beq.n	8002b3c <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8002b38:	2301      	movs	r3, #1
 8002b3a:	e296      	b.n	800306a <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002b3c:	f7fe fa40 	bl	8000fc0 <HAL_GetREVID>
 8002b40:	4602      	mov	r2, r0
 8002b42:	f241 0303 	movw	r3, #4099	; 0x1003
 8002b46:	429a      	cmp	r2, r3
 8002b48:	d817      	bhi.n	8002b7a <HAL_RCC_OscConfig+0x322>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6a1b      	ldr	r3, [r3, #32]
 8002b4e:	2b20      	cmp	r3, #32
 8002b50:	d108      	bne.n	8002b64 <HAL_RCC_OscConfig+0x30c>
 8002b52:	4b89      	ldr	r3, [pc, #548]	; (8002d78 <HAL_RCC_OscConfig+0x520>)
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002b5a:	4a87      	ldr	r2, [pc, #540]	; (8002d78 <HAL_RCC_OscConfig+0x520>)
 8002b5c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002b60:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002b62:	e075      	b.n	8002c50 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002b64:	4b84      	ldr	r3, [pc, #528]	; (8002d78 <HAL_RCC_OscConfig+0x520>)
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6a1b      	ldr	r3, [r3, #32]
 8002b70:	069b      	lsls	r3, r3, #26
 8002b72:	4981      	ldr	r1, [pc, #516]	; (8002d78 <HAL_RCC_OscConfig+0x520>)
 8002b74:	4313      	orrs	r3, r2
 8002b76:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002b78:	e06a      	b.n	8002c50 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002b7a:	4b7f      	ldr	r3, [pc, #508]	; (8002d78 <HAL_RCC_OscConfig+0x520>)
 8002b7c:	68db      	ldr	r3, [r3, #12]
 8002b7e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6a1b      	ldr	r3, [r3, #32]
 8002b86:	061b      	lsls	r3, r3, #24
 8002b88:	497b      	ldr	r1, [pc, #492]	; (8002d78 <HAL_RCC_OscConfig+0x520>)
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002b8e:	e05f      	b.n	8002c50 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	69db      	ldr	r3, [r3, #28]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d042      	beq.n	8002c1e <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002b98:	4b77      	ldr	r3, [pc, #476]	; (8002d78 <HAL_RCC_OscConfig+0x520>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a76      	ldr	r2, [pc, #472]	; (8002d78 <HAL_RCC_OscConfig+0x520>)
 8002b9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ba2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ba4:	f7fe fa00 	bl	8000fa8 <HAL_GetTick>
 8002ba8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002baa:	e008      	b.n	8002bbe <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002bac:	f7fe f9fc 	bl	8000fa8 <HAL_GetTick>
 8002bb0:	4602      	mov	r2, r0
 8002bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb4:	1ad3      	subs	r3, r2, r3
 8002bb6:	2b02      	cmp	r3, #2
 8002bb8:	d901      	bls.n	8002bbe <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8002bba:	2303      	movs	r3, #3
 8002bbc:	e255      	b.n	800306a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002bbe:	4b6e      	ldr	r3, [pc, #440]	; (8002d78 <HAL_RCC_OscConfig+0x520>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d0f0      	beq.n	8002bac <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002bca:	f7fe f9f9 	bl	8000fc0 <HAL_GetREVID>
 8002bce:	4602      	mov	r2, r0
 8002bd0:	f241 0303 	movw	r3, #4099	; 0x1003
 8002bd4:	429a      	cmp	r2, r3
 8002bd6:	d817      	bhi.n	8002c08 <HAL_RCC_OscConfig+0x3b0>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6a1b      	ldr	r3, [r3, #32]
 8002bdc:	2b20      	cmp	r3, #32
 8002bde:	d108      	bne.n	8002bf2 <HAL_RCC_OscConfig+0x39a>
 8002be0:	4b65      	ldr	r3, [pc, #404]	; (8002d78 <HAL_RCC_OscConfig+0x520>)
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002be8:	4a63      	ldr	r2, [pc, #396]	; (8002d78 <HAL_RCC_OscConfig+0x520>)
 8002bea:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002bee:	6053      	str	r3, [r2, #4]
 8002bf0:	e02e      	b.n	8002c50 <HAL_RCC_OscConfig+0x3f8>
 8002bf2:	4b61      	ldr	r3, [pc, #388]	; (8002d78 <HAL_RCC_OscConfig+0x520>)
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6a1b      	ldr	r3, [r3, #32]
 8002bfe:	069b      	lsls	r3, r3, #26
 8002c00:	495d      	ldr	r1, [pc, #372]	; (8002d78 <HAL_RCC_OscConfig+0x520>)
 8002c02:	4313      	orrs	r3, r2
 8002c04:	604b      	str	r3, [r1, #4]
 8002c06:	e023      	b.n	8002c50 <HAL_RCC_OscConfig+0x3f8>
 8002c08:	4b5b      	ldr	r3, [pc, #364]	; (8002d78 <HAL_RCC_OscConfig+0x520>)
 8002c0a:	68db      	ldr	r3, [r3, #12]
 8002c0c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6a1b      	ldr	r3, [r3, #32]
 8002c14:	061b      	lsls	r3, r3, #24
 8002c16:	4958      	ldr	r1, [pc, #352]	; (8002d78 <HAL_RCC_OscConfig+0x520>)
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	60cb      	str	r3, [r1, #12]
 8002c1c:	e018      	b.n	8002c50 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002c1e:	4b56      	ldr	r3, [pc, #344]	; (8002d78 <HAL_RCC_OscConfig+0x520>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4a55      	ldr	r2, [pc, #340]	; (8002d78 <HAL_RCC_OscConfig+0x520>)
 8002c24:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002c28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c2a:	f7fe f9bd 	bl	8000fa8 <HAL_GetTick>
 8002c2e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002c30:	e008      	b.n	8002c44 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002c32:	f7fe f9b9 	bl	8000fa8 <HAL_GetTick>
 8002c36:	4602      	mov	r2, r0
 8002c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c3a:	1ad3      	subs	r3, r2, r3
 8002c3c:	2b02      	cmp	r3, #2
 8002c3e:	d901      	bls.n	8002c44 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8002c40:	2303      	movs	r3, #3
 8002c42:	e212      	b.n	800306a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002c44:	4b4c      	ldr	r3, [pc, #304]	; (8002d78 <HAL_RCC_OscConfig+0x520>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d1f0      	bne.n	8002c32 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f003 0308 	and.w	r3, r3, #8
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d036      	beq.n	8002cca <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	695b      	ldr	r3, [r3, #20]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d019      	beq.n	8002c98 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c64:	4b44      	ldr	r3, [pc, #272]	; (8002d78 <HAL_RCC_OscConfig+0x520>)
 8002c66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c68:	4a43      	ldr	r2, [pc, #268]	; (8002d78 <HAL_RCC_OscConfig+0x520>)
 8002c6a:	f043 0301 	orr.w	r3, r3, #1
 8002c6e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c70:	f7fe f99a 	bl	8000fa8 <HAL_GetTick>
 8002c74:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002c76:	e008      	b.n	8002c8a <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c78:	f7fe f996 	bl	8000fa8 <HAL_GetTick>
 8002c7c:	4602      	mov	r2, r0
 8002c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c80:	1ad3      	subs	r3, r2, r3
 8002c82:	2b02      	cmp	r3, #2
 8002c84:	d901      	bls.n	8002c8a <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8002c86:	2303      	movs	r3, #3
 8002c88:	e1ef      	b.n	800306a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002c8a:	4b3b      	ldr	r3, [pc, #236]	; (8002d78 <HAL_RCC_OscConfig+0x520>)
 8002c8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c8e:	f003 0302 	and.w	r3, r3, #2
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d0f0      	beq.n	8002c78 <HAL_RCC_OscConfig+0x420>
 8002c96:	e018      	b.n	8002cca <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c98:	4b37      	ldr	r3, [pc, #220]	; (8002d78 <HAL_RCC_OscConfig+0x520>)
 8002c9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c9c:	4a36      	ldr	r2, [pc, #216]	; (8002d78 <HAL_RCC_OscConfig+0x520>)
 8002c9e:	f023 0301 	bic.w	r3, r3, #1
 8002ca2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ca4:	f7fe f980 	bl	8000fa8 <HAL_GetTick>
 8002ca8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002caa:	e008      	b.n	8002cbe <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002cac:	f7fe f97c 	bl	8000fa8 <HAL_GetTick>
 8002cb0:	4602      	mov	r2, r0
 8002cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb4:	1ad3      	subs	r3, r2, r3
 8002cb6:	2b02      	cmp	r3, #2
 8002cb8:	d901      	bls.n	8002cbe <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8002cba:	2303      	movs	r3, #3
 8002cbc:	e1d5      	b.n	800306a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002cbe:	4b2e      	ldr	r3, [pc, #184]	; (8002d78 <HAL_RCC_OscConfig+0x520>)
 8002cc0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cc2:	f003 0302 	and.w	r3, r3, #2
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d1f0      	bne.n	8002cac <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f003 0320 	and.w	r3, r3, #32
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d036      	beq.n	8002d44 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	699b      	ldr	r3, [r3, #24]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d019      	beq.n	8002d12 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002cde:	4b26      	ldr	r3, [pc, #152]	; (8002d78 <HAL_RCC_OscConfig+0x520>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4a25      	ldr	r2, [pc, #148]	; (8002d78 <HAL_RCC_OscConfig+0x520>)
 8002ce4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002ce8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002cea:	f7fe f95d 	bl	8000fa8 <HAL_GetTick>
 8002cee:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002cf0:	e008      	b.n	8002d04 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002cf2:	f7fe f959 	bl	8000fa8 <HAL_GetTick>
 8002cf6:	4602      	mov	r2, r0
 8002cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cfa:	1ad3      	subs	r3, r2, r3
 8002cfc:	2b02      	cmp	r3, #2
 8002cfe:	d901      	bls.n	8002d04 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8002d00:	2303      	movs	r3, #3
 8002d02:	e1b2      	b.n	800306a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002d04:	4b1c      	ldr	r3, [pc, #112]	; (8002d78 <HAL_RCC_OscConfig+0x520>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d0f0      	beq.n	8002cf2 <HAL_RCC_OscConfig+0x49a>
 8002d10:	e018      	b.n	8002d44 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002d12:	4b19      	ldr	r3, [pc, #100]	; (8002d78 <HAL_RCC_OscConfig+0x520>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4a18      	ldr	r2, [pc, #96]	; (8002d78 <HAL_RCC_OscConfig+0x520>)
 8002d18:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002d1c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002d1e:	f7fe f943 	bl	8000fa8 <HAL_GetTick>
 8002d22:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002d24:	e008      	b.n	8002d38 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002d26:	f7fe f93f 	bl	8000fa8 <HAL_GetTick>
 8002d2a:	4602      	mov	r2, r0
 8002d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d2e:	1ad3      	subs	r3, r2, r3
 8002d30:	2b02      	cmp	r3, #2
 8002d32:	d901      	bls.n	8002d38 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8002d34:	2303      	movs	r3, #3
 8002d36:	e198      	b.n	800306a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002d38:	4b0f      	ldr	r3, [pc, #60]	; (8002d78 <HAL_RCC_OscConfig+0x520>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d1f0      	bne.n	8002d26 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f003 0304 	and.w	r3, r3, #4
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	f000 8085 	beq.w	8002e5c <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002d52:	4b0a      	ldr	r3, [pc, #40]	; (8002d7c <HAL_RCC_OscConfig+0x524>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4a09      	ldr	r2, [pc, #36]	; (8002d7c <HAL_RCC_OscConfig+0x524>)
 8002d58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d5c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002d5e:	f7fe f923 	bl	8000fa8 <HAL_GetTick>
 8002d62:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002d64:	e00c      	b.n	8002d80 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002d66:	f7fe f91f 	bl	8000fa8 <HAL_GetTick>
 8002d6a:	4602      	mov	r2, r0
 8002d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d6e:	1ad3      	subs	r3, r2, r3
 8002d70:	2b64      	cmp	r3, #100	; 0x64
 8002d72:	d905      	bls.n	8002d80 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8002d74:	2303      	movs	r3, #3
 8002d76:	e178      	b.n	800306a <HAL_RCC_OscConfig+0x812>
 8002d78:	58024400 	.word	0x58024400
 8002d7c:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002d80:	4b96      	ldr	r3, [pc, #600]	; (8002fdc <HAL_RCC_OscConfig+0x784>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d0ec      	beq.n	8002d66 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	689b      	ldr	r3, [r3, #8]
 8002d90:	2b01      	cmp	r3, #1
 8002d92:	d106      	bne.n	8002da2 <HAL_RCC_OscConfig+0x54a>
 8002d94:	4b92      	ldr	r3, [pc, #584]	; (8002fe0 <HAL_RCC_OscConfig+0x788>)
 8002d96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d98:	4a91      	ldr	r2, [pc, #580]	; (8002fe0 <HAL_RCC_OscConfig+0x788>)
 8002d9a:	f043 0301 	orr.w	r3, r3, #1
 8002d9e:	6713      	str	r3, [r2, #112]	; 0x70
 8002da0:	e02d      	b.n	8002dfe <HAL_RCC_OscConfig+0x5a6>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	689b      	ldr	r3, [r3, #8]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d10c      	bne.n	8002dc4 <HAL_RCC_OscConfig+0x56c>
 8002daa:	4b8d      	ldr	r3, [pc, #564]	; (8002fe0 <HAL_RCC_OscConfig+0x788>)
 8002dac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dae:	4a8c      	ldr	r2, [pc, #560]	; (8002fe0 <HAL_RCC_OscConfig+0x788>)
 8002db0:	f023 0301 	bic.w	r3, r3, #1
 8002db4:	6713      	str	r3, [r2, #112]	; 0x70
 8002db6:	4b8a      	ldr	r3, [pc, #552]	; (8002fe0 <HAL_RCC_OscConfig+0x788>)
 8002db8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dba:	4a89      	ldr	r2, [pc, #548]	; (8002fe0 <HAL_RCC_OscConfig+0x788>)
 8002dbc:	f023 0304 	bic.w	r3, r3, #4
 8002dc0:	6713      	str	r3, [r2, #112]	; 0x70
 8002dc2:	e01c      	b.n	8002dfe <HAL_RCC_OscConfig+0x5a6>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	689b      	ldr	r3, [r3, #8]
 8002dc8:	2b05      	cmp	r3, #5
 8002dca:	d10c      	bne.n	8002de6 <HAL_RCC_OscConfig+0x58e>
 8002dcc:	4b84      	ldr	r3, [pc, #528]	; (8002fe0 <HAL_RCC_OscConfig+0x788>)
 8002dce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dd0:	4a83      	ldr	r2, [pc, #524]	; (8002fe0 <HAL_RCC_OscConfig+0x788>)
 8002dd2:	f043 0304 	orr.w	r3, r3, #4
 8002dd6:	6713      	str	r3, [r2, #112]	; 0x70
 8002dd8:	4b81      	ldr	r3, [pc, #516]	; (8002fe0 <HAL_RCC_OscConfig+0x788>)
 8002dda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ddc:	4a80      	ldr	r2, [pc, #512]	; (8002fe0 <HAL_RCC_OscConfig+0x788>)
 8002dde:	f043 0301 	orr.w	r3, r3, #1
 8002de2:	6713      	str	r3, [r2, #112]	; 0x70
 8002de4:	e00b      	b.n	8002dfe <HAL_RCC_OscConfig+0x5a6>
 8002de6:	4b7e      	ldr	r3, [pc, #504]	; (8002fe0 <HAL_RCC_OscConfig+0x788>)
 8002de8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dea:	4a7d      	ldr	r2, [pc, #500]	; (8002fe0 <HAL_RCC_OscConfig+0x788>)
 8002dec:	f023 0301 	bic.w	r3, r3, #1
 8002df0:	6713      	str	r3, [r2, #112]	; 0x70
 8002df2:	4b7b      	ldr	r3, [pc, #492]	; (8002fe0 <HAL_RCC_OscConfig+0x788>)
 8002df4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002df6:	4a7a      	ldr	r2, [pc, #488]	; (8002fe0 <HAL_RCC_OscConfig+0x788>)
 8002df8:	f023 0304 	bic.w	r3, r3, #4
 8002dfc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	689b      	ldr	r3, [r3, #8]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d015      	beq.n	8002e32 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e06:	f7fe f8cf 	bl	8000fa8 <HAL_GetTick>
 8002e0a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002e0c:	e00a      	b.n	8002e24 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e0e:	f7fe f8cb 	bl	8000fa8 <HAL_GetTick>
 8002e12:	4602      	mov	r2, r0
 8002e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e16:	1ad3      	subs	r3, r2, r3
 8002e18:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d901      	bls.n	8002e24 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8002e20:	2303      	movs	r3, #3
 8002e22:	e122      	b.n	800306a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002e24:	4b6e      	ldr	r3, [pc, #440]	; (8002fe0 <HAL_RCC_OscConfig+0x788>)
 8002e26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e28:	f003 0302 	and.w	r3, r3, #2
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d0ee      	beq.n	8002e0e <HAL_RCC_OscConfig+0x5b6>
 8002e30:	e014      	b.n	8002e5c <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e32:	f7fe f8b9 	bl	8000fa8 <HAL_GetTick>
 8002e36:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002e38:	e00a      	b.n	8002e50 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e3a:	f7fe f8b5 	bl	8000fa8 <HAL_GetTick>
 8002e3e:	4602      	mov	r2, r0
 8002e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e42:	1ad3      	subs	r3, r2, r3
 8002e44:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d901      	bls.n	8002e50 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8002e4c:	2303      	movs	r3, #3
 8002e4e:	e10c      	b.n	800306a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002e50:	4b63      	ldr	r3, [pc, #396]	; (8002fe0 <HAL_RCC_OscConfig+0x788>)
 8002e52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e54:	f003 0302 	and.w	r3, r3, #2
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d1ee      	bne.n	8002e3a <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	f000 8101 	beq.w	8003068 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002e66:	4b5e      	ldr	r3, [pc, #376]	; (8002fe0 <HAL_RCC_OscConfig+0x788>)
 8002e68:	691b      	ldr	r3, [r3, #16]
 8002e6a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002e6e:	2b18      	cmp	r3, #24
 8002e70:	f000 80bc 	beq.w	8002fec <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e78:	2b02      	cmp	r3, #2
 8002e7a:	f040 8095 	bne.w	8002fa8 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e7e:	4b58      	ldr	r3, [pc, #352]	; (8002fe0 <HAL_RCC_OscConfig+0x788>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4a57      	ldr	r2, [pc, #348]	; (8002fe0 <HAL_RCC_OscConfig+0x788>)
 8002e84:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e88:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e8a:	f7fe f88d 	bl	8000fa8 <HAL_GetTick>
 8002e8e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002e90:	e008      	b.n	8002ea4 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e92:	f7fe f889 	bl	8000fa8 <HAL_GetTick>
 8002e96:	4602      	mov	r2, r0
 8002e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e9a:	1ad3      	subs	r3, r2, r3
 8002e9c:	2b02      	cmp	r3, #2
 8002e9e:	d901      	bls.n	8002ea4 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8002ea0:	2303      	movs	r3, #3
 8002ea2:	e0e2      	b.n	800306a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002ea4:	4b4e      	ldr	r3, [pc, #312]	; (8002fe0 <HAL_RCC_OscConfig+0x788>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d1f0      	bne.n	8002e92 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002eb0:	4b4b      	ldr	r3, [pc, #300]	; (8002fe0 <HAL_RCC_OscConfig+0x788>)
 8002eb2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002eb4:	4b4b      	ldr	r3, [pc, #300]	; (8002fe4 <HAL_RCC_OscConfig+0x78c>)
 8002eb6:	4013      	ands	r3, r2
 8002eb8:	687a      	ldr	r2, [r7, #4]
 8002eba:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002ebc:	687a      	ldr	r2, [r7, #4]
 8002ebe:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002ec0:	0112      	lsls	r2, r2, #4
 8002ec2:	430a      	orrs	r2, r1
 8002ec4:	4946      	ldr	r1, [pc, #280]	; (8002fe0 <HAL_RCC_OscConfig+0x788>)
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	628b      	str	r3, [r1, #40]	; 0x28
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ece:	3b01      	subs	r3, #1
 8002ed0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ed8:	3b01      	subs	r3, #1
 8002eda:	025b      	lsls	r3, r3, #9
 8002edc:	b29b      	uxth	r3, r3
 8002ede:	431a      	orrs	r2, r3
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ee4:	3b01      	subs	r3, #1
 8002ee6:	041b      	lsls	r3, r3, #16
 8002ee8:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002eec:	431a      	orrs	r2, r3
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ef2:	3b01      	subs	r3, #1
 8002ef4:	061b      	lsls	r3, r3, #24
 8002ef6:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002efa:	4939      	ldr	r1, [pc, #228]	; (8002fe0 <HAL_RCC_OscConfig+0x788>)
 8002efc:	4313      	orrs	r3, r2
 8002efe:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8002f00:	4b37      	ldr	r3, [pc, #220]	; (8002fe0 <HAL_RCC_OscConfig+0x788>)
 8002f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f04:	4a36      	ldr	r2, [pc, #216]	; (8002fe0 <HAL_RCC_OscConfig+0x788>)
 8002f06:	f023 0301 	bic.w	r3, r3, #1
 8002f0a:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002f0c:	4b34      	ldr	r3, [pc, #208]	; (8002fe0 <HAL_RCC_OscConfig+0x788>)
 8002f0e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f10:	4b35      	ldr	r3, [pc, #212]	; (8002fe8 <HAL_RCC_OscConfig+0x790>)
 8002f12:	4013      	ands	r3, r2
 8002f14:	687a      	ldr	r2, [r7, #4]
 8002f16:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002f18:	00d2      	lsls	r2, r2, #3
 8002f1a:	4931      	ldr	r1, [pc, #196]	; (8002fe0 <HAL_RCC_OscConfig+0x788>)
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002f20:	4b2f      	ldr	r3, [pc, #188]	; (8002fe0 <HAL_RCC_OscConfig+0x788>)
 8002f22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f24:	f023 020c 	bic.w	r2, r3, #12
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f2c:	492c      	ldr	r1, [pc, #176]	; (8002fe0 <HAL_RCC_OscConfig+0x788>)
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002f32:	4b2b      	ldr	r3, [pc, #172]	; (8002fe0 <HAL_RCC_OscConfig+0x788>)
 8002f34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f36:	f023 0202 	bic.w	r2, r3, #2
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f3e:	4928      	ldr	r1, [pc, #160]	; (8002fe0 <HAL_RCC_OscConfig+0x788>)
 8002f40:	4313      	orrs	r3, r2
 8002f42:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002f44:	4b26      	ldr	r3, [pc, #152]	; (8002fe0 <HAL_RCC_OscConfig+0x788>)
 8002f46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f48:	4a25      	ldr	r2, [pc, #148]	; (8002fe0 <HAL_RCC_OscConfig+0x788>)
 8002f4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f4e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002f50:	4b23      	ldr	r3, [pc, #140]	; (8002fe0 <HAL_RCC_OscConfig+0x788>)
 8002f52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f54:	4a22      	ldr	r2, [pc, #136]	; (8002fe0 <HAL_RCC_OscConfig+0x788>)
 8002f56:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f5a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002f5c:	4b20      	ldr	r3, [pc, #128]	; (8002fe0 <HAL_RCC_OscConfig+0x788>)
 8002f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f60:	4a1f      	ldr	r2, [pc, #124]	; (8002fe0 <HAL_RCC_OscConfig+0x788>)
 8002f62:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f66:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8002f68:	4b1d      	ldr	r3, [pc, #116]	; (8002fe0 <HAL_RCC_OscConfig+0x788>)
 8002f6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f6c:	4a1c      	ldr	r2, [pc, #112]	; (8002fe0 <HAL_RCC_OscConfig+0x788>)
 8002f6e:	f043 0301 	orr.w	r3, r3, #1
 8002f72:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f74:	4b1a      	ldr	r3, [pc, #104]	; (8002fe0 <HAL_RCC_OscConfig+0x788>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a19      	ldr	r2, [pc, #100]	; (8002fe0 <HAL_RCC_OscConfig+0x788>)
 8002f7a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f7e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f80:	f7fe f812 	bl	8000fa8 <HAL_GetTick>
 8002f84:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002f86:	e008      	b.n	8002f9a <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f88:	f7fe f80e 	bl	8000fa8 <HAL_GetTick>
 8002f8c:	4602      	mov	r2, r0
 8002f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f90:	1ad3      	subs	r3, r2, r3
 8002f92:	2b02      	cmp	r3, #2
 8002f94:	d901      	bls.n	8002f9a <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8002f96:	2303      	movs	r3, #3
 8002f98:	e067      	b.n	800306a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002f9a:	4b11      	ldr	r3, [pc, #68]	; (8002fe0 <HAL_RCC_OscConfig+0x788>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d0f0      	beq.n	8002f88 <HAL_RCC_OscConfig+0x730>
 8002fa6:	e05f      	b.n	8003068 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fa8:	4b0d      	ldr	r3, [pc, #52]	; (8002fe0 <HAL_RCC_OscConfig+0x788>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a0c      	ldr	r2, [pc, #48]	; (8002fe0 <HAL_RCC_OscConfig+0x788>)
 8002fae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002fb2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fb4:	f7fd fff8 	bl	8000fa8 <HAL_GetTick>
 8002fb8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002fba:	e008      	b.n	8002fce <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fbc:	f7fd fff4 	bl	8000fa8 <HAL_GetTick>
 8002fc0:	4602      	mov	r2, r0
 8002fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc4:	1ad3      	subs	r3, r2, r3
 8002fc6:	2b02      	cmp	r3, #2
 8002fc8:	d901      	bls.n	8002fce <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8002fca:	2303      	movs	r3, #3
 8002fcc:	e04d      	b.n	800306a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002fce:	4b04      	ldr	r3, [pc, #16]	; (8002fe0 <HAL_RCC_OscConfig+0x788>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d1f0      	bne.n	8002fbc <HAL_RCC_OscConfig+0x764>
 8002fda:	e045      	b.n	8003068 <HAL_RCC_OscConfig+0x810>
 8002fdc:	58024800 	.word	0x58024800
 8002fe0:	58024400 	.word	0x58024400
 8002fe4:	fffffc0c 	.word	0xfffffc0c
 8002fe8:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002fec:	4b21      	ldr	r3, [pc, #132]	; (8003074 <HAL_RCC_OscConfig+0x81c>)
 8002fee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ff0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002ff2:	4b20      	ldr	r3, [pc, #128]	; (8003074 <HAL_RCC_OscConfig+0x81c>)
 8002ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ff6:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ffc:	2b01      	cmp	r3, #1
 8002ffe:	d031      	beq.n	8003064 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003000:	693b      	ldr	r3, [r7, #16]
 8003002:	f003 0203 	and.w	r2, r3, #3
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800300a:	429a      	cmp	r2, r3
 800300c:	d12a      	bne.n	8003064 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800300e:	693b      	ldr	r3, [r7, #16]
 8003010:	091b      	lsrs	r3, r3, #4
 8003012:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800301a:	429a      	cmp	r2, r3
 800301c:	d122      	bne.n	8003064 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003028:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800302a:	429a      	cmp	r2, r3
 800302c:	d11a      	bne.n	8003064 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	0a5b      	lsrs	r3, r3, #9
 8003032:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800303a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800303c:	429a      	cmp	r2, r3
 800303e:	d111      	bne.n	8003064 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	0c1b      	lsrs	r3, r3, #16
 8003044:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800304c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800304e:	429a      	cmp	r2, r3
 8003050:	d108      	bne.n	8003064 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	0e1b      	lsrs	r3, r3, #24
 8003056:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800305e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003060:	429a      	cmp	r2, r3
 8003062:	d001      	beq.n	8003068 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8003064:	2301      	movs	r3, #1
 8003066:	e000      	b.n	800306a <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8003068:	2300      	movs	r3, #0
}
 800306a:	4618      	mov	r0, r3
 800306c:	3730      	adds	r7, #48	; 0x30
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}
 8003072:	bf00      	nop
 8003074:	58024400 	.word	0x58024400

08003078 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b086      	sub	sp, #24
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
 8003080:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d101      	bne.n	800308c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003088:	2301      	movs	r3, #1
 800308a:	e19c      	b.n	80033c6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800308c:	4b8a      	ldr	r3, [pc, #552]	; (80032b8 <HAL_RCC_ClockConfig+0x240>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f003 030f 	and.w	r3, r3, #15
 8003094:	683a      	ldr	r2, [r7, #0]
 8003096:	429a      	cmp	r2, r3
 8003098:	d910      	bls.n	80030bc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800309a:	4b87      	ldr	r3, [pc, #540]	; (80032b8 <HAL_RCC_ClockConfig+0x240>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f023 020f 	bic.w	r2, r3, #15
 80030a2:	4985      	ldr	r1, [pc, #532]	; (80032b8 <HAL_RCC_ClockConfig+0x240>)
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	4313      	orrs	r3, r2
 80030a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030aa:	4b83      	ldr	r3, [pc, #524]	; (80032b8 <HAL_RCC_ClockConfig+0x240>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f003 030f 	and.w	r3, r3, #15
 80030b2:	683a      	ldr	r2, [r7, #0]
 80030b4:	429a      	cmp	r2, r3
 80030b6:	d001      	beq.n	80030bc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80030b8:	2301      	movs	r3, #1
 80030ba:	e184      	b.n	80033c6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f003 0304 	and.w	r3, r3, #4
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d010      	beq.n	80030ea <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	691a      	ldr	r2, [r3, #16]
 80030cc:	4b7b      	ldr	r3, [pc, #492]	; (80032bc <HAL_RCC_ClockConfig+0x244>)
 80030ce:	699b      	ldr	r3, [r3, #24]
 80030d0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80030d4:	429a      	cmp	r2, r3
 80030d6:	d908      	bls.n	80030ea <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80030d8:	4b78      	ldr	r3, [pc, #480]	; (80032bc <HAL_RCC_ClockConfig+0x244>)
 80030da:	699b      	ldr	r3, [r3, #24]
 80030dc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	691b      	ldr	r3, [r3, #16]
 80030e4:	4975      	ldr	r1, [pc, #468]	; (80032bc <HAL_RCC_ClockConfig+0x244>)
 80030e6:	4313      	orrs	r3, r2
 80030e8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f003 0308 	and.w	r3, r3, #8
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d010      	beq.n	8003118 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	695a      	ldr	r2, [r3, #20]
 80030fa:	4b70      	ldr	r3, [pc, #448]	; (80032bc <HAL_RCC_ClockConfig+0x244>)
 80030fc:	69db      	ldr	r3, [r3, #28]
 80030fe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003102:	429a      	cmp	r2, r3
 8003104:	d908      	bls.n	8003118 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003106:	4b6d      	ldr	r3, [pc, #436]	; (80032bc <HAL_RCC_ClockConfig+0x244>)
 8003108:	69db      	ldr	r3, [r3, #28]
 800310a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	695b      	ldr	r3, [r3, #20]
 8003112:	496a      	ldr	r1, [pc, #424]	; (80032bc <HAL_RCC_ClockConfig+0x244>)
 8003114:	4313      	orrs	r3, r2
 8003116:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f003 0310 	and.w	r3, r3, #16
 8003120:	2b00      	cmp	r3, #0
 8003122:	d010      	beq.n	8003146 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	699a      	ldr	r2, [r3, #24]
 8003128:	4b64      	ldr	r3, [pc, #400]	; (80032bc <HAL_RCC_ClockConfig+0x244>)
 800312a:	69db      	ldr	r3, [r3, #28]
 800312c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003130:	429a      	cmp	r2, r3
 8003132:	d908      	bls.n	8003146 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003134:	4b61      	ldr	r3, [pc, #388]	; (80032bc <HAL_RCC_ClockConfig+0x244>)
 8003136:	69db      	ldr	r3, [r3, #28]
 8003138:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	699b      	ldr	r3, [r3, #24]
 8003140:	495e      	ldr	r1, [pc, #376]	; (80032bc <HAL_RCC_ClockConfig+0x244>)
 8003142:	4313      	orrs	r3, r2
 8003144:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f003 0320 	and.w	r3, r3, #32
 800314e:	2b00      	cmp	r3, #0
 8003150:	d010      	beq.n	8003174 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	69da      	ldr	r2, [r3, #28]
 8003156:	4b59      	ldr	r3, [pc, #356]	; (80032bc <HAL_RCC_ClockConfig+0x244>)
 8003158:	6a1b      	ldr	r3, [r3, #32]
 800315a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800315e:	429a      	cmp	r2, r3
 8003160:	d908      	bls.n	8003174 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003162:	4b56      	ldr	r3, [pc, #344]	; (80032bc <HAL_RCC_ClockConfig+0x244>)
 8003164:	6a1b      	ldr	r3, [r3, #32]
 8003166:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	69db      	ldr	r3, [r3, #28]
 800316e:	4953      	ldr	r1, [pc, #332]	; (80032bc <HAL_RCC_ClockConfig+0x244>)
 8003170:	4313      	orrs	r3, r2
 8003172:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f003 0302 	and.w	r3, r3, #2
 800317c:	2b00      	cmp	r3, #0
 800317e:	d010      	beq.n	80031a2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	68da      	ldr	r2, [r3, #12]
 8003184:	4b4d      	ldr	r3, [pc, #308]	; (80032bc <HAL_RCC_ClockConfig+0x244>)
 8003186:	699b      	ldr	r3, [r3, #24]
 8003188:	f003 030f 	and.w	r3, r3, #15
 800318c:	429a      	cmp	r2, r3
 800318e:	d908      	bls.n	80031a2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003190:	4b4a      	ldr	r3, [pc, #296]	; (80032bc <HAL_RCC_ClockConfig+0x244>)
 8003192:	699b      	ldr	r3, [r3, #24]
 8003194:	f023 020f 	bic.w	r2, r3, #15
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	68db      	ldr	r3, [r3, #12]
 800319c:	4947      	ldr	r1, [pc, #284]	; (80032bc <HAL_RCC_ClockConfig+0x244>)
 800319e:	4313      	orrs	r3, r2
 80031a0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f003 0301 	and.w	r3, r3, #1
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d055      	beq.n	800325a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80031ae:	4b43      	ldr	r3, [pc, #268]	; (80032bc <HAL_RCC_ClockConfig+0x244>)
 80031b0:	699b      	ldr	r3, [r3, #24]
 80031b2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	689b      	ldr	r3, [r3, #8]
 80031ba:	4940      	ldr	r1, [pc, #256]	; (80032bc <HAL_RCC_ClockConfig+0x244>)
 80031bc:	4313      	orrs	r3, r2
 80031be:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	2b02      	cmp	r3, #2
 80031c6:	d107      	bne.n	80031d8 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80031c8:	4b3c      	ldr	r3, [pc, #240]	; (80032bc <HAL_RCC_ClockConfig+0x244>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d121      	bne.n	8003218 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80031d4:	2301      	movs	r3, #1
 80031d6:	e0f6      	b.n	80033c6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	2b03      	cmp	r3, #3
 80031de:	d107      	bne.n	80031f0 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80031e0:	4b36      	ldr	r3, [pc, #216]	; (80032bc <HAL_RCC_ClockConfig+0x244>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d115      	bne.n	8003218 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80031ec:	2301      	movs	r3, #1
 80031ee:	e0ea      	b.n	80033c6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	2b01      	cmp	r3, #1
 80031f6:	d107      	bne.n	8003208 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80031f8:	4b30      	ldr	r3, [pc, #192]	; (80032bc <HAL_RCC_ClockConfig+0x244>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003200:	2b00      	cmp	r3, #0
 8003202:	d109      	bne.n	8003218 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003204:	2301      	movs	r3, #1
 8003206:	e0de      	b.n	80033c6 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003208:	4b2c      	ldr	r3, [pc, #176]	; (80032bc <HAL_RCC_ClockConfig+0x244>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f003 0304 	and.w	r3, r3, #4
 8003210:	2b00      	cmp	r3, #0
 8003212:	d101      	bne.n	8003218 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003214:	2301      	movs	r3, #1
 8003216:	e0d6      	b.n	80033c6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003218:	4b28      	ldr	r3, [pc, #160]	; (80032bc <HAL_RCC_ClockConfig+0x244>)
 800321a:	691b      	ldr	r3, [r3, #16]
 800321c:	f023 0207 	bic.w	r2, r3, #7
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	4925      	ldr	r1, [pc, #148]	; (80032bc <HAL_RCC_ClockConfig+0x244>)
 8003226:	4313      	orrs	r3, r2
 8003228:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800322a:	f7fd febd 	bl	8000fa8 <HAL_GetTick>
 800322e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003230:	e00a      	b.n	8003248 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003232:	f7fd feb9 	bl	8000fa8 <HAL_GetTick>
 8003236:	4602      	mov	r2, r0
 8003238:	697b      	ldr	r3, [r7, #20]
 800323a:	1ad3      	subs	r3, r2, r3
 800323c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003240:	4293      	cmp	r3, r2
 8003242:	d901      	bls.n	8003248 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003244:	2303      	movs	r3, #3
 8003246:	e0be      	b.n	80033c6 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003248:	4b1c      	ldr	r3, [pc, #112]	; (80032bc <HAL_RCC_ClockConfig+0x244>)
 800324a:	691b      	ldr	r3, [r3, #16]
 800324c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	00db      	lsls	r3, r3, #3
 8003256:	429a      	cmp	r2, r3
 8003258:	d1eb      	bne.n	8003232 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f003 0302 	and.w	r3, r3, #2
 8003262:	2b00      	cmp	r3, #0
 8003264:	d010      	beq.n	8003288 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	68da      	ldr	r2, [r3, #12]
 800326a:	4b14      	ldr	r3, [pc, #80]	; (80032bc <HAL_RCC_ClockConfig+0x244>)
 800326c:	699b      	ldr	r3, [r3, #24]
 800326e:	f003 030f 	and.w	r3, r3, #15
 8003272:	429a      	cmp	r2, r3
 8003274:	d208      	bcs.n	8003288 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003276:	4b11      	ldr	r3, [pc, #68]	; (80032bc <HAL_RCC_ClockConfig+0x244>)
 8003278:	699b      	ldr	r3, [r3, #24]
 800327a:	f023 020f 	bic.w	r2, r3, #15
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	68db      	ldr	r3, [r3, #12]
 8003282:	490e      	ldr	r1, [pc, #56]	; (80032bc <HAL_RCC_ClockConfig+0x244>)
 8003284:	4313      	orrs	r3, r2
 8003286:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003288:	4b0b      	ldr	r3, [pc, #44]	; (80032b8 <HAL_RCC_ClockConfig+0x240>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f003 030f 	and.w	r3, r3, #15
 8003290:	683a      	ldr	r2, [r7, #0]
 8003292:	429a      	cmp	r2, r3
 8003294:	d214      	bcs.n	80032c0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003296:	4b08      	ldr	r3, [pc, #32]	; (80032b8 <HAL_RCC_ClockConfig+0x240>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f023 020f 	bic.w	r2, r3, #15
 800329e:	4906      	ldr	r1, [pc, #24]	; (80032b8 <HAL_RCC_ClockConfig+0x240>)
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	4313      	orrs	r3, r2
 80032a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032a6:	4b04      	ldr	r3, [pc, #16]	; (80032b8 <HAL_RCC_ClockConfig+0x240>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f003 030f 	and.w	r3, r3, #15
 80032ae:	683a      	ldr	r2, [r7, #0]
 80032b0:	429a      	cmp	r2, r3
 80032b2:	d005      	beq.n	80032c0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80032b4:	2301      	movs	r3, #1
 80032b6:	e086      	b.n	80033c6 <HAL_RCC_ClockConfig+0x34e>
 80032b8:	52002000 	.word	0x52002000
 80032bc:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f003 0304 	and.w	r3, r3, #4
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d010      	beq.n	80032ee <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	691a      	ldr	r2, [r3, #16]
 80032d0:	4b3f      	ldr	r3, [pc, #252]	; (80033d0 <HAL_RCC_ClockConfig+0x358>)
 80032d2:	699b      	ldr	r3, [r3, #24]
 80032d4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80032d8:	429a      	cmp	r2, r3
 80032da:	d208      	bcs.n	80032ee <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80032dc:	4b3c      	ldr	r3, [pc, #240]	; (80033d0 <HAL_RCC_ClockConfig+0x358>)
 80032de:	699b      	ldr	r3, [r3, #24]
 80032e0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	691b      	ldr	r3, [r3, #16]
 80032e8:	4939      	ldr	r1, [pc, #228]	; (80033d0 <HAL_RCC_ClockConfig+0x358>)
 80032ea:	4313      	orrs	r3, r2
 80032ec:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f003 0308 	and.w	r3, r3, #8
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d010      	beq.n	800331c <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	695a      	ldr	r2, [r3, #20]
 80032fe:	4b34      	ldr	r3, [pc, #208]	; (80033d0 <HAL_RCC_ClockConfig+0x358>)
 8003300:	69db      	ldr	r3, [r3, #28]
 8003302:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003306:	429a      	cmp	r2, r3
 8003308:	d208      	bcs.n	800331c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800330a:	4b31      	ldr	r3, [pc, #196]	; (80033d0 <HAL_RCC_ClockConfig+0x358>)
 800330c:	69db      	ldr	r3, [r3, #28]
 800330e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	695b      	ldr	r3, [r3, #20]
 8003316:	492e      	ldr	r1, [pc, #184]	; (80033d0 <HAL_RCC_ClockConfig+0x358>)
 8003318:	4313      	orrs	r3, r2
 800331a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f003 0310 	and.w	r3, r3, #16
 8003324:	2b00      	cmp	r3, #0
 8003326:	d010      	beq.n	800334a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	699a      	ldr	r2, [r3, #24]
 800332c:	4b28      	ldr	r3, [pc, #160]	; (80033d0 <HAL_RCC_ClockConfig+0x358>)
 800332e:	69db      	ldr	r3, [r3, #28]
 8003330:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003334:	429a      	cmp	r2, r3
 8003336:	d208      	bcs.n	800334a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003338:	4b25      	ldr	r3, [pc, #148]	; (80033d0 <HAL_RCC_ClockConfig+0x358>)
 800333a:	69db      	ldr	r3, [r3, #28]
 800333c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	699b      	ldr	r3, [r3, #24]
 8003344:	4922      	ldr	r1, [pc, #136]	; (80033d0 <HAL_RCC_ClockConfig+0x358>)
 8003346:	4313      	orrs	r3, r2
 8003348:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f003 0320 	and.w	r3, r3, #32
 8003352:	2b00      	cmp	r3, #0
 8003354:	d010      	beq.n	8003378 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	69da      	ldr	r2, [r3, #28]
 800335a:	4b1d      	ldr	r3, [pc, #116]	; (80033d0 <HAL_RCC_ClockConfig+0x358>)
 800335c:	6a1b      	ldr	r3, [r3, #32]
 800335e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003362:	429a      	cmp	r2, r3
 8003364:	d208      	bcs.n	8003378 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003366:	4b1a      	ldr	r3, [pc, #104]	; (80033d0 <HAL_RCC_ClockConfig+0x358>)
 8003368:	6a1b      	ldr	r3, [r3, #32]
 800336a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	69db      	ldr	r3, [r3, #28]
 8003372:	4917      	ldr	r1, [pc, #92]	; (80033d0 <HAL_RCC_ClockConfig+0x358>)
 8003374:	4313      	orrs	r3, r2
 8003376:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003378:	f000 f834 	bl	80033e4 <HAL_RCC_GetSysClockFreq>
 800337c:	4601      	mov	r1, r0
 800337e:	4b14      	ldr	r3, [pc, #80]	; (80033d0 <HAL_RCC_ClockConfig+0x358>)
 8003380:	699b      	ldr	r3, [r3, #24]
 8003382:	0a1b      	lsrs	r3, r3, #8
 8003384:	f003 030f 	and.w	r3, r3, #15
 8003388:	4a12      	ldr	r2, [pc, #72]	; (80033d4 <HAL_RCC_ClockConfig+0x35c>)
 800338a:	5cd3      	ldrb	r3, [r2, r3]
 800338c:	f003 031f 	and.w	r3, r3, #31
 8003390:	fa21 f303 	lsr.w	r3, r1, r3
 8003394:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003396:	4b0e      	ldr	r3, [pc, #56]	; (80033d0 <HAL_RCC_ClockConfig+0x358>)
 8003398:	699b      	ldr	r3, [r3, #24]
 800339a:	f003 030f 	and.w	r3, r3, #15
 800339e:	4a0d      	ldr	r2, [pc, #52]	; (80033d4 <HAL_RCC_ClockConfig+0x35c>)
 80033a0:	5cd3      	ldrb	r3, [r2, r3]
 80033a2:	f003 031f 	and.w	r3, r3, #31
 80033a6:	693a      	ldr	r2, [r7, #16]
 80033a8:	fa22 f303 	lsr.w	r3, r2, r3
 80033ac:	4a0a      	ldr	r2, [pc, #40]	; (80033d8 <HAL_RCC_ClockConfig+0x360>)
 80033ae:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80033b0:	4a0a      	ldr	r2, [pc, #40]	; (80033dc <HAL_RCC_ClockConfig+0x364>)
 80033b2:	693b      	ldr	r3, [r7, #16]
 80033b4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80033b6:	4b0a      	ldr	r3, [pc, #40]	; (80033e0 <HAL_RCC_ClockConfig+0x368>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4618      	mov	r0, r3
 80033bc:	f7fd fdaa 	bl	8000f14 <HAL_InitTick>
 80033c0:	4603      	mov	r3, r0
 80033c2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80033c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80033c6:	4618      	mov	r0, r3
 80033c8:	3718      	adds	r7, #24
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd80      	pop	{r7, pc}
 80033ce:	bf00      	nop
 80033d0:	58024400 	.word	0x58024400
 80033d4:	08005f74 	.word	0x08005f74
 80033d8:	24000004 	.word	0x24000004
 80033dc:	24000000 	.word	0x24000000
 80033e0:	24000008 	.word	0x24000008

080033e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033e4:	b480      	push	{r7}
 80033e6:	b089      	sub	sp, #36	; 0x24
 80033e8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80033ea:	4baf      	ldr	r3, [pc, #700]	; (80036a8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80033ec:	691b      	ldr	r3, [r3, #16]
 80033ee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80033f2:	2b18      	cmp	r3, #24
 80033f4:	f200 814e 	bhi.w	8003694 <HAL_RCC_GetSysClockFreq+0x2b0>
 80033f8:	a201      	add	r2, pc, #4	; (adr r2, 8003400 <HAL_RCC_GetSysClockFreq+0x1c>)
 80033fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033fe:	bf00      	nop
 8003400:	08003465 	.word	0x08003465
 8003404:	08003695 	.word	0x08003695
 8003408:	08003695 	.word	0x08003695
 800340c:	08003695 	.word	0x08003695
 8003410:	08003695 	.word	0x08003695
 8003414:	08003695 	.word	0x08003695
 8003418:	08003695 	.word	0x08003695
 800341c:	08003695 	.word	0x08003695
 8003420:	0800348b 	.word	0x0800348b
 8003424:	08003695 	.word	0x08003695
 8003428:	08003695 	.word	0x08003695
 800342c:	08003695 	.word	0x08003695
 8003430:	08003695 	.word	0x08003695
 8003434:	08003695 	.word	0x08003695
 8003438:	08003695 	.word	0x08003695
 800343c:	08003695 	.word	0x08003695
 8003440:	08003491 	.word	0x08003491
 8003444:	08003695 	.word	0x08003695
 8003448:	08003695 	.word	0x08003695
 800344c:	08003695 	.word	0x08003695
 8003450:	08003695 	.word	0x08003695
 8003454:	08003695 	.word	0x08003695
 8003458:	08003695 	.word	0x08003695
 800345c:	08003695 	.word	0x08003695
 8003460:	08003497 	.word	0x08003497
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003464:	4b90      	ldr	r3, [pc, #576]	; (80036a8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f003 0320 	and.w	r3, r3, #32
 800346c:	2b00      	cmp	r3, #0
 800346e:	d009      	beq.n	8003484 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003470:	4b8d      	ldr	r3, [pc, #564]	; (80036a8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	08db      	lsrs	r3, r3, #3
 8003476:	f003 0303 	and.w	r3, r3, #3
 800347a:	4a8c      	ldr	r2, [pc, #560]	; (80036ac <HAL_RCC_GetSysClockFreq+0x2c8>)
 800347c:	fa22 f303 	lsr.w	r3, r2, r3
 8003480:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8003482:	e10a      	b.n	800369a <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003484:	4b89      	ldr	r3, [pc, #548]	; (80036ac <HAL_RCC_GetSysClockFreq+0x2c8>)
 8003486:	61bb      	str	r3, [r7, #24]
    break;
 8003488:	e107      	b.n	800369a <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800348a:	4b89      	ldr	r3, [pc, #548]	; (80036b0 <HAL_RCC_GetSysClockFreq+0x2cc>)
 800348c:	61bb      	str	r3, [r7, #24]
    break;
 800348e:	e104      	b.n	800369a <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8003490:	4b88      	ldr	r3, [pc, #544]	; (80036b4 <HAL_RCC_GetSysClockFreq+0x2d0>)
 8003492:	61bb      	str	r3, [r7, #24]
    break;
 8003494:	e101      	b.n	800369a <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003496:	4b84      	ldr	r3, [pc, #528]	; (80036a8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003498:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800349a:	f003 0303 	and.w	r3, r3, #3
 800349e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80034a0:	4b81      	ldr	r3, [pc, #516]	; (80036a8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80034a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034a4:	091b      	lsrs	r3, r3, #4
 80034a6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80034aa:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80034ac:	4b7e      	ldr	r3, [pc, #504]	; (80036a8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80034ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034b0:	f003 0301 	and.w	r3, r3, #1
 80034b4:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80034b6:	4b7c      	ldr	r3, [pc, #496]	; (80036a8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80034b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034ba:	08db      	lsrs	r3, r3, #3
 80034bc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80034c0:	68fa      	ldr	r2, [r7, #12]
 80034c2:	fb02 f303 	mul.w	r3, r2, r3
 80034c6:	ee07 3a90 	vmov	s15, r3
 80034ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034ce:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80034d2:	693b      	ldr	r3, [r7, #16]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	f000 80da 	beq.w	800368e <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 80034da:	697b      	ldr	r3, [r7, #20]
 80034dc:	2b01      	cmp	r3, #1
 80034de:	d05a      	beq.n	8003596 <HAL_RCC_GetSysClockFreq+0x1b2>
 80034e0:	2b01      	cmp	r3, #1
 80034e2:	d302      	bcc.n	80034ea <HAL_RCC_GetSysClockFreq+0x106>
 80034e4:	2b02      	cmp	r3, #2
 80034e6:	d078      	beq.n	80035da <HAL_RCC_GetSysClockFreq+0x1f6>
 80034e8:	e099      	b.n	800361e <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80034ea:	4b6f      	ldr	r3, [pc, #444]	; (80036a8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f003 0320 	and.w	r3, r3, #32
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d02d      	beq.n	8003552 <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80034f6:	4b6c      	ldr	r3, [pc, #432]	; (80036a8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	08db      	lsrs	r3, r3, #3
 80034fc:	f003 0303 	and.w	r3, r3, #3
 8003500:	4a6a      	ldr	r2, [pc, #424]	; (80036ac <HAL_RCC_GetSysClockFreq+0x2c8>)
 8003502:	fa22 f303 	lsr.w	r3, r2, r3
 8003506:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	ee07 3a90 	vmov	s15, r3
 800350e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003512:	693b      	ldr	r3, [r7, #16]
 8003514:	ee07 3a90 	vmov	s15, r3
 8003518:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800351c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003520:	4b61      	ldr	r3, [pc, #388]	; (80036a8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003522:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003524:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003528:	ee07 3a90 	vmov	s15, r3
 800352c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003530:	ed97 6a02 	vldr	s12, [r7, #8]
 8003534:	eddf 5a60 	vldr	s11, [pc, #384]	; 80036b8 <HAL_RCC_GetSysClockFreq+0x2d4>
 8003538:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800353c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003540:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003544:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003548:	ee67 7a27 	vmul.f32	s15, s14, s15
 800354c:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8003550:	e087      	b.n	8003662 <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003552:	693b      	ldr	r3, [r7, #16]
 8003554:	ee07 3a90 	vmov	s15, r3
 8003558:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800355c:	eddf 6a57 	vldr	s13, [pc, #348]	; 80036bc <HAL_RCC_GetSysClockFreq+0x2d8>
 8003560:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003564:	4b50      	ldr	r3, [pc, #320]	; (80036a8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003566:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003568:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800356c:	ee07 3a90 	vmov	s15, r3
 8003570:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003574:	ed97 6a02 	vldr	s12, [r7, #8]
 8003578:	eddf 5a4f 	vldr	s11, [pc, #316]	; 80036b8 <HAL_RCC_GetSysClockFreq+0x2d4>
 800357c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003580:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003584:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003588:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800358c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003590:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003594:	e065      	b.n	8003662 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003596:	693b      	ldr	r3, [r7, #16]
 8003598:	ee07 3a90 	vmov	s15, r3
 800359c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035a0:	eddf 6a47 	vldr	s13, [pc, #284]	; 80036c0 <HAL_RCC_GetSysClockFreq+0x2dc>
 80035a4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80035a8:	4b3f      	ldr	r3, [pc, #252]	; (80036a8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80035aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035b0:	ee07 3a90 	vmov	s15, r3
 80035b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80035b8:	ed97 6a02 	vldr	s12, [r7, #8]
 80035bc:	eddf 5a3e 	vldr	s11, [pc, #248]	; 80036b8 <HAL_RCC_GetSysClockFreq+0x2d4>
 80035c0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80035c4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80035c8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80035cc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80035d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035d4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80035d8:	e043      	b.n	8003662 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80035da:	693b      	ldr	r3, [r7, #16]
 80035dc:	ee07 3a90 	vmov	s15, r3
 80035e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035e4:	eddf 6a37 	vldr	s13, [pc, #220]	; 80036c4 <HAL_RCC_GetSysClockFreq+0x2e0>
 80035e8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80035ec:	4b2e      	ldr	r3, [pc, #184]	; (80036a8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80035ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035f4:	ee07 3a90 	vmov	s15, r3
 80035f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80035fc:	ed97 6a02 	vldr	s12, [r7, #8]
 8003600:	eddf 5a2d 	vldr	s11, [pc, #180]	; 80036b8 <HAL_RCC_GetSysClockFreq+0x2d4>
 8003604:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003608:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800360c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003610:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003614:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003618:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800361c:	e021      	b.n	8003662 <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800361e:	693b      	ldr	r3, [r7, #16]
 8003620:	ee07 3a90 	vmov	s15, r3
 8003624:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003628:	eddf 6a25 	vldr	s13, [pc, #148]	; 80036c0 <HAL_RCC_GetSysClockFreq+0x2dc>
 800362c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003630:	4b1d      	ldr	r3, [pc, #116]	; (80036a8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003632:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003634:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003638:	ee07 3a90 	vmov	s15, r3
 800363c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003640:	ed97 6a02 	vldr	s12, [r7, #8]
 8003644:	eddf 5a1c 	vldr	s11, [pc, #112]	; 80036b8 <HAL_RCC_GetSysClockFreq+0x2d4>
 8003648:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800364c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003650:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003654:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003658:	ee67 7a27 	vmul.f32	s15, s14, s15
 800365c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003660:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8003662:	4b11      	ldr	r3, [pc, #68]	; (80036a8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003666:	0a5b      	lsrs	r3, r3, #9
 8003668:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800366c:	3301      	adds	r3, #1
 800366e:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	ee07 3a90 	vmov	s15, r3
 8003676:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800367a:	edd7 6a07 	vldr	s13, [r7, #28]
 800367e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003682:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003686:	ee17 3a90 	vmov	r3, s15
 800368a:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800368c:	e005      	b.n	800369a <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 800368e:	2300      	movs	r3, #0
 8003690:	61bb      	str	r3, [r7, #24]
    break;
 8003692:	e002      	b.n	800369a <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8003694:	4b06      	ldr	r3, [pc, #24]	; (80036b0 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8003696:	61bb      	str	r3, [r7, #24]
    break;
 8003698:	bf00      	nop
  }

  return sysclockfreq;
 800369a:	69bb      	ldr	r3, [r7, #24]
}
 800369c:	4618      	mov	r0, r3
 800369e:	3724      	adds	r7, #36	; 0x24
 80036a0:	46bd      	mov	sp, r7
 80036a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a6:	4770      	bx	lr
 80036a8:	58024400 	.word	0x58024400
 80036ac:	03d09000 	.word	0x03d09000
 80036b0:	003d0900 	.word	0x003d0900
 80036b4:	007a1200 	.word	0x007a1200
 80036b8:	46000000 	.word	0x46000000
 80036bc:	4c742400 	.word	0x4c742400
 80036c0:	4a742400 	.word	0x4a742400
 80036c4:	4af42400 	.word	0x4af42400

080036c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b082      	sub	sp, #8
 80036cc:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80036ce:	f7ff fe89 	bl	80033e4 <HAL_RCC_GetSysClockFreq>
 80036d2:	4601      	mov	r1, r0
 80036d4:	4b10      	ldr	r3, [pc, #64]	; (8003718 <HAL_RCC_GetHCLKFreq+0x50>)
 80036d6:	699b      	ldr	r3, [r3, #24]
 80036d8:	0a1b      	lsrs	r3, r3, #8
 80036da:	f003 030f 	and.w	r3, r3, #15
 80036de:	4a0f      	ldr	r2, [pc, #60]	; (800371c <HAL_RCC_GetHCLKFreq+0x54>)
 80036e0:	5cd3      	ldrb	r3, [r2, r3]
 80036e2:	f003 031f 	and.w	r3, r3, #31
 80036e6:	fa21 f303 	lsr.w	r3, r1, r3
 80036ea:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80036ec:	4b0a      	ldr	r3, [pc, #40]	; (8003718 <HAL_RCC_GetHCLKFreq+0x50>)
 80036ee:	699b      	ldr	r3, [r3, #24]
 80036f0:	f003 030f 	and.w	r3, r3, #15
 80036f4:	4a09      	ldr	r2, [pc, #36]	; (800371c <HAL_RCC_GetHCLKFreq+0x54>)
 80036f6:	5cd3      	ldrb	r3, [r2, r3]
 80036f8:	f003 031f 	and.w	r3, r3, #31
 80036fc:	687a      	ldr	r2, [r7, #4]
 80036fe:	fa22 f303 	lsr.w	r3, r2, r3
 8003702:	4a07      	ldr	r2, [pc, #28]	; (8003720 <HAL_RCC_GetHCLKFreq+0x58>)
 8003704:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003706:	4a07      	ldr	r2, [pc, #28]	; (8003724 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800370c:	4b04      	ldr	r3, [pc, #16]	; (8003720 <HAL_RCC_GetHCLKFreq+0x58>)
 800370e:	681b      	ldr	r3, [r3, #0]
}
 8003710:	4618      	mov	r0, r3
 8003712:	3708      	adds	r7, #8
 8003714:	46bd      	mov	sp, r7
 8003716:	bd80      	pop	{r7, pc}
 8003718:	58024400 	.word	0x58024400
 800371c:	08005f74 	.word	0x08005f74
 8003720:	24000004 	.word	0x24000004
 8003724:	24000000 	.word	0x24000000

08003728 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800372c:	f7ff ffcc 	bl	80036c8 <HAL_RCC_GetHCLKFreq>
 8003730:	4601      	mov	r1, r0
 8003732:	4b06      	ldr	r3, [pc, #24]	; (800374c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003734:	69db      	ldr	r3, [r3, #28]
 8003736:	091b      	lsrs	r3, r3, #4
 8003738:	f003 0307 	and.w	r3, r3, #7
 800373c:	4a04      	ldr	r2, [pc, #16]	; (8003750 <HAL_RCC_GetPCLK1Freq+0x28>)
 800373e:	5cd3      	ldrb	r3, [r2, r3]
 8003740:	f003 031f 	and.w	r3, r3, #31
 8003744:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003748:	4618      	mov	r0, r3
 800374a:	bd80      	pop	{r7, pc}
 800374c:	58024400 	.word	0x58024400
 8003750:	08005f74 	.word	0x08005f74

08003754 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003758:	f7ff ffb6 	bl	80036c8 <HAL_RCC_GetHCLKFreq>
 800375c:	4601      	mov	r1, r0
 800375e:	4b06      	ldr	r3, [pc, #24]	; (8003778 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003760:	69db      	ldr	r3, [r3, #28]
 8003762:	0a1b      	lsrs	r3, r3, #8
 8003764:	f003 0307 	and.w	r3, r3, #7
 8003768:	4a04      	ldr	r2, [pc, #16]	; (800377c <HAL_RCC_GetPCLK2Freq+0x28>)
 800376a:	5cd3      	ldrb	r3, [r2, r3]
 800376c:	f003 031f 	and.w	r3, r3, #31
 8003770:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003774:	4618      	mov	r0, r3
 8003776:	bd80      	pop	{r7, pc}
 8003778:	58024400 	.word	0x58024400
 800377c:	08005f74 	.word	0x08005f74

08003780 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b086      	sub	sp, #24
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003788:	2300      	movs	r3, #0
 800378a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800378c:	2300      	movs	r3, #0
 800378e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003798:	2b00      	cmp	r3, #0
 800379a:	d03d      	beq.n	8003818 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80037a0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80037a4:	d013      	beq.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0x4e>
 80037a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80037aa:	d802      	bhi.n	80037b2 <HAL_RCCEx_PeriphCLKConfig+0x32>
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d007      	beq.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0x40>
 80037b0:	e01f      	b.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0x72>
 80037b2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80037b6:	d013      	beq.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0x60>
 80037b8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80037bc:	d01c      	beq.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0x78>
 80037be:	e018      	b.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80037c0:	4baf      	ldr	r3, [pc, #700]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80037c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037c4:	4aae      	ldr	r2, [pc, #696]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80037c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037ca:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80037cc:	e015      	b.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	3304      	adds	r3, #4
 80037d2:	2102      	movs	r1, #2
 80037d4:	4618      	mov	r0, r3
 80037d6:	f001 f96f 	bl	8004ab8 <RCCEx_PLL2_Config>
 80037da:	4603      	mov	r3, r0
 80037dc:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80037de:	e00c      	b.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	3324      	adds	r3, #36	; 0x24
 80037e4:	2102      	movs	r1, #2
 80037e6:	4618      	mov	r0, r3
 80037e8:	f001 fa18 	bl	8004c1c <RCCEx_PLL3_Config>
 80037ec:	4603      	mov	r3, r0
 80037ee:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80037f0:	e003      	b.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80037f2:	2301      	movs	r3, #1
 80037f4:	75fb      	strb	r3, [r7, #23]
      break;
 80037f6:	e000      	b.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 80037f8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80037fa:	7dfb      	ldrb	r3, [r7, #23]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d109      	bne.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003800:	4b9f      	ldr	r3, [pc, #636]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003802:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003804:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800380c:	499c      	ldr	r1, [pc, #624]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800380e:	4313      	orrs	r3, r2
 8003810:	650b      	str	r3, [r1, #80]	; 0x50
 8003812:	e001      	b.n	8003818 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003814:	7dfb      	ldrb	r3, [r7, #23]
 8003816:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003820:	2b00      	cmp	r3, #0
 8003822:	d03d      	beq.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003828:	2b04      	cmp	r3, #4
 800382a:	d826      	bhi.n	800387a <HAL_RCCEx_PeriphCLKConfig+0xfa>
 800382c:	a201      	add	r2, pc, #4	; (adr r2, 8003834 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 800382e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003832:	bf00      	nop
 8003834:	08003849 	.word	0x08003849
 8003838:	08003857 	.word	0x08003857
 800383c:	08003869 	.word	0x08003869
 8003840:	08003881 	.word	0x08003881
 8003844:	08003881 	.word	0x08003881
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003848:	4b8d      	ldr	r3, [pc, #564]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800384a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800384c:	4a8c      	ldr	r2, [pc, #560]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800384e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003852:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003854:	e015      	b.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	3304      	adds	r3, #4
 800385a:	2100      	movs	r1, #0
 800385c:	4618      	mov	r0, r3
 800385e:	f001 f92b 	bl	8004ab8 <RCCEx_PLL2_Config>
 8003862:	4603      	mov	r3, r0
 8003864:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003866:	e00c      	b.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	3324      	adds	r3, #36	; 0x24
 800386c:	2100      	movs	r1, #0
 800386e:	4618      	mov	r0, r3
 8003870:	f001 f9d4 	bl	8004c1c <RCCEx_PLL3_Config>
 8003874:	4603      	mov	r3, r0
 8003876:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003878:	e003      	b.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800387a:	2301      	movs	r3, #1
 800387c:	75fb      	strb	r3, [r7, #23]
      break;
 800387e:	e000      	b.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 8003880:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003882:	7dfb      	ldrb	r3, [r7, #23]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d109      	bne.n	800389c <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003888:	4b7d      	ldr	r3, [pc, #500]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800388a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800388c:	f023 0207 	bic.w	r2, r3, #7
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003894:	497a      	ldr	r1, [pc, #488]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003896:	4313      	orrs	r3, r2
 8003898:	650b      	str	r3, [r1, #80]	; 0x50
 800389a:	e001      	b.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800389c:	7dfb      	ldrb	r3, [r7, #23]
 800389e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d03e      	beq.n	800392a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038b0:	2b80      	cmp	r3, #128	; 0x80
 80038b2:	d01c      	beq.n	80038ee <HAL_RCCEx_PeriphCLKConfig+0x16e>
 80038b4:	2b80      	cmp	r3, #128	; 0x80
 80038b6:	d804      	bhi.n	80038c2 <HAL_RCCEx_PeriphCLKConfig+0x142>
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d008      	beq.n	80038ce <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80038bc:	2b40      	cmp	r3, #64	; 0x40
 80038be:	d00d      	beq.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0x15c>
 80038c0:	e01e      	b.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0x180>
 80038c2:	2bc0      	cmp	r3, #192	; 0xc0
 80038c4:	d01f      	beq.n	8003906 <HAL_RCCEx_PeriphCLKConfig+0x186>
 80038c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038ca:	d01e      	beq.n	800390a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80038cc:	e018      	b.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80038ce:	4b6c      	ldr	r3, [pc, #432]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80038d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038d2:	4a6b      	ldr	r2, [pc, #428]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80038d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038d8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80038da:	e017      	b.n	800390c <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	3304      	adds	r3, #4
 80038e0:	2100      	movs	r1, #0
 80038e2:	4618      	mov	r0, r3
 80038e4:	f001 f8e8 	bl	8004ab8 <RCCEx_PLL2_Config>
 80038e8:	4603      	mov	r3, r0
 80038ea:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80038ec:	e00e      	b.n	800390c <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	3324      	adds	r3, #36	; 0x24
 80038f2:	2100      	movs	r1, #0
 80038f4:	4618      	mov	r0, r3
 80038f6:	f001 f991 	bl	8004c1c <RCCEx_PLL3_Config>
 80038fa:	4603      	mov	r3, r0
 80038fc:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80038fe:	e005      	b.n	800390c <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003900:	2301      	movs	r3, #1
 8003902:	75fb      	strb	r3, [r7, #23]
      break;
 8003904:	e002      	b.n	800390c <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8003906:	bf00      	nop
 8003908:	e000      	b.n	800390c <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 800390a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800390c:	7dfb      	ldrb	r3, [r7, #23]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d109      	bne.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003912:	4b5b      	ldr	r3, [pc, #364]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003914:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003916:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800391e:	4958      	ldr	r1, [pc, #352]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003920:	4313      	orrs	r3, r2
 8003922:	650b      	str	r3, [r1, #80]	; 0x50
 8003924:	e001      	b.n	800392a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003926:	7dfb      	ldrb	r3, [r7, #23]
 8003928:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003932:	2b00      	cmp	r3, #0
 8003934:	d044      	beq.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800393c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003940:	d01f      	beq.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0x202>
 8003942:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003946:	d805      	bhi.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8003948:	2b00      	cmp	r3, #0
 800394a:	d00a      	beq.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800394c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003950:	d00e      	beq.n	8003970 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 8003952:	e01f      	b.n	8003994 <HAL_RCCEx_PeriphCLKConfig+0x214>
 8003954:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003958:	d01f      	beq.n	800399a <HAL_RCCEx_PeriphCLKConfig+0x21a>
 800395a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800395e:	d01e      	beq.n	800399e <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8003960:	e018      	b.n	8003994 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003962:	4b47      	ldr	r3, [pc, #284]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003964:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003966:	4a46      	ldr	r2, [pc, #280]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003968:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800396c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800396e:	e017      	b.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	3304      	adds	r3, #4
 8003974:	2100      	movs	r1, #0
 8003976:	4618      	mov	r0, r3
 8003978:	f001 f89e 	bl	8004ab8 <RCCEx_PLL2_Config>
 800397c:	4603      	mov	r3, r0
 800397e:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003980:	e00e      	b.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	3324      	adds	r3, #36	; 0x24
 8003986:	2100      	movs	r1, #0
 8003988:	4618      	mov	r0, r3
 800398a:	f001 f947 	bl	8004c1c <RCCEx_PLL3_Config>
 800398e:	4603      	mov	r3, r0
 8003990:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003992:	e005      	b.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8003994:	2301      	movs	r3, #1
 8003996:	75fb      	strb	r3, [r7, #23]
      break;
 8003998:	e002      	b.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 800399a:	bf00      	nop
 800399c:	e000      	b.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 800399e:	bf00      	nop
    }

    if(ret == HAL_OK)
 80039a0:	7dfb      	ldrb	r3, [r7, #23]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d10a      	bne.n	80039bc <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80039a6:	4b36      	ldr	r3, [pc, #216]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80039a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039aa:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80039b4:	4932      	ldr	r1, [pc, #200]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80039b6:	4313      	orrs	r3, r2
 80039b8:	658b      	str	r3, [r1, #88]	; 0x58
 80039ba:	e001      	b.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039bc:	7dfb      	ldrb	r3, [r7, #23]
 80039be:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d044      	beq.n	8003a56 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80039d2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80039d6:	d01f      	beq.n	8003a18 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80039d8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80039dc:	d805      	bhi.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0x26a>
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d00a      	beq.n	80039f8 <HAL_RCCEx_PeriphCLKConfig+0x278>
 80039e2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80039e6:	d00e      	beq.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0x286>
 80039e8:	e01f      	b.n	8003a2a <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 80039ea:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80039ee:	d01f      	beq.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80039f0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80039f4:	d01e      	beq.n	8003a34 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80039f6:	e018      	b.n	8003a2a <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80039f8:	4b21      	ldr	r3, [pc, #132]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80039fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039fc:	4a20      	ldr	r2, [pc, #128]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80039fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a02:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003a04:	e017      	b.n	8003a36 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	3304      	adds	r3, #4
 8003a0a:	2100      	movs	r1, #0
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	f001 f853 	bl	8004ab8 <RCCEx_PLL2_Config>
 8003a12:	4603      	mov	r3, r0
 8003a14:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003a16:	e00e      	b.n	8003a36 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	3324      	adds	r3, #36	; 0x24
 8003a1c:	2100      	movs	r1, #0
 8003a1e:	4618      	mov	r0, r3
 8003a20:	f001 f8fc 	bl	8004c1c <RCCEx_PLL3_Config>
 8003a24:	4603      	mov	r3, r0
 8003a26:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003a28:	e005      	b.n	8003a36 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	75fb      	strb	r3, [r7, #23]
      break;
 8003a2e:	e002      	b.n	8003a36 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8003a30:	bf00      	nop
 8003a32:	e000      	b.n	8003a36 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8003a34:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a36:	7dfb      	ldrb	r3, [r7, #23]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d10a      	bne.n	8003a52 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003a3c:	4b10      	ldr	r3, [pc, #64]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003a3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a40:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003a4a:	490d      	ldr	r1, [pc, #52]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	658b      	str	r3, [r1, #88]	; 0x58
 8003a50:	e001      	b.n	8003a56 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a52:	7dfb      	ldrb	r3, [r7, #23]
 8003a54:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d035      	beq.n	8003ace <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a66:	2b10      	cmp	r3, #16
 8003a68:	d00c      	beq.n	8003a84 <HAL_RCCEx_PeriphCLKConfig+0x304>
 8003a6a:	2b10      	cmp	r3, #16
 8003a6c:	d802      	bhi.n	8003a74 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d01b      	beq.n	8003aaa <HAL_RCCEx_PeriphCLKConfig+0x32a>
 8003a72:	e017      	b.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8003a74:	2b20      	cmp	r3, #32
 8003a76:	d00c      	beq.n	8003a92 <HAL_RCCEx_PeriphCLKConfig+0x312>
 8003a78:	2b30      	cmp	r3, #48	; 0x30
 8003a7a:	d018      	beq.n	8003aae <HAL_RCCEx_PeriphCLKConfig+0x32e>
 8003a7c:	e012      	b.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8003a7e:	bf00      	nop
 8003a80:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a84:	4baf      	ldr	r3, [pc, #700]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a88:	4aae      	ldr	r2, [pc, #696]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003a8a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a8e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003a90:	e00e      	b.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	3304      	adds	r3, #4
 8003a96:	2102      	movs	r1, #2
 8003a98:	4618      	mov	r0, r3
 8003a9a:	f001 f80d 	bl	8004ab8 <RCCEx_PLL2_Config>
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003aa2:	e005      	b.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	75fb      	strb	r3, [r7, #23]
      break;
 8003aa8:	e002      	b.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8003aaa:	bf00      	nop
 8003aac:	e000      	b.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8003aae:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ab0:	7dfb      	ldrb	r3, [r7, #23]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d109      	bne.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003ab6:	4ba3      	ldr	r3, [pc, #652]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003ab8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003aba:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ac2:	49a0      	ldr	r1, [pc, #640]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003ac8:	e001      	b.n	8003ace <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003aca:	7dfb      	ldrb	r3, [r7, #23]
 8003acc:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d042      	beq.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ade:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ae2:	d01f      	beq.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8003ae4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ae8:	d805      	bhi.n	8003af6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d00a      	beq.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x384>
 8003aee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003af2:	d00e      	beq.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0x392>
 8003af4:	e01f      	b.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 8003af6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003afa:	d01f      	beq.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8003afc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003b00:	d01e      	beq.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8003b02:	e018      	b.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b04:	4b8f      	ldr	r3, [pc, #572]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b08:	4a8e      	ldr	r2, [pc, #568]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003b0a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b0e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003b10:	e017      	b.n	8003b42 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	3304      	adds	r3, #4
 8003b16:	2100      	movs	r1, #0
 8003b18:	4618      	mov	r0, r3
 8003b1a:	f000 ffcd 	bl	8004ab8 <RCCEx_PLL2_Config>
 8003b1e:	4603      	mov	r3, r0
 8003b20:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003b22:	e00e      	b.n	8003b42 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	3324      	adds	r3, #36	; 0x24
 8003b28:	2100      	movs	r1, #0
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	f001 f876 	bl	8004c1c <RCCEx_PLL3_Config>
 8003b30:	4603      	mov	r3, r0
 8003b32:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003b34:	e005      	b.n	8003b42 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003b36:	2301      	movs	r3, #1
 8003b38:	75fb      	strb	r3, [r7, #23]
      break;
 8003b3a:	e002      	b.n	8003b42 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8003b3c:	bf00      	nop
 8003b3e:	e000      	b.n	8003b42 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8003b40:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b42:	7dfb      	ldrb	r3, [r7, #23]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d109      	bne.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003b48:	4b7e      	ldr	r3, [pc, #504]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003b4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b4c:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b54:	497b      	ldr	r1, [pc, #492]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003b56:	4313      	orrs	r3, r2
 8003b58:	650b      	str	r3, [r1, #80]	; 0x50
 8003b5a:	e001      	b.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b5c:	7dfb      	ldrb	r3, [r7, #23]
 8003b5e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d042      	beq.n	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b70:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003b74:	d01b      	beq.n	8003bae <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8003b76:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003b7a:	d805      	bhi.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d022      	beq.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0x446>
 8003b80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b84:	d00a      	beq.n	8003b9c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8003b86:	e01b      	b.n	8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x440>
 8003b88:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003b8c:	d01d      	beq.n	8003bca <HAL_RCCEx_PeriphCLKConfig+0x44a>
 8003b8e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b92:	d01c      	beq.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0x44e>
 8003b94:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003b98:	d01b      	beq.n	8003bd2 <HAL_RCCEx_PeriphCLKConfig+0x452>
 8003b9a:	e011      	b.n	8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	3304      	adds	r3, #4
 8003ba0:	2101      	movs	r1, #1
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	f000 ff88 	bl	8004ab8 <RCCEx_PLL2_Config>
 8003ba8:	4603      	mov	r3, r0
 8003baa:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003bac:	e012      	b.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	3324      	adds	r3, #36	; 0x24
 8003bb2:	2101      	movs	r1, #1
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	f001 f831 	bl	8004c1c <RCCEx_PLL3_Config>
 8003bba:	4603      	mov	r3, r0
 8003bbc:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003bbe:	e009      	b.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	75fb      	strb	r3, [r7, #23]
      break;
 8003bc4:	e006      	b.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8003bc6:	bf00      	nop
 8003bc8:	e004      	b.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8003bca:	bf00      	nop
 8003bcc:	e002      	b.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8003bce:	bf00      	nop
 8003bd0:	e000      	b.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8003bd2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003bd4:	7dfb      	ldrb	r3, [r7, #23]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d109      	bne.n	8003bee <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003bda:	4b5a      	ldr	r3, [pc, #360]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003bdc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bde:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003be6:	4957      	ldr	r1, [pc, #348]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003be8:	4313      	orrs	r3, r2
 8003bea:	650b      	str	r3, [r1, #80]	; 0x50
 8003bec:	e001      	b.n	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bee:	7dfb      	ldrb	r3, [r7, #23]
 8003bf0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d044      	beq.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003c04:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c08:	d01b      	beq.n	8003c42 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8003c0a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c0e:	d805      	bhi.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x49c>
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d022      	beq.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8003c14:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003c18:	d00a      	beq.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8003c1a:	e01b      	b.n	8003c54 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 8003c1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c20:	d01d      	beq.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8003c22:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003c26:	d01c      	beq.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 8003c28:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003c2c:	d01b      	beq.n	8003c66 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8003c2e:	e011      	b.n	8003c54 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	3304      	adds	r3, #4
 8003c34:	2101      	movs	r1, #1
 8003c36:	4618      	mov	r0, r3
 8003c38:	f000 ff3e 	bl	8004ab8 <RCCEx_PLL2_Config>
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003c40:	e012      	b.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	3324      	adds	r3, #36	; 0x24
 8003c46:	2101      	movs	r1, #1
 8003c48:	4618      	mov	r0, r3
 8003c4a:	f000 ffe7 	bl	8004c1c <RCCEx_PLL3_Config>
 8003c4e:	4603      	mov	r3, r0
 8003c50:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003c52:	e009      	b.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8003c54:	2301      	movs	r3, #1
 8003c56:	75fb      	strb	r3, [r7, #23]
      break;
 8003c58:	e006      	b.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8003c5a:	bf00      	nop
 8003c5c:	e004      	b.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8003c5e:	bf00      	nop
 8003c60:	e002      	b.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8003c62:	bf00      	nop
 8003c64:	e000      	b.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8003c66:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c68:	7dfb      	ldrb	r3, [r7, #23]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d10a      	bne.n	8003c84 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003c6e:	4b35      	ldr	r3, [pc, #212]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003c70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c72:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003c7c:	4931      	ldr	r1, [pc, #196]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003c7e:	4313      	orrs	r3, r2
 8003c80:	658b      	str	r3, [r1, #88]	; 0x58
 8003c82:	e001      	b.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c84:	7dfb      	ldrb	r3, [r7, #23]
 8003c86:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d02d      	beq.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c98:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003c9c:	d005      	beq.n	8003caa <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8003c9e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ca2:	d009      	beq.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x538>
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d013      	beq.n	8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8003ca8:	e00f      	b.n	8003cca <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003caa:	4b26      	ldr	r3, [pc, #152]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003cac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cae:	4a25      	ldr	r2, [pc, #148]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003cb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003cb4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003cb6:	e00c      	b.n	8003cd2 <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	3304      	adds	r3, #4
 8003cbc:	2101      	movs	r1, #1
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	f000 fefa 	bl	8004ab8 <RCCEx_PLL2_Config>
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003cc8:	e003      	b.n	8003cd2 <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003cca:	2301      	movs	r3, #1
 8003ccc:	75fb      	strb	r3, [r7, #23]
      break;
 8003cce:	e000      	b.n	8003cd2 <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 8003cd0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003cd2:	7dfb      	ldrb	r3, [r7, #23]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d109      	bne.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003cd8:	4b1a      	ldr	r3, [pc, #104]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003cda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cdc:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ce4:	4917      	ldr	r1, [pc, #92]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	650b      	str	r3, [r1, #80]	; 0x50
 8003cea:	e001      	b.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cec:	7dfb      	ldrb	r3, [r7, #23]
 8003cee:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d035      	beq.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d00:	2b03      	cmp	r3, #3
 8003d02:	d81b      	bhi.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8003d04:	a201      	add	r2, pc, #4	; (adr r2, 8003d0c <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 8003d06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d0a:	bf00      	nop
 8003d0c:	08003d49 	.word	0x08003d49
 8003d10:	08003d1d 	.word	0x08003d1d
 8003d14:	08003d2b 	.word	0x08003d2b
 8003d18:	08003d49 	.word	0x08003d49
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d1c:	4b09      	ldr	r3, [pc, #36]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d20:	4a08      	ldr	r2, [pc, #32]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003d22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d26:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003d28:	e00f      	b.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	3304      	adds	r3, #4
 8003d2e:	2102      	movs	r1, #2
 8003d30:	4618      	mov	r0, r3
 8003d32:	f000 fec1 	bl	8004ab8 <RCCEx_PLL2_Config>
 8003d36:	4603      	mov	r3, r0
 8003d38:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003d3a:	e006      	b.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	75fb      	strb	r3, [r7, #23]
      break;
 8003d40:	e003      	b.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 8003d42:	bf00      	nop
 8003d44:	58024400 	.word	0x58024400
      break;
 8003d48:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d4a:	7dfb      	ldrb	r3, [r7, #23]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d109      	bne.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003d50:	4bba      	ldr	r3, [pc, #744]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003d52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d54:	f023 0203 	bic.w	r2, r3, #3
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d5c:	49b7      	ldr	r1, [pc, #732]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003d5e:	4313      	orrs	r3, r2
 8003d60:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003d62:	e001      	b.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d64:	7dfb      	ldrb	r3, [r7, #23]
 8003d66:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	f000 8086 	beq.w	8003e82 <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d76:	4bb2      	ldr	r3, [pc, #712]	; (8004040 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4ab1      	ldr	r2, [pc, #708]	; (8004040 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8003d7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d80:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003d82:	f7fd f911 	bl	8000fa8 <HAL_GetTick>
 8003d86:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003d88:	e009      	b.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d8a:	f7fd f90d 	bl	8000fa8 <HAL_GetTick>
 8003d8e:	4602      	mov	r2, r0
 8003d90:	693b      	ldr	r3, [r7, #16]
 8003d92:	1ad3      	subs	r3, r2, r3
 8003d94:	2b64      	cmp	r3, #100	; 0x64
 8003d96:	d902      	bls.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 8003d98:	2303      	movs	r3, #3
 8003d9a:	75fb      	strb	r3, [r7, #23]
        break;
 8003d9c:	e005      	b.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003d9e:	4ba8      	ldr	r3, [pc, #672]	; (8004040 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d0ef      	beq.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 8003daa:	7dfb      	ldrb	r3, [r7, #23]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d166      	bne.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003db0:	4ba2      	ldr	r3, [pc, #648]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003db2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003dba:	4053      	eors	r3, r2
 8003dbc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d013      	beq.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003dc4:	4b9d      	ldr	r3, [pc, #628]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003dc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dc8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003dcc:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003dce:	4b9b      	ldr	r3, [pc, #620]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003dd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dd2:	4a9a      	ldr	r2, [pc, #616]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003dd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003dd8:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003dda:	4b98      	ldr	r3, [pc, #608]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003ddc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dde:	4a97      	ldr	r2, [pc, #604]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003de0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003de4:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003de6:	4a95      	ldr	r2, [pc, #596]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003df2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003df6:	d115      	bne.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003df8:	f7fd f8d6 	bl	8000fa8 <HAL_GetTick>
 8003dfc:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003dfe:	e00b      	b.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e00:	f7fd f8d2 	bl	8000fa8 <HAL_GetTick>
 8003e04:	4602      	mov	r2, r0
 8003e06:	693b      	ldr	r3, [r7, #16]
 8003e08:	1ad3      	subs	r3, r2, r3
 8003e0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d902      	bls.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 8003e12:	2303      	movs	r3, #3
 8003e14:	75fb      	strb	r3, [r7, #23]
            break;
 8003e16:	e005      	b.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003e18:	4b88      	ldr	r3, [pc, #544]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003e1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e1c:	f003 0302 	and.w	r3, r3, #2
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d0ed      	beq.n	8003e00 <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 8003e24:	7dfb      	ldrb	r3, [r7, #23]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d126      	bne.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003e30:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e34:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e38:	d10d      	bne.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 8003e3a:	4b80      	ldr	r3, [pc, #512]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003e3c:	691b      	ldr	r3, [r3, #16]
 8003e3e:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003e48:	0919      	lsrs	r1, r3, #4
 8003e4a:	4b7e      	ldr	r3, [pc, #504]	; (8004044 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 8003e4c:	400b      	ands	r3, r1
 8003e4e:	497b      	ldr	r1, [pc, #492]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003e50:	4313      	orrs	r3, r2
 8003e52:	610b      	str	r3, [r1, #16]
 8003e54:	e005      	b.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 8003e56:	4b79      	ldr	r3, [pc, #484]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003e58:	691b      	ldr	r3, [r3, #16]
 8003e5a:	4a78      	ldr	r2, [pc, #480]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003e5c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003e60:	6113      	str	r3, [r2, #16]
 8003e62:	4b76      	ldr	r3, [pc, #472]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003e64:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003e6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e70:	4972      	ldr	r1, [pc, #456]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003e72:	4313      	orrs	r3, r2
 8003e74:	670b      	str	r3, [r1, #112]	; 0x70
 8003e76:	e004      	b.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003e78:	7dfb      	ldrb	r3, [r7, #23]
 8003e7a:	75bb      	strb	r3, [r7, #22]
 8003e7c:	e001      	b.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e7e:	7dfb      	ldrb	r3, [r7, #23]
 8003e80:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f003 0301 	and.w	r3, r3, #1
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d07d      	beq.n	8003f8a <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e92:	2b28      	cmp	r3, #40	; 0x28
 8003e94:	d866      	bhi.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 8003e96:	a201      	add	r2, pc, #4	; (adr r2, 8003e9c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003e98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e9c:	08003f6b 	.word	0x08003f6b
 8003ea0:	08003f65 	.word	0x08003f65
 8003ea4:	08003f65 	.word	0x08003f65
 8003ea8:	08003f65 	.word	0x08003f65
 8003eac:	08003f65 	.word	0x08003f65
 8003eb0:	08003f65 	.word	0x08003f65
 8003eb4:	08003f65 	.word	0x08003f65
 8003eb8:	08003f65 	.word	0x08003f65
 8003ebc:	08003f41 	.word	0x08003f41
 8003ec0:	08003f65 	.word	0x08003f65
 8003ec4:	08003f65 	.word	0x08003f65
 8003ec8:	08003f65 	.word	0x08003f65
 8003ecc:	08003f65 	.word	0x08003f65
 8003ed0:	08003f65 	.word	0x08003f65
 8003ed4:	08003f65 	.word	0x08003f65
 8003ed8:	08003f65 	.word	0x08003f65
 8003edc:	08003f53 	.word	0x08003f53
 8003ee0:	08003f65 	.word	0x08003f65
 8003ee4:	08003f65 	.word	0x08003f65
 8003ee8:	08003f65 	.word	0x08003f65
 8003eec:	08003f65 	.word	0x08003f65
 8003ef0:	08003f65 	.word	0x08003f65
 8003ef4:	08003f65 	.word	0x08003f65
 8003ef8:	08003f65 	.word	0x08003f65
 8003efc:	08003f6b 	.word	0x08003f6b
 8003f00:	08003f65 	.word	0x08003f65
 8003f04:	08003f65 	.word	0x08003f65
 8003f08:	08003f65 	.word	0x08003f65
 8003f0c:	08003f65 	.word	0x08003f65
 8003f10:	08003f65 	.word	0x08003f65
 8003f14:	08003f65 	.word	0x08003f65
 8003f18:	08003f65 	.word	0x08003f65
 8003f1c:	08003f6b 	.word	0x08003f6b
 8003f20:	08003f65 	.word	0x08003f65
 8003f24:	08003f65 	.word	0x08003f65
 8003f28:	08003f65 	.word	0x08003f65
 8003f2c:	08003f65 	.word	0x08003f65
 8003f30:	08003f65 	.word	0x08003f65
 8003f34:	08003f65 	.word	0x08003f65
 8003f38:	08003f65 	.word	0x08003f65
 8003f3c:	08003f6b 	.word	0x08003f6b
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	3304      	adds	r3, #4
 8003f44:	2101      	movs	r1, #1
 8003f46:	4618      	mov	r0, r3
 8003f48:	f000 fdb6 	bl	8004ab8 <RCCEx_PLL2_Config>
 8003f4c:	4603      	mov	r3, r0
 8003f4e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003f50:	e00c      	b.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	3324      	adds	r3, #36	; 0x24
 8003f56:	2101      	movs	r1, #1
 8003f58:	4618      	mov	r0, r3
 8003f5a:	f000 fe5f 	bl	8004c1c <RCCEx_PLL3_Config>
 8003f5e:	4603      	mov	r3, r0
 8003f60:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003f62:	e003      	b.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f64:	2301      	movs	r3, #1
 8003f66:	75fb      	strb	r3, [r7, #23]
      break;
 8003f68:	e000      	b.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 8003f6a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f6c:	7dfb      	ldrb	r3, [r7, #23]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d109      	bne.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003f72:	4b32      	ldr	r3, [pc, #200]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003f74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f76:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003f7e:	492f      	ldr	r1, [pc, #188]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003f80:	4313      	orrs	r3, r2
 8003f82:	654b      	str	r3, [r1, #84]	; 0x54
 8003f84:	e001      	b.n	8003f8a <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f86:	7dfb      	ldrb	r3, [r7, #23]
 8003f88:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f003 0302 	and.w	r3, r3, #2
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d037      	beq.n	8004006 <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f9a:	2b05      	cmp	r3, #5
 8003f9c:	d820      	bhi.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x860>
 8003f9e:	a201      	add	r2, pc, #4	; (adr r2, 8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8003fa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fa4:	08003fe7 	.word	0x08003fe7
 8003fa8:	08003fbd 	.word	0x08003fbd
 8003fac:	08003fcf 	.word	0x08003fcf
 8003fb0:	08003fe7 	.word	0x08003fe7
 8003fb4:	08003fe7 	.word	0x08003fe7
 8003fb8:	08003fe7 	.word	0x08003fe7
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	3304      	adds	r3, #4
 8003fc0:	2101      	movs	r1, #1
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	f000 fd78 	bl	8004ab8 <RCCEx_PLL2_Config>
 8003fc8:	4603      	mov	r3, r0
 8003fca:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003fcc:	e00c      	b.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	3324      	adds	r3, #36	; 0x24
 8003fd2:	2101      	movs	r1, #1
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	f000 fe21 	bl	8004c1c <RCCEx_PLL3_Config>
 8003fda:	4603      	mov	r3, r0
 8003fdc:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003fde:	e003      	b.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	75fb      	strb	r3, [r7, #23]
      break;
 8003fe4:	e000      	b.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 8003fe6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003fe8:	7dfb      	ldrb	r3, [r7, #23]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d109      	bne.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003fee:	4b13      	ldr	r3, [pc, #76]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003ff0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ff2:	f023 0207 	bic.w	r2, r3, #7
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ffa:	4910      	ldr	r1, [pc, #64]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	654b      	str	r3, [r1, #84]	; 0x54
 8004000:	e001      	b.n	8004006 <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004002:	7dfb      	ldrb	r3, [r7, #23]
 8004004:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f003 0304 	and.w	r3, r3, #4
 800400e:	2b00      	cmp	r3, #0
 8004010:	d040      	beq.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004018:	2b05      	cmp	r3, #5
 800401a:	d827      	bhi.n	800406c <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 800401c:	a201      	add	r2, pc, #4	; (adr r2, 8004024 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 800401e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004022:	bf00      	nop
 8004024:	08004073 	.word	0x08004073
 8004028:	08004049 	.word	0x08004049
 800402c:	0800405b 	.word	0x0800405b
 8004030:	08004073 	.word	0x08004073
 8004034:	08004073 	.word	0x08004073
 8004038:	08004073 	.word	0x08004073
 800403c:	58024400 	.word	0x58024400
 8004040:	58024800 	.word	0x58024800
 8004044:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	3304      	adds	r3, #4
 800404c:	2101      	movs	r1, #1
 800404e:	4618      	mov	r0, r3
 8004050:	f000 fd32 	bl	8004ab8 <RCCEx_PLL2_Config>
 8004054:	4603      	mov	r3, r0
 8004056:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004058:	e00c      	b.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	3324      	adds	r3, #36	; 0x24
 800405e:	2101      	movs	r1, #1
 8004060:	4618      	mov	r0, r3
 8004062:	f000 fddb 	bl	8004c1c <RCCEx_PLL3_Config>
 8004066:	4603      	mov	r3, r0
 8004068:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800406a:	e003      	b.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800406c:	2301      	movs	r3, #1
 800406e:	75fb      	strb	r3, [r7, #23]
      break;
 8004070:	e000      	b.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 8004072:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004074:	7dfb      	ldrb	r3, [r7, #23]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d10a      	bne.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800407a:	4bb2      	ldr	r3, [pc, #712]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800407c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800407e:	f023 0207 	bic.w	r2, r3, #7
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004088:	49ae      	ldr	r1, [pc, #696]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800408a:	4313      	orrs	r3, r2
 800408c:	658b      	str	r3, [r1, #88]	; 0x58
 800408e:	e001      	b.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004090:	7dfb      	ldrb	r3, [r7, #23]
 8004092:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f003 0320 	and.w	r3, r3, #32
 800409c:	2b00      	cmp	r3, #0
 800409e:	d044      	beq.n	800412a <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80040a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80040aa:	d01b      	beq.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0x964>
 80040ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80040b0:	d805      	bhi.n	80040be <HAL_RCCEx_PeriphCLKConfig+0x93e>
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d022      	beq.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0x97c>
 80040b6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80040ba:	d00a      	beq.n	80040d2 <HAL_RCCEx_PeriphCLKConfig+0x952>
 80040bc:	e01b      	b.n	80040f6 <HAL_RCCEx_PeriphCLKConfig+0x976>
 80040be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040c2:	d01d      	beq.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0x980>
 80040c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80040c8:	d01c      	beq.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x984>
 80040ca:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80040ce:	d01b      	beq.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0x988>
 80040d0:	e011      	b.n	80040f6 <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	3304      	adds	r3, #4
 80040d6:	2100      	movs	r1, #0
 80040d8:	4618      	mov	r0, r3
 80040da:	f000 fced 	bl	8004ab8 <RCCEx_PLL2_Config>
 80040de:	4603      	mov	r3, r0
 80040e0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80040e2:	e012      	b.n	800410a <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	3324      	adds	r3, #36	; 0x24
 80040e8:	2102      	movs	r1, #2
 80040ea:	4618      	mov	r0, r3
 80040ec:	f000 fd96 	bl	8004c1c <RCCEx_PLL3_Config>
 80040f0:	4603      	mov	r3, r0
 80040f2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80040f4:	e009      	b.n	800410a <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80040f6:	2301      	movs	r3, #1
 80040f8:	75fb      	strb	r3, [r7, #23]
      break;
 80040fa:	e006      	b.n	800410a <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80040fc:	bf00      	nop
 80040fe:	e004      	b.n	800410a <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8004100:	bf00      	nop
 8004102:	e002      	b.n	800410a <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8004104:	bf00      	nop
 8004106:	e000      	b.n	800410a <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8004108:	bf00      	nop
    }

    if(ret == HAL_OK)
 800410a:	7dfb      	ldrb	r3, [r7, #23]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d10a      	bne.n	8004126 <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004110:	4b8c      	ldr	r3, [pc, #560]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8004112:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004114:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800411e:	4989      	ldr	r1, [pc, #548]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8004120:	4313      	orrs	r3, r2
 8004122:	654b      	str	r3, [r1, #84]	; 0x54
 8004124:	e001      	b.n	800412a <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004126:	7dfb      	ldrb	r3, [r7, #23]
 8004128:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004132:	2b00      	cmp	r3, #0
 8004134:	d044      	beq.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800413c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004140:	d01b      	beq.n	800417a <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 8004142:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004146:	d805      	bhi.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 8004148:	2b00      	cmp	r3, #0
 800414a:	d022      	beq.n	8004192 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 800414c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004150:	d00a      	beq.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 8004152:	e01b      	b.n	800418c <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 8004154:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004158:	d01d      	beq.n	8004196 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 800415a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800415e:	d01c      	beq.n	800419a <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 8004160:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004164:	d01b      	beq.n	800419e <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 8004166:	e011      	b.n	800418c <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	3304      	adds	r3, #4
 800416c:	2100      	movs	r1, #0
 800416e:	4618      	mov	r0, r3
 8004170:	f000 fca2 	bl	8004ab8 <RCCEx_PLL2_Config>
 8004174:	4603      	mov	r3, r0
 8004176:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004178:	e012      	b.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	3324      	adds	r3, #36	; 0x24
 800417e:	2102      	movs	r1, #2
 8004180:	4618      	mov	r0, r3
 8004182:	f000 fd4b 	bl	8004c1c <RCCEx_PLL3_Config>
 8004186:	4603      	mov	r3, r0
 8004188:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800418a:	e009      	b.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800418c:	2301      	movs	r3, #1
 800418e:	75fb      	strb	r3, [r7, #23]
      break;
 8004190:	e006      	b.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8004192:	bf00      	nop
 8004194:	e004      	b.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8004196:	bf00      	nop
 8004198:	e002      	b.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800419a:	bf00      	nop
 800419c:	e000      	b.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800419e:	bf00      	nop
    }

    if(ret == HAL_OK)
 80041a0:	7dfb      	ldrb	r3, [r7, #23]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d10a      	bne.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80041a6:	4b67      	ldr	r3, [pc, #412]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80041a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041aa:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80041b4:	4963      	ldr	r1, [pc, #396]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80041b6:	4313      	orrs	r3, r2
 80041b8:	658b      	str	r3, [r1, #88]	; 0x58
 80041ba:	e001      	b.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041bc:	7dfb      	ldrb	r3, [r7, #23]
 80041be:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d044      	beq.n	8004256 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80041d2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80041d6:	d01b      	beq.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0xa90>
 80041d8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80041dc:	d805      	bhi.n	80041ea <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d022      	beq.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80041e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041e6:	d00a      	beq.n	80041fe <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 80041e8:	e01b      	b.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 80041ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041ee:	d01d      	beq.n	800422c <HAL_RCCEx_PeriphCLKConfig+0xaac>
 80041f0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80041f4:	d01c      	beq.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0xab0>
 80041f6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80041fa:	d01b      	beq.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 80041fc:	e011      	b.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	3304      	adds	r3, #4
 8004202:	2100      	movs	r1, #0
 8004204:	4618      	mov	r0, r3
 8004206:	f000 fc57 	bl	8004ab8 <RCCEx_PLL2_Config>
 800420a:	4603      	mov	r3, r0
 800420c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800420e:	e012      	b.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	3324      	adds	r3, #36	; 0x24
 8004214:	2102      	movs	r1, #2
 8004216:	4618      	mov	r0, r3
 8004218:	f000 fd00 	bl	8004c1c <RCCEx_PLL3_Config>
 800421c:	4603      	mov	r3, r0
 800421e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004220:	e009      	b.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004222:	2301      	movs	r3, #1
 8004224:	75fb      	strb	r3, [r7, #23]
      break;
 8004226:	e006      	b.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8004228:	bf00      	nop
 800422a:	e004      	b.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 800422c:	bf00      	nop
 800422e:	e002      	b.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8004230:	bf00      	nop
 8004232:	e000      	b.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8004234:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004236:	7dfb      	ldrb	r3, [r7, #23]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d10a      	bne.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800423c:	4b41      	ldr	r3, [pc, #260]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800423e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004240:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800424a:	493e      	ldr	r1, [pc, #248]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800424c:	4313      	orrs	r3, r2
 800424e:	658b      	str	r3, [r1, #88]	; 0x58
 8004250:	e001      	b.n	8004256 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004252:	7dfb      	ldrb	r3, [r7, #23]
 8004254:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f003 0308 	and.w	r3, r3, #8
 800425e:	2b00      	cmp	r3, #0
 8004260:	d01a      	beq.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004268:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800426c:	d10a      	bne.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	3324      	adds	r3, #36	; 0x24
 8004272:	2102      	movs	r1, #2
 8004274:	4618      	mov	r0, r3
 8004276:	f000 fcd1 	bl	8004c1c <RCCEx_PLL3_Config>
 800427a:	4603      	mov	r3, r0
 800427c:	2b00      	cmp	r3, #0
 800427e:	d001      	beq.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 8004280:	2301      	movs	r3, #1
 8004282:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004284:	4b2f      	ldr	r3, [pc, #188]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8004286:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004288:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004292:	492c      	ldr	r1, [pc, #176]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8004294:	4313      	orrs	r3, r2
 8004296:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f003 0310 	and.w	r3, r3, #16
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d01a      	beq.n	80042da <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80042aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042ae:	d10a      	bne.n	80042c6 <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	3324      	adds	r3, #36	; 0x24
 80042b4:	2102      	movs	r1, #2
 80042b6:	4618      	mov	r0, r3
 80042b8:	f000 fcb0 	bl	8004c1c <RCCEx_PLL3_Config>
 80042bc:	4603      	mov	r3, r0
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d001      	beq.n	80042c6 <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 80042c2:	2301      	movs	r3, #1
 80042c4:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80042c6:	4b1f      	ldr	r3, [pc, #124]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80042c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042ca:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80042d4:	491b      	ldr	r1, [pc, #108]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80042d6:	4313      	orrs	r3, r2
 80042d8:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d032      	beq.n	800434c <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80042ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042f0:	d00d      	beq.n	800430e <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 80042f2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80042f6:	d016      	beq.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0xba6>
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d111      	bne.n	8004320 <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	3304      	adds	r3, #4
 8004300:	2100      	movs	r1, #0
 8004302:	4618      	mov	r0, r3
 8004304:	f000 fbd8 	bl	8004ab8 <RCCEx_PLL2_Config>
 8004308:	4603      	mov	r3, r0
 800430a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800430c:	e00c      	b.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	3324      	adds	r3, #36	; 0x24
 8004312:	2102      	movs	r1, #2
 8004314:	4618      	mov	r0, r3
 8004316:	f000 fc81 	bl	8004c1c <RCCEx_PLL3_Config>
 800431a:	4603      	mov	r3, r0
 800431c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800431e:	e003      	b.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004320:	2301      	movs	r3, #1
 8004322:	75fb      	strb	r3, [r7, #23]
      break;
 8004324:	e000      	b.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 8004326:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004328:	7dfb      	ldrb	r3, [r7, #23]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d10c      	bne.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800432e:	4b05      	ldr	r3, [pc, #20]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8004330:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004332:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800433c:	4901      	ldr	r1, [pc, #4]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800433e:	4313      	orrs	r3, r2
 8004340:	658b      	str	r3, [r1, #88]	; 0x58
 8004342:	e003      	b.n	800434c <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 8004344:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004348:	7dfb      	ldrb	r3, [r7, #23]
 800434a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004354:	2b00      	cmp	r3, #0
 8004356:	d02f      	beq.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800435e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004362:	d00c      	beq.n	800437e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8004364:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004368:	d015      	beq.n	8004396 <HAL_RCCEx_PeriphCLKConfig+0xc16>
 800436a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800436e:	d10f      	bne.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004370:	4b79      	ldr	r3, [pc, #484]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004374:	4a78      	ldr	r2, [pc, #480]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004376:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800437a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800437c:	e00c      	b.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	3324      	adds	r3, #36	; 0x24
 8004382:	2101      	movs	r1, #1
 8004384:	4618      	mov	r0, r3
 8004386:	f000 fc49 	bl	8004c1c <RCCEx_PLL3_Config>
 800438a:	4603      	mov	r3, r0
 800438c:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800438e:	e003      	b.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004390:	2301      	movs	r3, #1
 8004392:	75fb      	strb	r3, [r7, #23]
      break;
 8004394:	e000      	b.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 8004396:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004398:	7dfb      	ldrb	r3, [r7, #23]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d10a      	bne.n	80043b4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800439e:	4b6e      	ldr	r3, [pc, #440]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80043a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043a2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043ac:	496a      	ldr	r1, [pc, #424]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80043ae:	4313      	orrs	r3, r2
 80043b0:	654b      	str	r3, [r1, #84]	; 0x54
 80043b2:	e001      	b.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043b4:	7dfb      	ldrb	r3, [r7, #23]
 80043b6:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d029      	beq.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d003      	beq.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 80043cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043d0:	d007      	beq.n	80043e2 <HAL_RCCEx_PeriphCLKConfig+0xc62>
 80043d2:	e00f      	b.n	80043f4 <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80043d4:	4b60      	ldr	r3, [pc, #384]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80043d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043d8:	4a5f      	ldr	r2, [pc, #380]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80043da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80043de:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80043e0:	e00b      	b.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	3304      	adds	r3, #4
 80043e6:	2102      	movs	r1, #2
 80043e8:	4618      	mov	r0, r3
 80043ea:	f000 fb65 	bl	8004ab8 <RCCEx_PLL2_Config>
 80043ee:	4603      	mov	r3, r0
 80043f0:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80043f2:	e002      	b.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 80043f4:	2301      	movs	r3, #1
 80043f6:	75fb      	strb	r3, [r7, #23]
      break;
 80043f8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80043fa:	7dfb      	ldrb	r3, [r7, #23]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d109      	bne.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004400:	4b55      	ldr	r3, [pc, #340]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004402:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004404:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800440c:	4952      	ldr	r1, [pc, #328]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800440e:	4313      	orrs	r3, r2
 8004410:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004412:	e001      	b.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004414:	7dfb      	ldrb	r3, [r7, #23]
 8004416:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004420:	2b00      	cmp	r3, #0
 8004422:	d00a      	beq.n	800443a <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	3324      	adds	r3, #36	; 0x24
 8004428:	2102      	movs	r1, #2
 800442a:	4618      	mov	r0, r3
 800442c:	f000 fbf6 	bl	8004c1c <RCCEx_PLL3_Config>
 8004430:	4603      	mov	r3, r0
 8004432:	2b00      	cmp	r3, #0
 8004434:	d001      	beq.n	800443a <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 8004436:	2301      	movs	r3, #1
 8004438:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004442:	2b00      	cmp	r3, #0
 8004444:	d02f      	beq.n	80044a6 <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800444a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800444e:	d00c      	beq.n	800446a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8004450:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004454:	d802      	bhi.n	800445c <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 8004456:	2b00      	cmp	r3, #0
 8004458:	d011      	beq.n	800447e <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 800445a:	e00d      	b.n	8004478 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 800445c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004460:	d00f      	beq.n	8004482 <HAL_RCCEx_PeriphCLKConfig+0xd02>
 8004462:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004466:	d00e      	beq.n	8004486 <HAL_RCCEx_PeriphCLKConfig+0xd06>
 8004468:	e006      	b.n	8004478 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800446a:	4b3b      	ldr	r3, [pc, #236]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800446c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800446e:	4a3a      	ldr	r2, [pc, #232]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004470:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004474:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8004476:	e007      	b.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004478:	2301      	movs	r3, #1
 800447a:	75fb      	strb	r3, [r7, #23]
      break;
 800447c:	e004      	b.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 800447e:	bf00      	nop
 8004480:	e002      	b.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8004482:	bf00      	nop
 8004484:	e000      	b.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8004486:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004488:	7dfb      	ldrb	r3, [r7, #23]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d109      	bne.n	80044a2 <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800448e:	4b32      	ldr	r3, [pc, #200]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004490:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004492:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800449a:	492f      	ldr	r1, [pc, #188]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800449c:	4313      	orrs	r3, r2
 800449e:	654b      	str	r3, [r1, #84]	; 0x54
 80044a0:	e001      	b.n	80044a6 <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044a2:	7dfb      	ldrb	r3, [r7, #23]
 80044a4:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d008      	beq.n	80044c4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80044b2:	4b29      	ldr	r3, [pc, #164]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80044b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044b6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044be:	4926      	ldr	r1, [pc, #152]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80044c0:	4313      	orrs	r3, r2
 80044c2:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d009      	beq.n	80044e4 <HAL_RCCEx_PeriphCLKConfig+0xd64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80044d0:	4b21      	ldr	r3, [pc, #132]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80044d2:	691b      	ldr	r3, [r3, #16]
 80044d4:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80044de:	491e      	ldr	r1, [pc, #120]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80044e0:	4313      	orrs	r3, r2
 80044e2:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d008      	beq.n	8004502 <HAL_RCCEx_PeriphCLKConfig+0xd82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80044f0:	4b19      	ldr	r3, [pc, #100]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80044f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044f4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80044fc:	4916      	ldr	r1, [pc, #88]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80044fe:	4313      	orrs	r3, r2
 8004500:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800450a:	2b00      	cmp	r3, #0
 800450c:	d00d      	beq.n	800452a <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800450e:	4b12      	ldr	r3, [pc, #72]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004510:	691b      	ldr	r3, [r3, #16]
 8004512:	4a11      	ldr	r2, [pc, #68]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004514:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004518:	6113      	str	r3, [r2, #16]
 800451a:	4b0f      	ldr	r3, [pc, #60]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800451c:	691a      	ldr	r2, [r3, #16]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004524:	490c      	ldr	r1, [pc, #48]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004526:	4313      	orrs	r3, r2
 8004528:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	2b00      	cmp	r3, #0
 8004530:	da08      	bge.n	8004544 <HAL_RCCEx_PeriphCLKConfig+0xdc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004532:	4b09      	ldr	r3, [pc, #36]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004534:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004536:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800453e:	4906      	ldr	r1, [pc, #24]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004540:	4313      	orrs	r3, r2
 8004542:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 8004544:	7dbb      	ldrb	r3, [r7, #22]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d101      	bne.n	800454e <HAL_RCCEx_PeriphCLKConfig+0xdce>
  {
    return HAL_OK;
 800454a:	2300      	movs	r3, #0
 800454c:	e000      	b.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0xdd0>
  }
  return HAL_ERROR;
 800454e:	2301      	movs	r3, #1
}
 8004550:	4618      	mov	r0, r3
 8004552:	3718      	adds	r7, #24
 8004554:	46bd      	mov	sp, r7
 8004556:	bd80      	pop	{r7, pc}
 8004558:	58024400 	.word	0x58024400

0800455c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004560:	f7ff f8b2 	bl	80036c8 <HAL_RCC_GetHCLKFreq>
 8004564:	4601      	mov	r1, r0
 8004566:	4b06      	ldr	r3, [pc, #24]	; (8004580 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004568:	6a1b      	ldr	r3, [r3, #32]
 800456a:	091b      	lsrs	r3, r3, #4
 800456c:	f003 0307 	and.w	r3, r3, #7
 8004570:	4a04      	ldr	r2, [pc, #16]	; (8004584 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004572:	5cd3      	ldrb	r3, [r2, r3]
 8004574:	f003 031f 	and.w	r3, r3, #31
 8004578:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800457c:	4618      	mov	r0, r3
 800457e:	bd80      	pop	{r7, pc}
 8004580:	58024400 	.word	0x58024400
 8004584:	08005f74 	.word	0x08005f74

08004588 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8004588:	b480      	push	{r7}
 800458a:	b089      	sub	sp, #36	; 0x24
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004590:	4b9d      	ldr	r3, [pc, #628]	; (8004808 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004592:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004594:	f003 0303 	and.w	r3, r3, #3
 8004598:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800459a:	4b9b      	ldr	r3, [pc, #620]	; (8004808 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800459c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800459e:	0b1b      	lsrs	r3, r3, #12
 80045a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80045a4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80045a6:	4b98      	ldr	r3, [pc, #608]	; (8004808 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80045a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045aa:	091b      	lsrs	r3, r3, #4
 80045ac:	f003 0301 	and.w	r3, r3, #1
 80045b0:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80045b2:	4b95      	ldr	r3, [pc, #596]	; (8004808 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80045b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045b6:	08db      	lsrs	r3, r3, #3
 80045b8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80045bc:	693a      	ldr	r2, [r7, #16]
 80045be:	fb02 f303 	mul.w	r3, r2, r3
 80045c2:	ee07 3a90 	vmov	s15, r3
 80045c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045ca:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80045ce:	697b      	ldr	r3, [r7, #20]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	f000 810a 	beq.w	80047ea <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 80045d6:	69bb      	ldr	r3, [r7, #24]
 80045d8:	2b01      	cmp	r3, #1
 80045da:	d05a      	beq.n	8004692 <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 80045dc:	2b01      	cmp	r3, #1
 80045de:	d302      	bcc.n	80045e6 <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 80045e0:	2b02      	cmp	r3, #2
 80045e2:	d078      	beq.n	80046d6 <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 80045e4:	e099      	b.n	800471a <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80045e6:	4b88      	ldr	r3, [pc, #544]	; (8004808 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f003 0320 	and.w	r3, r3, #32
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d02d      	beq.n	800464e <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80045f2:	4b85      	ldr	r3, [pc, #532]	; (8004808 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	08db      	lsrs	r3, r3, #3
 80045f8:	f003 0303 	and.w	r3, r3, #3
 80045fc:	4a83      	ldr	r2, [pc, #524]	; (800480c <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 80045fe:	fa22 f303 	lsr.w	r3, r2, r3
 8004602:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004604:	68bb      	ldr	r3, [r7, #8]
 8004606:	ee07 3a90 	vmov	s15, r3
 800460a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800460e:	697b      	ldr	r3, [r7, #20]
 8004610:	ee07 3a90 	vmov	s15, r3
 8004614:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004618:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800461c:	4b7a      	ldr	r3, [pc, #488]	; (8004808 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800461e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004620:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004624:	ee07 3a90 	vmov	s15, r3
 8004628:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800462c:	ed97 6a03 	vldr	s12, [r7, #12]
 8004630:	eddf 5a77 	vldr	s11, [pc, #476]	; 8004810 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8004634:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004638:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800463c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004640:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004644:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004648:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800464c:	e087      	b.n	800475e <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800464e:	697b      	ldr	r3, [r7, #20]
 8004650:	ee07 3a90 	vmov	s15, r3
 8004654:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004658:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8004814 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 800465c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004660:	4b69      	ldr	r3, [pc, #420]	; (8004808 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004662:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004664:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004668:	ee07 3a90 	vmov	s15, r3
 800466c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004670:	ed97 6a03 	vldr	s12, [r7, #12]
 8004674:	eddf 5a66 	vldr	s11, [pc, #408]	; 8004810 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8004678:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800467c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004680:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004684:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004688:	ee67 7a27 	vmul.f32	s15, s14, s15
 800468c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004690:	e065      	b.n	800475e <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004692:	697b      	ldr	r3, [r7, #20]
 8004694:	ee07 3a90 	vmov	s15, r3
 8004698:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800469c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8004818 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 80046a0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80046a4:	4b58      	ldr	r3, [pc, #352]	; (8004808 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80046a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046ac:	ee07 3a90 	vmov	s15, r3
 80046b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046b4:	ed97 6a03 	vldr	s12, [r7, #12]
 80046b8:	eddf 5a55 	vldr	s11, [pc, #340]	; 8004810 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80046bc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80046c0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80046c4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80046c8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80046cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046d0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80046d4:	e043      	b.n	800475e <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80046d6:	697b      	ldr	r3, [r7, #20]
 80046d8:	ee07 3a90 	vmov	s15, r3
 80046dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046e0:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800481c <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 80046e4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80046e8:	4b47      	ldr	r3, [pc, #284]	; (8004808 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80046ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046f0:	ee07 3a90 	vmov	s15, r3
 80046f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046f8:	ed97 6a03 	vldr	s12, [r7, #12]
 80046fc:	eddf 5a44 	vldr	s11, [pc, #272]	; 8004810 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8004700:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004704:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004708:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800470c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004710:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004714:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004718:	e021      	b.n	800475e <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800471a:	697b      	ldr	r3, [r7, #20]
 800471c:	ee07 3a90 	vmov	s15, r3
 8004720:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004724:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8004818 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8004728:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800472c:	4b36      	ldr	r3, [pc, #216]	; (8004808 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800472e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004730:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004734:	ee07 3a90 	vmov	s15, r3
 8004738:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800473c:	ed97 6a03 	vldr	s12, [r7, #12]
 8004740:	eddf 5a33 	vldr	s11, [pc, #204]	; 8004810 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8004744:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004748:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800474c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004750:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004754:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004758:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800475c:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800475e:	4b2a      	ldr	r3, [pc, #168]	; (8004808 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004760:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004762:	0a5b      	lsrs	r3, r3, #9
 8004764:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004768:	ee07 3a90 	vmov	s15, r3
 800476c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004770:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004774:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004778:	edd7 6a07 	vldr	s13, [r7, #28]
 800477c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004780:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004784:	ee17 2a90 	vmov	r2, s15
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800478c:	4b1e      	ldr	r3, [pc, #120]	; (8004808 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800478e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004790:	0c1b      	lsrs	r3, r3, #16
 8004792:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004796:	ee07 3a90 	vmov	s15, r3
 800479a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800479e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80047a2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80047a6:	edd7 6a07 	vldr	s13, [r7, #28]
 80047aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80047ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80047b2:	ee17 2a90 	vmov	r2, s15
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80047ba:	4b13      	ldr	r3, [pc, #76]	; (8004808 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80047bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047be:	0e1b      	lsrs	r3, r3, #24
 80047c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80047c4:	ee07 3a90 	vmov	s15, r3
 80047c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047cc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80047d0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80047d4:	edd7 6a07 	vldr	s13, [r7, #28]
 80047d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80047dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80047e0:	ee17 2a90 	vmov	r2, s15
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80047e8:	e008      	b.n	80047fc <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2200      	movs	r2, #0
 80047ee:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2200      	movs	r2, #0
 80047f4:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2200      	movs	r2, #0
 80047fa:	609a      	str	r2, [r3, #8]
}
 80047fc:	bf00      	nop
 80047fe:	3724      	adds	r7, #36	; 0x24
 8004800:	46bd      	mov	sp, r7
 8004802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004806:	4770      	bx	lr
 8004808:	58024400 	.word	0x58024400
 800480c:	03d09000 	.word	0x03d09000
 8004810:	46000000 	.word	0x46000000
 8004814:	4c742400 	.word	0x4c742400
 8004818:	4a742400 	.word	0x4a742400
 800481c:	4af42400 	.word	0x4af42400

08004820 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8004820:	b480      	push	{r7}
 8004822:	b089      	sub	sp, #36	; 0x24
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004828:	4b9d      	ldr	r3, [pc, #628]	; (8004aa0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800482a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800482c:	f003 0303 	and.w	r3, r3, #3
 8004830:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8004832:	4b9b      	ldr	r3, [pc, #620]	; (8004aa0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004834:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004836:	0d1b      	lsrs	r3, r3, #20
 8004838:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800483c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800483e:	4b98      	ldr	r3, [pc, #608]	; (8004aa0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004840:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004842:	0a1b      	lsrs	r3, r3, #8
 8004844:	f003 0301 	and.w	r3, r3, #1
 8004848:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800484a:	4b95      	ldr	r3, [pc, #596]	; (8004aa0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800484c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800484e:	08db      	lsrs	r3, r3, #3
 8004850:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004854:	693a      	ldr	r2, [r7, #16]
 8004856:	fb02 f303 	mul.w	r3, r2, r3
 800485a:	ee07 3a90 	vmov	s15, r3
 800485e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004862:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004866:	697b      	ldr	r3, [r7, #20]
 8004868:	2b00      	cmp	r3, #0
 800486a:	f000 810a 	beq.w	8004a82 <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 800486e:	69bb      	ldr	r3, [r7, #24]
 8004870:	2b01      	cmp	r3, #1
 8004872:	d05a      	beq.n	800492a <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 8004874:	2b01      	cmp	r3, #1
 8004876:	d302      	bcc.n	800487e <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 8004878:	2b02      	cmp	r3, #2
 800487a:	d078      	beq.n	800496e <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 800487c:	e099      	b.n	80049b2 <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800487e:	4b88      	ldr	r3, [pc, #544]	; (8004aa0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f003 0320 	and.w	r3, r3, #32
 8004886:	2b00      	cmp	r3, #0
 8004888:	d02d      	beq.n	80048e6 <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800488a:	4b85      	ldr	r3, [pc, #532]	; (8004aa0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	08db      	lsrs	r3, r3, #3
 8004890:	f003 0303 	and.w	r3, r3, #3
 8004894:	4a83      	ldr	r2, [pc, #524]	; (8004aa4 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 8004896:	fa22 f303 	lsr.w	r3, r2, r3
 800489a:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800489c:	68bb      	ldr	r3, [r7, #8]
 800489e:	ee07 3a90 	vmov	s15, r3
 80048a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048a6:	697b      	ldr	r3, [r7, #20]
 80048a8:	ee07 3a90 	vmov	s15, r3
 80048ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048b0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048b4:	4b7a      	ldr	r3, [pc, #488]	; (8004aa0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80048b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048bc:	ee07 3a90 	vmov	s15, r3
 80048c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048c4:	ed97 6a03 	vldr	s12, [r7, #12]
 80048c8:	eddf 5a77 	vldr	s11, [pc, #476]	; 8004aa8 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80048cc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80048d0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80048d4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80048d8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80048dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048e0:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80048e4:	e087      	b.n	80049f6 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80048e6:	697b      	ldr	r3, [r7, #20]
 80048e8:	ee07 3a90 	vmov	s15, r3
 80048ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048f0:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8004aac <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 80048f4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048f8:	4b69      	ldr	r3, [pc, #420]	; (8004aa0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80048fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004900:	ee07 3a90 	vmov	s15, r3
 8004904:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004908:	ed97 6a03 	vldr	s12, [r7, #12]
 800490c:	eddf 5a66 	vldr	s11, [pc, #408]	; 8004aa8 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8004910:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004914:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004918:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800491c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004920:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004924:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004928:	e065      	b.n	80049f6 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800492a:	697b      	ldr	r3, [r7, #20]
 800492c:	ee07 3a90 	vmov	s15, r3
 8004930:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004934:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8004ab0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8004938:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800493c:	4b58      	ldr	r3, [pc, #352]	; (8004aa0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800493e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004940:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004944:	ee07 3a90 	vmov	s15, r3
 8004948:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800494c:	ed97 6a03 	vldr	s12, [r7, #12]
 8004950:	eddf 5a55 	vldr	s11, [pc, #340]	; 8004aa8 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8004954:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004958:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800495c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004960:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004964:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004968:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800496c:	e043      	b.n	80049f6 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800496e:	697b      	ldr	r3, [r7, #20]
 8004970:	ee07 3a90 	vmov	s15, r3
 8004974:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004978:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8004ab4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 800497c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004980:	4b47      	ldr	r3, [pc, #284]	; (8004aa0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004984:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004988:	ee07 3a90 	vmov	s15, r3
 800498c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004990:	ed97 6a03 	vldr	s12, [r7, #12]
 8004994:	eddf 5a44 	vldr	s11, [pc, #272]	; 8004aa8 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8004998:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800499c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80049a0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80049a4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80049a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049ac:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80049b0:	e021      	b.n	80049f6 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80049b2:	697b      	ldr	r3, [r7, #20]
 80049b4:	ee07 3a90 	vmov	s15, r3
 80049b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049bc:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8004ab0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 80049c0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80049c4:	4b36      	ldr	r3, [pc, #216]	; (8004aa0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80049c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049cc:	ee07 3a90 	vmov	s15, r3
 80049d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049d4:	ed97 6a03 	vldr	s12, [r7, #12]
 80049d8:	eddf 5a33 	vldr	s11, [pc, #204]	; 8004aa8 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80049dc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80049e0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80049e4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80049e8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80049ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049f0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80049f4:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80049f6:	4b2a      	ldr	r3, [pc, #168]	; (8004aa0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80049f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049fa:	0a5b      	lsrs	r3, r3, #9
 80049fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a00:	ee07 3a90 	vmov	s15, r3
 8004a04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a08:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004a0c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004a10:	edd7 6a07 	vldr	s13, [r7, #28]
 8004a14:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a18:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a1c:	ee17 2a90 	vmov	r2, s15
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8004a24:	4b1e      	ldr	r3, [pc, #120]	; (8004aa0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a28:	0c1b      	lsrs	r3, r3, #16
 8004a2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a2e:	ee07 3a90 	vmov	s15, r3
 8004a32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a36:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004a3a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004a3e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004a42:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a46:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a4a:	ee17 2a90 	vmov	r2, s15
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8004a52:	4b13      	ldr	r3, [pc, #76]	; (8004aa0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a56:	0e1b      	lsrs	r3, r3, #24
 8004a58:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a5c:	ee07 3a90 	vmov	s15, r3
 8004a60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a64:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004a68:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004a6c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004a70:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a74:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a78:	ee17 2a90 	vmov	r2, s15
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004a80:	e008      	b.n	8004a94 <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2200      	movs	r2, #0
 8004a86:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	2200      	movs	r2, #0
 8004a92:	609a      	str	r2, [r3, #8]
}
 8004a94:	bf00      	nop
 8004a96:	3724      	adds	r7, #36	; 0x24
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9e:	4770      	bx	lr
 8004aa0:	58024400 	.word	0x58024400
 8004aa4:	03d09000 	.word	0x03d09000
 8004aa8:	46000000 	.word	0x46000000
 8004aac:	4c742400 	.word	0x4c742400
 8004ab0:	4a742400 	.word	0x4a742400
 8004ab4:	4af42400 	.word	0x4af42400

08004ab8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b084      	sub	sp, #16
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
 8004ac0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004ac6:	4b53      	ldr	r3, [pc, #332]	; (8004c14 <RCCEx_PLL2_Config+0x15c>)
 8004ac8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aca:	f003 0303 	and.w	r3, r3, #3
 8004ace:	2b03      	cmp	r3, #3
 8004ad0:	d101      	bne.n	8004ad6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	e099      	b.n	8004c0a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004ad6:	4b4f      	ldr	r3, [pc, #316]	; (8004c14 <RCCEx_PLL2_Config+0x15c>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	4a4e      	ldr	r2, [pc, #312]	; (8004c14 <RCCEx_PLL2_Config+0x15c>)
 8004adc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004ae0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ae2:	f7fc fa61 	bl	8000fa8 <HAL_GetTick>
 8004ae6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004ae8:	e008      	b.n	8004afc <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004aea:	f7fc fa5d 	bl	8000fa8 <HAL_GetTick>
 8004aee:	4602      	mov	r2, r0
 8004af0:	68bb      	ldr	r3, [r7, #8]
 8004af2:	1ad3      	subs	r3, r2, r3
 8004af4:	2b02      	cmp	r3, #2
 8004af6:	d901      	bls.n	8004afc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004af8:	2303      	movs	r3, #3
 8004afa:	e086      	b.n	8004c0a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004afc:	4b45      	ldr	r3, [pc, #276]	; (8004c14 <RCCEx_PLL2_Config+0x15c>)
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d1f0      	bne.n	8004aea <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004b08:	4b42      	ldr	r3, [pc, #264]	; (8004c14 <RCCEx_PLL2_Config+0x15c>)
 8004b0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b0c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	031b      	lsls	r3, r3, #12
 8004b16:	493f      	ldr	r1, [pc, #252]	; (8004c14 <RCCEx_PLL2_Config+0x15c>)
 8004b18:	4313      	orrs	r3, r2
 8004b1a:	628b      	str	r3, [r1, #40]	; 0x28
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	685b      	ldr	r3, [r3, #4]
 8004b20:	3b01      	subs	r3, #1
 8004b22:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	689b      	ldr	r3, [r3, #8]
 8004b2a:	3b01      	subs	r3, #1
 8004b2c:	025b      	lsls	r3, r3, #9
 8004b2e:	b29b      	uxth	r3, r3
 8004b30:	431a      	orrs	r2, r3
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	68db      	ldr	r3, [r3, #12]
 8004b36:	3b01      	subs	r3, #1
 8004b38:	041b      	lsls	r3, r3, #16
 8004b3a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004b3e:	431a      	orrs	r2, r3
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	691b      	ldr	r3, [r3, #16]
 8004b44:	3b01      	subs	r3, #1
 8004b46:	061b      	lsls	r3, r3, #24
 8004b48:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004b4c:	4931      	ldr	r1, [pc, #196]	; (8004c14 <RCCEx_PLL2_Config+0x15c>)
 8004b4e:	4313      	orrs	r3, r2
 8004b50:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004b52:	4b30      	ldr	r3, [pc, #192]	; (8004c14 <RCCEx_PLL2_Config+0x15c>)
 8004b54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b56:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	695b      	ldr	r3, [r3, #20]
 8004b5e:	492d      	ldr	r1, [pc, #180]	; (8004c14 <RCCEx_PLL2_Config+0x15c>)
 8004b60:	4313      	orrs	r3, r2
 8004b62:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004b64:	4b2b      	ldr	r3, [pc, #172]	; (8004c14 <RCCEx_PLL2_Config+0x15c>)
 8004b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b68:	f023 0220 	bic.w	r2, r3, #32
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	699b      	ldr	r3, [r3, #24]
 8004b70:	4928      	ldr	r1, [pc, #160]	; (8004c14 <RCCEx_PLL2_Config+0x15c>)
 8004b72:	4313      	orrs	r3, r2
 8004b74:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004b76:	4b27      	ldr	r3, [pc, #156]	; (8004c14 <RCCEx_PLL2_Config+0x15c>)
 8004b78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b7a:	4a26      	ldr	r2, [pc, #152]	; (8004c14 <RCCEx_PLL2_Config+0x15c>)
 8004b7c:	f023 0310 	bic.w	r3, r3, #16
 8004b80:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004b82:	4b24      	ldr	r3, [pc, #144]	; (8004c14 <RCCEx_PLL2_Config+0x15c>)
 8004b84:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004b86:	4b24      	ldr	r3, [pc, #144]	; (8004c18 <RCCEx_PLL2_Config+0x160>)
 8004b88:	4013      	ands	r3, r2
 8004b8a:	687a      	ldr	r2, [r7, #4]
 8004b8c:	69d2      	ldr	r2, [r2, #28]
 8004b8e:	00d2      	lsls	r2, r2, #3
 8004b90:	4920      	ldr	r1, [pc, #128]	; (8004c14 <RCCEx_PLL2_Config+0x15c>)
 8004b92:	4313      	orrs	r3, r2
 8004b94:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004b96:	4b1f      	ldr	r3, [pc, #124]	; (8004c14 <RCCEx_PLL2_Config+0x15c>)
 8004b98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b9a:	4a1e      	ldr	r2, [pc, #120]	; (8004c14 <RCCEx_PLL2_Config+0x15c>)
 8004b9c:	f043 0310 	orr.w	r3, r3, #16
 8004ba0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d106      	bne.n	8004bb6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004ba8:	4b1a      	ldr	r3, [pc, #104]	; (8004c14 <RCCEx_PLL2_Config+0x15c>)
 8004baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bac:	4a19      	ldr	r2, [pc, #100]	; (8004c14 <RCCEx_PLL2_Config+0x15c>)
 8004bae:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004bb2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004bb4:	e00f      	b.n	8004bd6 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	2b01      	cmp	r3, #1
 8004bba:	d106      	bne.n	8004bca <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004bbc:	4b15      	ldr	r3, [pc, #84]	; (8004c14 <RCCEx_PLL2_Config+0x15c>)
 8004bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bc0:	4a14      	ldr	r2, [pc, #80]	; (8004c14 <RCCEx_PLL2_Config+0x15c>)
 8004bc2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004bc6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004bc8:	e005      	b.n	8004bd6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004bca:	4b12      	ldr	r3, [pc, #72]	; (8004c14 <RCCEx_PLL2_Config+0x15c>)
 8004bcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bce:	4a11      	ldr	r2, [pc, #68]	; (8004c14 <RCCEx_PLL2_Config+0x15c>)
 8004bd0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004bd4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004bd6:	4b0f      	ldr	r3, [pc, #60]	; (8004c14 <RCCEx_PLL2_Config+0x15c>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	4a0e      	ldr	r2, [pc, #56]	; (8004c14 <RCCEx_PLL2_Config+0x15c>)
 8004bdc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004be0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004be2:	f7fc f9e1 	bl	8000fa8 <HAL_GetTick>
 8004be6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004be8:	e008      	b.n	8004bfc <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004bea:	f7fc f9dd 	bl	8000fa8 <HAL_GetTick>
 8004bee:	4602      	mov	r2, r0
 8004bf0:	68bb      	ldr	r3, [r7, #8]
 8004bf2:	1ad3      	subs	r3, r2, r3
 8004bf4:	2b02      	cmp	r3, #2
 8004bf6:	d901      	bls.n	8004bfc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004bf8:	2303      	movs	r3, #3
 8004bfa:	e006      	b.n	8004c0a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004bfc:	4b05      	ldr	r3, [pc, #20]	; (8004c14 <RCCEx_PLL2_Config+0x15c>)
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d0f0      	beq.n	8004bea <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004c08:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	3710      	adds	r7, #16
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	bd80      	pop	{r7, pc}
 8004c12:	bf00      	nop
 8004c14:	58024400 	.word	0x58024400
 8004c18:	ffff0007 	.word	0xffff0007

08004c1c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b084      	sub	sp, #16
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
 8004c24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004c26:	2300      	movs	r3, #0
 8004c28:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004c2a:	4b53      	ldr	r3, [pc, #332]	; (8004d78 <RCCEx_PLL3_Config+0x15c>)
 8004c2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c2e:	f003 0303 	and.w	r3, r3, #3
 8004c32:	2b03      	cmp	r3, #3
 8004c34:	d101      	bne.n	8004c3a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004c36:	2301      	movs	r3, #1
 8004c38:	e099      	b.n	8004d6e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004c3a:	4b4f      	ldr	r3, [pc, #316]	; (8004d78 <RCCEx_PLL3_Config+0x15c>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	4a4e      	ldr	r2, [pc, #312]	; (8004d78 <RCCEx_PLL3_Config+0x15c>)
 8004c40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c44:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c46:	f7fc f9af 	bl	8000fa8 <HAL_GetTick>
 8004c4a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004c4c:	e008      	b.n	8004c60 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004c4e:	f7fc f9ab 	bl	8000fa8 <HAL_GetTick>
 8004c52:	4602      	mov	r2, r0
 8004c54:	68bb      	ldr	r3, [r7, #8]
 8004c56:	1ad3      	subs	r3, r2, r3
 8004c58:	2b02      	cmp	r3, #2
 8004c5a:	d901      	bls.n	8004c60 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004c5c:	2303      	movs	r3, #3
 8004c5e:	e086      	b.n	8004d6e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004c60:	4b45      	ldr	r3, [pc, #276]	; (8004d78 <RCCEx_PLL3_Config+0x15c>)
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d1f0      	bne.n	8004c4e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004c6c:	4b42      	ldr	r3, [pc, #264]	; (8004d78 <RCCEx_PLL3_Config+0x15c>)
 8004c6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c70:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	051b      	lsls	r3, r3, #20
 8004c7a:	493f      	ldr	r1, [pc, #252]	; (8004d78 <RCCEx_PLL3_Config+0x15c>)
 8004c7c:	4313      	orrs	r3, r2
 8004c7e:	628b      	str	r3, [r1, #40]	; 0x28
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	685b      	ldr	r3, [r3, #4]
 8004c84:	3b01      	subs	r3, #1
 8004c86:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	689b      	ldr	r3, [r3, #8]
 8004c8e:	3b01      	subs	r3, #1
 8004c90:	025b      	lsls	r3, r3, #9
 8004c92:	b29b      	uxth	r3, r3
 8004c94:	431a      	orrs	r2, r3
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	68db      	ldr	r3, [r3, #12]
 8004c9a:	3b01      	subs	r3, #1
 8004c9c:	041b      	lsls	r3, r3, #16
 8004c9e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004ca2:	431a      	orrs	r2, r3
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	691b      	ldr	r3, [r3, #16]
 8004ca8:	3b01      	subs	r3, #1
 8004caa:	061b      	lsls	r3, r3, #24
 8004cac:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004cb0:	4931      	ldr	r1, [pc, #196]	; (8004d78 <RCCEx_PLL3_Config+0x15c>)
 8004cb2:	4313      	orrs	r3, r2
 8004cb4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004cb6:	4b30      	ldr	r3, [pc, #192]	; (8004d78 <RCCEx_PLL3_Config+0x15c>)
 8004cb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cba:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	695b      	ldr	r3, [r3, #20]
 8004cc2:	492d      	ldr	r1, [pc, #180]	; (8004d78 <RCCEx_PLL3_Config+0x15c>)
 8004cc4:	4313      	orrs	r3, r2
 8004cc6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004cc8:	4b2b      	ldr	r3, [pc, #172]	; (8004d78 <RCCEx_PLL3_Config+0x15c>)
 8004cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ccc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	699b      	ldr	r3, [r3, #24]
 8004cd4:	4928      	ldr	r1, [pc, #160]	; (8004d78 <RCCEx_PLL3_Config+0x15c>)
 8004cd6:	4313      	orrs	r3, r2
 8004cd8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004cda:	4b27      	ldr	r3, [pc, #156]	; (8004d78 <RCCEx_PLL3_Config+0x15c>)
 8004cdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cde:	4a26      	ldr	r2, [pc, #152]	; (8004d78 <RCCEx_PLL3_Config+0x15c>)
 8004ce0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ce4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004ce6:	4b24      	ldr	r3, [pc, #144]	; (8004d78 <RCCEx_PLL3_Config+0x15c>)
 8004ce8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004cea:	4b24      	ldr	r3, [pc, #144]	; (8004d7c <RCCEx_PLL3_Config+0x160>)
 8004cec:	4013      	ands	r3, r2
 8004cee:	687a      	ldr	r2, [r7, #4]
 8004cf0:	69d2      	ldr	r2, [r2, #28]
 8004cf2:	00d2      	lsls	r2, r2, #3
 8004cf4:	4920      	ldr	r1, [pc, #128]	; (8004d78 <RCCEx_PLL3_Config+0x15c>)
 8004cf6:	4313      	orrs	r3, r2
 8004cf8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004cfa:	4b1f      	ldr	r3, [pc, #124]	; (8004d78 <RCCEx_PLL3_Config+0x15c>)
 8004cfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cfe:	4a1e      	ldr	r2, [pc, #120]	; (8004d78 <RCCEx_PLL3_Config+0x15c>)
 8004d00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d04:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d106      	bne.n	8004d1a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004d0c:	4b1a      	ldr	r3, [pc, #104]	; (8004d78 <RCCEx_PLL3_Config+0x15c>)
 8004d0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d10:	4a19      	ldr	r2, [pc, #100]	; (8004d78 <RCCEx_PLL3_Config+0x15c>)
 8004d12:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004d16:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004d18:	e00f      	b.n	8004d3a <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	2b01      	cmp	r3, #1
 8004d1e:	d106      	bne.n	8004d2e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004d20:	4b15      	ldr	r3, [pc, #84]	; (8004d78 <RCCEx_PLL3_Config+0x15c>)
 8004d22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d24:	4a14      	ldr	r2, [pc, #80]	; (8004d78 <RCCEx_PLL3_Config+0x15c>)
 8004d26:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004d2a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004d2c:	e005      	b.n	8004d3a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004d2e:	4b12      	ldr	r3, [pc, #72]	; (8004d78 <RCCEx_PLL3_Config+0x15c>)
 8004d30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d32:	4a11      	ldr	r2, [pc, #68]	; (8004d78 <RCCEx_PLL3_Config+0x15c>)
 8004d34:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004d38:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004d3a:	4b0f      	ldr	r3, [pc, #60]	; (8004d78 <RCCEx_PLL3_Config+0x15c>)
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	4a0e      	ldr	r2, [pc, #56]	; (8004d78 <RCCEx_PLL3_Config+0x15c>)
 8004d40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d44:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d46:	f7fc f92f 	bl	8000fa8 <HAL_GetTick>
 8004d4a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004d4c:	e008      	b.n	8004d60 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004d4e:	f7fc f92b 	bl	8000fa8 <HAL_GetTick>
 8004d52:	4602      	mov	r2, r0
 8004d54:	68bb      	ldr	r3, [r7, #8]
 8004d56:	1ad3      	subs	r3, r2, r3
 8004d58:	2b02      	cmp	r3, #2
 8004d5a:	d901      	bls.n	8004d60 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004d5c:	2303      	movs	r3, #3
 8004d5e:	e006      	b.n	8004d6e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004d60:	4b05      	ldr	r3, [pc, #20]	; (8004d78 <RCCEx_PLL3_Config+0x15c>)
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d0f0      	beq.n	8004d4e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004d6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d6e:	4618      	mov	r0, r3
 8004d70:	3710      	adds	r7, #16
 8004d72:	46bd      	mov	sp, r7
 8004d74:	bd80      	pop	{r7, pc}
 8004d76:	bf00      	nop
 8004d78:	58024400 	.word	0x58024400
 8004d7c:	ffff0007 	.word	0xffff0007

08004d80 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b082      	sub	sp, #8
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d101      	bne.n	8004d92 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004d8e:	2301      	movs	r3, #1
 8004d90:	e042      	b.n	8004e18 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d106      	bne.n	8004daa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2200      	movs	r2, #0
 8004da0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004da4:	6878      	ldr	r0, [r7, #4]
 8004da6:	f7fb ff3b 	bl	8000c20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2224      	movs	r2, #36	; 0x24
 8004dae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	681a      	ldr	r2, [r3, #0]
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f022 0201 	bic.w	r2, r2, #1
 8004dc0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004dc2:	6878      	ldr	r0, [r7, #4]
 8004dc4:	f000 f82c 	bl	8004e20 <UART_SetConfig>
 8004dc8:	4603      	mov	r3, r0
 8004dca:	2b01      	cmp	r3, #1
 8004dcc:	d101      	bne.n	8004dd2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004dce:	2301      	movs	r3, #1
 8004dd0:	e022      	b.n	8004e18 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d002      	beq.n	8004de0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004dda:	6878      	ldr	r0, [r7, #4]
 8004ddc:	f000 fdd0 	bl	8005980 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	685a      	ldr	r2, [r3, #4]
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004dee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	689a      	ldr	r2, [r3, #8]
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004dfe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	681a      	ldr	r2, [r3, #0]
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f042 0201 	orr.w	r2, r2, #1
 8004e0e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004e10:	6878      	ldr	r0, [r7, #4]
 8004e12:	f000 fe57 	bl	8005ac4 <UART_CheckIdleState>
 8004e16:	4603      	mov	r3, r0
}
 8004e18:	4618      	mov	r0, r3
 8004e1a:	3708      	adds	r7, #8
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	bd80      	pop	{r7, pc}

08004e20 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e20:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8004e24:	b08e      	sub	sp, #56	; 0x38
 8004e26:	af00      	add	r7, sp, #0
 8004e28:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	689a      	ldr	r2, [r3, #8]
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	691b      	ldr	r3, [r3, #16]
 8004e38:	431a      	orrs	r2, r3
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	695b      	ldr	r3, [r3, #20]
 8004e3e:	431a      	orrs	r2, r3
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	69db      	ldr	r3, [r3, #28]
 8004e44:	4313      	orrs	r3, r2
 8004e46:	637b      	str	r3, [r7, #52]	; 0x34
  tmpreg |= (uint32_t)huart->FifoMode;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004e4c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004e4e:	4313      	orrs	r3, r2
 8004e50:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	681a      	ldr	r2, [r3, #0]
 8004e58:	4bc1      	ldr	r3, [pc, #772]	; (8005160 <UART_SetConfig+0x340>)
 8004e5a:	4013      	ands	r3, r2
 8004e5c:	687a      	ldr	r2, [r7, #4]
 8004e5e:	6812      	ldr	r2, [r2, #0]
 8004e60:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004e62:	430b      	orrs	r3, r1
 8004e64:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	685b      	ldr	r3, [r3, #4]
 8004e6c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	68da      	ldr	r2, [r3, #12]
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	430a      	orrs	r2, r1
 8004e7a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	699b      	ldr	r3, [r3, #24]
 8004e80:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	4ab7      	ldr	r2, [pc, #732]	; (8005164 <UART_SetConfig+0x344>)
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d004      	beq.n	8004e96 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6a1b      	ldr	r3, [r3, #32]
 8004e90:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004e92:	4313      	orrs	r3, r2
 8004e94:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	689a      	ldr	r2, [r3, #8]
 8004e9c:	4bb2      	ldr	r3, [pc, #712]	; (8005168 <UART_SetConfig+0x348>)
 8004e9e:	4013      	ands	r3, r2
 8004ea0:	687a      	ldr	r2, [r7, #4]
 8004ea2:	6812      	ldr	r2, [r2, #0]
 8004ea4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004ea6:	430b      	orrs	r3, r1
 8004ea8:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eb0:	f023 010f 	bic.w	r1, r3, #15
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	430a      	orrs	r2, r1
 8004ebe:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	4aa9      	ldr	r2, [pc, #676]	; (800516c <UART_SetConfig+0x34c>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d177      	bne.n	8004fba <UART_SetConfig+0x19a>
 8004eca:	4ba9      	ldr	r3, [pc, #676]	; (8005170 <UART_SetConfig+0x350>)
 8004ecc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ece:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004ed2:	2b28      	cmp	r3, #40	; 0x28
 8004ed4:	d86c      	bhi.n	8004fb0 <UART_SetConfig+0x190>
 8004ed6:	a201      	add	r2, pc, #4	; (adr r2, 8004edc <UART_SetConfig+0xbc>)
 8004ed8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004edc:	08004f81 	.word	0x08004f81
 8004ee0:	08004fb1 	.word	0x08004fb1
 8004ee4:	08004fb1 	.word	0x08004fb1
 8004ee8:	08004fb1 	.word	0x08004fb1
 8004eec:	08004fb1 	.word	0x08004fb1
 8004ef0:	08004fb1 	.word	0x08004fb1
 8004ef4:	08004fb1 	.word	0x08004fb1
 8004ef8:	08004fb1 	.word	0x08004fb1
 8004efc:	08004f89 	.word	0x08004f89
 8004f00:	08004fb1 	.word	0x08004fb1
 8004f04:	08004fb1 	.word	0x08004fb1
 8004f08:	08004fb1 	.word	0x08004fb1
 8004f0c:	08004fb1 	.word	0x08004fb1
 8004f10:	08004fb1 	.word	0x08004fb1
 8004f14:	08004fb1 	.word	0x08004fb1
 8004f18:	08004fb1 	.word	0x08004fb1
 8004f1c:	08004f91 	.word	0x08004f91
 8004f20:	08004fb1 	.word	0x08004fb1
 8004f24:	08004fb1 	.word	0x08004fb1
 8004f28:	08004fb1 	.word	0x08004fb1
 8004f2c:	08004fb1 	.word	0x08004fb1
 8004f30:	08004fb1 	.word	0x08004fb1
 8004f34:	08004fb1 	.word	0x08004fb1
 8004f38:	08004fb1 	.word	0x08004fb1
 8004f3c:	08004f99 	.word	0x08004f99
 8004f40:	08004fb1 	.word	0x08004fb1
 8004f44:	08004fb1 	.word	0x08004fb1
 8004f48:	08004fb1 	.word	0x08004fb1
 8004f4c:	08004fb1 	.word	0x08004fb1
 8004f50:	08004fb1 	.word	0x08004fb1
 8004f54:	08004fb1 	.word	0x08004fb1
 8004f58:	08004fb1 	.word	0x08004fb1
 8004f5c:	08004fa1 	.word	0x08004fa1
 8004f60:	08004fb1 	.word	0x08004fb1
 8004f64:	08004fb1 	.word	0x08004fb1
 8004f68:	08004fb1 	.word	0x08004fb1
 8004f6c:	08004fb1 	.word	0x08004fb1
 8004f70:	08004fb1 	.word	0x08004fb1
 8004f74:	08004fb1 	.word	0x08004fb1
 8004f78:	08004fb1 	.word	0x08004fb1
 8004f7c:	08004fa9 	.word	0x08004fa9
 8004f80:	2301      	movs	r3, #1
 8004f82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004f86:	e233      	b.n	80053f0 <UART_SetConfig+0x5d0>
 8004f88:	2304      	movs	r3, #4
 8004f8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004f8e:	e22f      	b.n	80053f0 <UART_SetConfig+0x5d0>
 8004f90:	2308      	movs	r3, #8
 8004f92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004f96:	e22b      	b.n	80053f0 <UART_SetConfig+0x5d0>
 8004f98:	2310      	movs	r3, #16
 8004f9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004f9e:	e227      	b.n	80053f0 <UART_SetConfig+0x5d0>
 8004fa0:	2320      	movs	r3, #32
 8004fa2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004fa6:	e223      	b.n	80053f0 <UART_SetConfig+0x5d0>
 8004fa8:	2340      	movs	r3, #64	; 0x40
 8004faa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004fae:	e21f      	b.n	80053f0 <UART_SetConfig+0x5d0>
 8004fb0:	2380      	movs	r3, #128	; 0x80
 8004fb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004fb6:	bf00      	nop
 8004fb8:	e21a      	b.n	80053f0 <UART_SetConfig+0x5d0>
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	4a6d      	ldr	r2, [pc, #436]	; (8005174 <UART_SetConfig+0x354>)
 8004fc0:	4293      	cmp	r3, r2
 8004fc2:	d132      	bne.n	800502a <UART_SetConfig+0x20a>
 8004fc4:	4b6a      	ldr	r3, [pc, #424]	; (8005170 <UART_SetConfig+0x350>)
 8004fc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fc8:	f003 0307 	and.w	r3, r3, #7
 8004fcc:	2b05      	cmp	r3, #5
 8004fce:	d827      	bhi.n	8005020 <UART_SetConfig+0x200>
 8004fd0:	a201      	add	r2, pc, #4	; (adr r2, 8004fd8 <UART_SetConfig+0x1b8>)
 8004fd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fd6:	bf00      	nop
 8004fd8:	08004ff1 	.word	0x08004ff1
 8004fdc:	08004ff9 	.word	0x08004ff9
 8004fe0:	08005001 	.word	0x08005001
 8004fe4:	08005009 	.word	0x08005009
 8004fe8:	08005011 	.word	0x08005011
 8004fec:	08005019 	.word	0x08005019
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004ff6:	e1fb      	b.n	80053f0 <UART_SetConfig+0x5d0>
 8004ff8:	2304      	movs	r3, #4
 8004ffa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004ffe:	e1f7      	b.n	80053f0 <UART_SetConfig+0x5d0>
 8005000:	2308      	movs	r3, #8
 8005002:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005006:	e1f3      	b.n	80053f0 <UART_SetConfig+0x5d0>
 8005008:	2310      	movs	r3, #16
 800500a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800500e:	e1ef      	b.n	80053f0 <UART_SetConfig+0x5d0>
 8005010:	2320      	movs	r3, #32
 8005012:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005016:	e1eb      	b.n	80053f0 <UART_SetConfig+0x5d0>
 8005018:	2340      	movs	r3, #64	; 0x40
 800501a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800501e:	e1e7      	b.n	80053f0 <UART_SetConfig+0x5d0>
 8005020:	2380      	movs	r3, #128	; 0x80
 8005022:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005026:	bf00      	nop
 8005028:	e1e2      	b.n	80053f0 <UART_SetConfig+0x5d0>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	4a52      	ldr	r2, [pc, #328]	; (8005178 <UART_SetConfig+0x358>)
 8005030:	4293      	cmp	r3, r2
 8005032:	d132      	bne.n	800509a <UART_SetConfig+0x27a>
 8005034:	4b4e      	ldr	r3, [pc, #312]	; (8005170 <UART_SetConfig+0x350>)
 8005036:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005038:	f003 0307 	and.w	r3, r3, #7
 800503c:	2b05      	cmp	r3, #5
 800503e:	d827      	bhi.n	8005090 <UART_SetConfig+0x270>
 8005040:	a201      	add	r2, pc, #4	; (adr r2, 8005048 <UART_SetConfig+0x228>)
 8005042:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005046:	bf00      	nop
 8005048:	08005061 	.word	0x08005061
 800504c:	08005069 	.word	0x08005069
 8005050:	08005071 	.word	0x08005071
 8005054:	08005079 	.word	0x08005079
 8005058:	08005081 	.word	0x08005081
 800505c:	08005089 	.word	0x08005089
 8005060:	2300      	movs	r3, #0
 8005062:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005066:	e1c3      	b.n	80053f0 <UART_SetConfig+0x5d0>
 8005068:	2304      	movs	r3, #4
 800506a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800506e:	e1bf      	b.n	80053f0 <UART_SetConfig+0x5d0>
 8005070:	2308      	movs	r3, #8
 8005072:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005076:	e1bb      	b.n	80053f0 <UART_SetConfig+0x5d0>
 8005078:	2310      	movs	r3, #16
 800507a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800507e:	e1b7      	b.n	80053f0 <UART_SetConfig+0x5d0>
 8005080:	2320      	movs	r3, #32
 8005082:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005086:	e1b3      	b.n	80053f0 <UART_SetConfig+0x5d0>
 8005088:	2340      	movs	r3, #64	; 0x40
 800508a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800508e:	e1af      	b.n	80053f0 <UART_SetConfig+0x5d0>
 8005090:	2380      	movs	r3, #128	; 0x80
 8005092:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005096:	bf00      	nop
 8005098:	e1aa      	b.n	80053f0 <UART_SetConfig+0x5d0>
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	4a37      	ldr	r2, [pc, #220]	; (800517c <UART_SetConfig+0x35c>)
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d132      	bne.n	800510a <UART_SetConfig+0x2ea>
 80050a4:	4b32      	ldr	r3, [pc, #200]	; (8005170 <UART_SetConfig+0x350>)
 80050a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050a8:	f003 0307 	and.w	r3, r3, #7
 80050ac:	2b05      	cmp	r3, #5
 80050ae:	d827      	bhi.n	8005100 <UART_SetConfig+0x2e0>
 80050b0:	a201      	add	r2, pc, #4	; (adr r2, 80050b8 <UART_SetConfig+0x298>)
 80050b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050b6:	bf00      	nop
 80050b8:	080050d1 	.word	0x080050d1
 80050bc:	080050d9 	.word	0x080050d9
 80050c0:	080050e1 	.word	0x080050e1
 80050c4:	080050e9 	.word	0x080050e9
 80050c8:	080050f1 	.word	0x080050f1
 80050cc:	080050f9 	.word	0x080050f9
 80050d0:	2300      	movs	r3, #0
 80050d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80050d6:	e18b      	b.n	80053f0 <UART_SetConfig+0x5d0>
 80050d8:	2304      	movs	r3, #4
 80050da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80050de:	e187      	b.n	80053f0 <UART_SetConfig+0x5d0>
 80050e0:	2308      	movs	r3, #8
 80050e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80050e6:	e183      	b.n	80053f0 <UART_SetConfig+0x5d0>
 80050e8:	2310      	movs	r3, #16
 80050ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80050ee:	e17f      	b.n	80053f0 <UART_SetConfig+0x5d0>
 80050f0:	2320      	movs	r3, #32
 80050f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80050f6:	e17b      	b.n	80053f0 <UART_SetConfig+0x5d0>
 80050f8:	2340      	movs	r3, #64	; 0x40
 80050fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80050fe:	e177      	b.n	80053f0 <UART_SetConfig+0x5d0>
 8005100:	2380      	movs	r3, #128	; 0x80
 8005102:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005106:	bf00      	nop
 8005108:	e172      	b.n	80053f0 <UART_SetConfig+0x5d0>
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	4a1c      	ldr	r2, [pc, #112]	; (8005180 <UART_SetConfig+0x360>)
 8005110:	4293      	cmp	r3, r2
 8005112:	d144      	bne.n	800519e <UART_SetConfig+0x37e>
 8005114:	4b16      	ldr	r3, [pc, #88]	; (8005170 <UART_SetConfig+0x350>)
 8005116:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005118:	f003 0307 	and.w	r3, r3, #7
 800511c:	2b05      	cmp	r3, #5
 800511e:	d839      	bhi.n	8005194 <UART_SetConfig+0x374>
 8005120:	a201      	add	r2, pc, #4	; (adr r2, 8005128 <UART_SetConfig+0x308>)
 8005122:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005126:	bf00      	nop
 8005128:	08005141 	.word	0x08005141
 800512c:	08005149 	.word	0x08005149
 8005130:	08005151 	.word	0x08005151
 8005134:	08005159 	.word	0x08005159
 8005138:	08005185 	.word	0x08005185
 800513c:	0800518d 	.word	0x0800518d
 8005140:	2300      	movs	r3, #0
 8005142:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005146:	e153      	b.n	80053f0 <UART_SetConfig+0x5d0>
 8005148:	2304      	movs	r3, #4
 800514a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800514e:	e14f      	b.n	80053f0 <UART_SetConfig+0x5d0>
 8005150:	2308      	movs	r3, #8
 8005152:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005156:	e14b      	b.n	80053f0 <UART_SetConfig+0x5d0>
 8005158:	2310      	movs	r3, #16
 800515a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800515e:	e147      	b.n	80053f0 <UART_SetConfig+0x5d0>
 8005160:	cfff69f3 	.word	0xcfff69f3
 8005164:	58000c00 	.word	0x58000c00
 8005168:	11fff4ff 	.word	0x11fff4ff
 800516c:	40011000 	.word	0x40011000
 8005170:	58024400 	.word	0x58024400
 8005174:	40004400 	.word	0x40004400
 8005178:	40004800 	.word	0x40004800
 800517c:	40004c00 	.word	0x40004c00
 8005180:	40005000 	.word	0x40005000
 8005184:	2320      	movs	r3, #32
 8005186:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800518a:	e131      	b.n	80053f0 <UART_SetConfig+0x5d0>
 800518c:	2340      	movs	r3, #64	; 0x40
 800518e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005192:	e12d      	b.n	80053f0 <UART_SetConfig+0x5d0>
 8005194:	2380      	movs	r3, #128	; 0x80
 8005196:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800519a:	bf00      	nop
 800519c:	e128      	b.n	80053f0 <UART_SetConfig+0x5d0>
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	4ab6      	ldr	r2, [pc, #728]	; (800547c <UART_SetConfig+0x65c>)
 80051a4:	4293      	cmp	r3, r2
 80051a6:	d178      	bne.n	800529a <UART_SetConfig+0x47a>
 80051a8:	4bb5      	ldr	r3, [pc, #724]	; (8005480 <UART_SetConfig+0x660>)
 80051aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051ac:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80051b0:	2b28      	cmp	r3, #40	; 0x28
 80051b2:	d86d      	bhi.n	8005290 <UART_SetConfig+0x470>
 80051b4:	a201      	add	r2, pc, #4	; (adr r2, 80051bc <UART_SetConfig+0x39c>)
 80051b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051ba:	bf00      	nop
 80051bc:	08005261 	.word	0x08005261
 80051c0:	08005291 	.word	0x08005291
 80051c4:	08005291 	.word	0x08005291
 80051c8:	08005291 	.word	0x08005291
 80051cc:	08005291 	.word	0x08005291
 80051d0:	08005291 	.word	0x08005291
 80051d4:	08005291 	.word	0x08005291
 80051d8:	08005291 	.word	0x08005291
 80051dc:	08005269 	.word	0x08005269
 80051e0:	08005291 	.word	0x08005291
 80051e4:	08005291 	.word	0x08005291
 80051e8:	08005291 	.word	0x08005291
 80051ec:	08005291 	.word	0x08005291
 80051f0:	08005291 	.word	0x08005291
 80051f4:	08005291 	.word	0x08005291
 80051f8:	08005291 	.word	0x08005291
 80051fc:	08005271 	.word	0x08005271
 8005200:	08005291 	.word	0x08005291
 8005204:	08005291 	.word	0x08005291
 8005208:	08005291 	.word	0x08005291
 800520c:	08005291 	.word	0x08005291
 8005210:	08005291 	.word	0x08005291
 8005214:	08005291 	.word	0x08005291
 8005218:	08005291 	.word	0x08005291
 800521c:	08005279 	.word	0x08005279
 8005220:	08005291 	.word	0x08005291
 8005224:	08005291 	.word	0x08005291
 8005228:	08005291 	.word	0x08005291
 800522c:	08005291 	.word	0x08005291
 8005230:	08005291 	.word	0x08005291
 8005234:	08005291 	.word	0x08005291
 8005238:	08005291 	.word	0x08005291
 800523c:	08005281 	.word	0x08005281
 8005240:	08005291 	.word	0x08005291
 8005244:	08005291 	.word	0x08005291
 8005248:	08005291 	.word	0x08005291
 800524c:	08005291 	.word	0x08005291
 8005250:	08005291 	.word	0x08005291
 8005254:	08005291 	.word	0x08005291
 8005258:	08005291 	.word	0x08005291
 800525c:	08005289 	.word	0x08005289
 8005260:	2301      	movs	r3, #1
 8005262:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005266:	e0c3      	b.n	80053f0 <UART_SetConfig+0x5d0>
 8005268:	2304      	movs	r3, #4
 800526a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800526e:	e0bf      	b.n	80053f0 <UART_SetConfig+0x5d0>
 8005270:	2308      	movs	r3, #8
 8005272:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005276:	e0bb      	b.n	80053f0 <UART_SetConfig+0x5d0>
 8005278:	2310      	movs	r3, #16
 800527a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800527e:	e0b7      	b.n	80053f0 <UART_SetConfig+0x5d0>
 8005280:	2320      	movs	r3, #32
 8005282:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005286:	e0b3      	b.n	80053f0 <UART_SetConfig+0x5d0>
 8005288:	2340      	movs	r3, #64	; 0x40
 800528a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800528e:	e0af      	b.n	80053f0 <UART_SetConfig+0x5d0>
 8005290:	2380      	movs	r3, #128	; 0x80
 8005292:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005296:	bf00      	nop
 8005298:	e0aa      	b.n	80053f0 <UART_SetConfig+0x5d0>
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	4a79      	ldr	r2, [pc, #484]	; (8005484 <UART_SetConfig+0x664>)
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d132      	bne.n	800530a <UART_SetConfig+0x4ea>
 80052a4:	4b76      	ldr	r3, [pc, #472]	; (8005480 <UART_SetConfig+0x660>)
 80052a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052a8:	f003 0307 	and.w	r3, r3, #7
 80052ac:	2b05      	cmp	r3, #5
 80052ae:	d827      	bhi.n	8005300 <UART_SetConfig+0x4e0>
 80052b0:	a201      	add	r2, pc, #4	; (adr r2, 80052b8 <UART_SetConfig+0x498>)
 80052b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052b6:	bf00      	nop
 80052b8:	080052d1 	.word	0x080052d1
 80052bc:	080052d9 	.word	0x080052d9
 80052c0:	080052e1 	.word	0x080052e1
 80052c4:	080052e9 	.word	0x080052e9
 80052c8:	080052f1 	.word	0x080052f1
 80052cc:	080052f9 	.word	0x080052f9
 80052d0:	2300      	movs	r3, #0
 80052d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80052d6:	e08b      	b.n	80053f0 <UART_SetConfig+0x5d0>
 80052d8:	2304      	movs	r3, #4
 80052da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80052de:	e087      	b.n	80053f0 <UART_SetConfig+0x5d0>
 80052e0:	2308      	movs	r3, #8
 80052e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80052e6:	e083      	b.n	80053f0 <UART_SetConfig+0x5d0>
 80052e8:	2310      	movs	r3, #16
 80052ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80052ee:	e07f      	b.n	80053f0 <UART_SetConfig+0x5d0>
 80052f0:	2320      	movs	r3, #32
 80052f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80052f6:	e07b      	b.n	80053f0 <UART_SetConfig+0x5d0>
 80052f8:	2340      	movs	r3, #64	; 0x40
 80052fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80052fe:	e077      	b.n	80053f0 <UART_SetConfig+0x5d0>
 8005300:	2380      	movs	r3, #128	; 0x80
 8005302:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005306:	bf00      	nop
 8005308:	e072      	b.n	80053f0 <UART_SetConfig+0x5d0>
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	4a5e      	ldr	r2, [pc, #376]	; (8005488 <UART_SetConfig+0x668>)
 8005310:	4293      	cmp	r3, r2
 8005312:	d132      	bne.n	800537a <UART_SetConfig+0x55a>
 8005314:	4b5a      	ldr	r3, [pc, #360]	; (8005480 <UART_SetConfig+0x660>)
 8005316:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005318:	f003 0307 	and.w	r3, r3, #7
 800531c:	2b05      	cmp	r3, #5
 800531e:	d827      	bhi.n	8005370 <UART_SetConfig+0x550>
 8005320:	a201      	add	r2, pc, #4	; (adr r2, 8005328 <UART_SetConfig+0x508>)
 8005322:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005326:	bf00      	nop
 8005328:	08005341 	.word	0x08005341
 800532c:	08005349 	.word	0x08005349
 8005330:	08005351 	.word	0x08005351
 8005334:	08005359 	.word	0x08005359
 8005338:	08005361 	.word	0x08005361
 800533c:	08005369 	.word	0x08005369
 8005340:	2300      	movs	r3, #0
 8005342:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005346:	e053      	b.n	80053f0 <UART_SetConfig+0x5d0>
 8005348:	2304      	movs	r3, #4
 800534a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800534e:	e04f      	b.n	80053f0 <UART_SetConfig+0x5d0>
 8005350:	2308      	movs	r3, #8
 8005352:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005356:	e04b      	b.n	80053f0 <UART_SetConfig+0x5d0>
 8005358:	2310      	movs	r3, #16
 800535a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800535e:	e047      	b.n	80053f0 <UART_SetConfig+0x5d0>
 8005360:	2320      	movs	r3, #32
 8005362:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005366:	e043      	b.n	80053f0 <UART_SetConfig+0x5d0>
 8005368:	2340      	movs	r3, #64	; 0x40
 800536a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800536e:	e03f      	b.n	80053f0 <UART_SetConfig+0x5d0>
 8005370:	2380      	movs	r3, #128	; 0x80
 8005372:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005376:	bf00      	nop
 8005378:	e03a      	b.n	80053f0 <UART_SetConfig+0x5d0>
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	4a43      	ldr	r2, [pc, #268]	; (800548c <UART_SetConfig+0x66c>)
 8005380:	4293      	cmp	r3, r2
 8005382:	d132      	bne.n	80053ea <UART_SetConfig+0x5ca>
 8005384:	4b3e      	ldr	r3, [pc, #248]	; (8005480 <UART_SetConfig+0x660>)
 8005386:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005388:	f003 0307 	and.w	r3, r3, #7
 800538c:	2b05      	cmp	r3, #5
 800538e:	d827      	bhi.n	80053e0 <UART_SetConfig+0x5c0>
 8005390:	a201      	add	r2, pc, #4	; (adr r2, 8005398 <UART_SetConfig+0x578>)
 8005392:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005396:	bf00      	nop
 8005398:	080053b1 	.word	0x080053b1
 800539c:	080053b9 	.word	0x080053b9
 80053a0:	080053c1 	.word	0x080053c1
 80053a4:	080053c9 	.word	0x080053c9
 80053a8:	080053d1 	.word	0x080053d1
 80053ac:	080053d9 	.word	0x080053d9
 80053b0:	2302      	movs	r3, #2
 80053b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80053b6:	e01b      	b.n	80053f0 <UART_SetConfig+0x5d0>
 80053b8:	2304      	movs	r3, #4
 80053ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80053be:	e017      	b.n	80053f0 <UART_SetConfig+0x5d0>
 80053c0:	2308      	movs	r3, #8
 80053c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80053c6:	e013      	b.n	80053f0 <UART_SetConfig+0x5d0>
 80053c8:	2310      	movs	r3, #16
 80053ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80053ce:	e00f      	b.n	80053f0 <UART_SetConfig+0x5d0>
 80053d0:	2320      	movs	r3, #32
 80053d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80053d6:	e00b      	b.n	80053f0 <UART_SetConfig+0x5d0>
 80053d8:	2340      	movs	r3, #64	; 0x40
 80053da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80053de:	e007      	b.n	80053f0 <UART_SetConfig+0x5d0>
 80053e0:	2380      	movs	r3, #128	; 0x80
 80053e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80053e6:	bf00      	nop
 80053e8:	e002      	b.n	80053f0 <UART_SetConfig+0x5d0>
 80053ea:	2380      	movs	r3, #128	; 0x80
 80053ec:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	4a25      	ldr	r2, [pc, #148]	; (800548c <UART_SetConfig+0x66c>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	f040 80b8 	bne.w	800556c <UART_SetConfig+0x74c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80053fc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005400:	2b08      	cmp	r3, #8
 8005402:	d019      	beq.n	8005438 <UART_SetConfig+0x618>
 8005404:	2b08      	cmp	r3, #8
 8005406:	dc04      	bgt.n	8005412 <UART_SetConfig+0x5f2>
 8005408:	2b02      	cmp	r3, #2
 800540a:	d009      	beq.n	8005420 <UART_SetConfig+0x600>
 800540c:	2b04      	cmp	r3, #4
 800540e:	d00b      	beq.n	8005428 <UART_SetConfig+0x608>
 8005410:	e042      	b.n	8005498 <UART_SetConfig+0x678>
 8005412:	2b20      	cmp	r3, #32
 8005414:	d02b      	beq.n	800546e <UART_SetConfig+0x64e>
 8005416:	2b40      	cmp	r3, #64	; 0x40
 8005418:	d02c      	beq.n	8005474 <UART_SetConfig+0x654>
 800541a:	2b10      	cmp	r3, #16
 800541c:	d014      	beq.n	8005448 <UART_SetConfig+0x628>
 800541e:	e03b      	b.n	8005498 <UART_SetConfig+0x678>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8005420:	f7ff f89c 	bl	800455c <HAL_RCCEx_GetD3PCLK1Freq>
 8005424:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8005426:	e03d      	b.n	80054a4 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005428:	f107 0314 	add.w	r3, r7, #20
 800542c:	4618      	mov	r0, r3
 800542e:	f7ff f8ab 	bl	8004588 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005432:	69bb      	ldr	r3, [r7, #24]
 8005434:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005436:	e035      	b.n	80054a4 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005438:	f107 0308 	add.w	r3, r7, #8
 800543c:	4618      	mov	r0, r3
 800543e:	f7ff f9ef 	bl	8004820 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005446:	e02d      	b.n	80054a4 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005448:	4b0d      	ldr	r3, [pc, #52]	; (8005480 <UART_SetConfig+0x660>)
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f003 0320 	and.w	r3, r3, #32
 8005450:	2b00      	cmp	r3, #0
 8005452:	d009      	beq.n	8005468 <UART_SetConfig+0x648>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005454:	4b0a      	ldr	r3, [pc, #40]	; (8005480 <UART_SetConfig+0x660>)
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	08db      	lsrs	r3, r3, #3
 800545a:	f003 0303 	and.w	r3, r3, #3
 800545e:	4a0c      	ldr	r2, [pc, #48]	; (8005490 <UART_SetConfig+0x670>)
 8005460:	fa22 f303 	lsr.w	r3, r2, r3
 8005464:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005466:	e01d      	b.n	80054a4 <UART_SetConfig+0x684>
          pclk = (uint32_t) HSI_VALUE;
 8005468:	4b09      	ldr	r3, [pc, #36]	; (8005490 <UART_SetConfig+0x670>)
 800546a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800546c:	e01a      	b.n	80054a4 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800546e:	4b09      	ldr	r3, [pc, #36]	; (8005494 <UART_SetConfig+0x674>)
 8005470:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005472:	e017      	b.n	80054a4 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005474:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005478:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800547a:	e013      	b.n	80054a4 <UART_SetConfig+0x684>
 800547c:	40011400 	.word	0x40011400
 8005480:	58024400 	.word	0x58024400
 8005484:	40007800 	.word	0x40007800
 8005488:	40007c00 	.word	0x40007c00
 800548c:	58000c00 	.word	0x58000c00
 8005490:	03d09000 	.word	0x03d09000
 8005494:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 8005498:	2300      	movs	r3, #0
 800549a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800549c:	2301      	movs	r3, #1
 800549e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80054a2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80054a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	f000 824d 	beq.w	8005946 <UART_SetConfig+0xb26>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054b0:	4aad      	ldr	r2, [pc, #692]	; (8005768 <UART_SetConfig+0x948>)
 80054b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80054b6:	461a      	mov	r2, r3
 80054b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054ba:	fbb3 f3f2 	udiv	r3, r3, r2
 80054be:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	685a      	ldr	r2, [r3, #4]
 80054c4:	4613      	mov	r3, r2
 80054c6:	005b      	lsls	r3, r3, #1
 80054c8:	4413      	add	r3, r2
 80054ca:	6a3a      	ldr	r2, [r7, #32]
 80054cc:	429a      	cmp	r2, r3
 80054ce:	d305      	bcc.n	80054dc <UART_SetConfig+0x6bc>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	685b      	ldr	r3, [r3, #4]
 80054d4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80054d6:	6a3a      	ldr	r2, [r7, #32]
 80054d8:	429a      	cmp	r2, r3
 80054da:	d903      	bls.n	80054e4 <UART_SetConfig+0x6c4>
      {
        ret = HAL_ERROR;
 80054dc:	2301      	movs	r3, #1
 80054de:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80054e2:	e230      	b.n	8005946 <UART_SetConfig+0xb26>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80054e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054e6:	4618      	mov	r0, r3
 80054e8:	f04f 0100 	mov.w	r1, #0
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054f0:	4a9d      	ldr	r2, [pc, #628]	; (8005768 <UART_SetConfig+0x948>)
 80054f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80054f6:	b29b      	uxth	r3, r3
 80054f8:	f04f 0400 	mov.w	r4, #0
 80054fc:	461a      	mov	r2, r3
 80054fe:	4623      	mov	r3, r4
 8005500:	f7fa feea 	bl	80002d8 <__aeabi_uldivmod>
 8005504:	4603      	mov	r3, r0
 8005506:	460c      	mov	r4, r1
 8005508:	4619      	mov	r1, r3
 800550a:	4622      	mov	r2, r4
 800550c:	f04f 0300 	mov.w	r3, #0
 8005510:	f04f 0400 	mov.w	r4, #0
 8005514:	0214      	lsls	r4, r2, #8
 8005516:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800551a:	020b      	lsls	r3, r1, #8
 800551c:	687a      	ldr	r2, [r7, #4]
 800551e:	6852      	ldr	r2, [r2, #4]
 8005520:	0852      	lsrs	r2, r2, #1
 8005522:	4611      	mov	r1, r2
 8005524:	f04f 0200 	mov.w	r2, #0
 8005528:	eb13 0b01 	adds.w	fp, r3, r1
 800552c:	eb44 0c02 	adc.w	ip, r4, r2
 8005530:	4658      	mov	r0, fp
 8005532:	4661      	mov	r1, ip
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	685b      	ldr	r3, [r3, #4]
 8005538:	f04f 0400 	mov.w	r4, #0
 800553c:	461a      	mov	r2, r3
 800553e:	4623      	mov	r3, r4
 8005540:	f7fa feca 	bl	80002d8 <__aeabi_uldivmod>
 8005544:	4603      	mov	r3, r0
 8005546:	460c      	mov	r4, r1
 8005548:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800554a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800554c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005550:	d308      	bcc.n	8005564 <UART_SetConfig+0x744>
 8005552:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005554:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005558:	d204      	bcs.n	8005564 <UART_SetConfig+0x744>
        {
          huart->Instance->BRR = usartdiv;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005560:	60da      	str	r2, [r3, #12]
 8005562:	e1f0      	b.n	8005946 <UART_SetConfig+0xb26>
        }
        else
        {
          ret = HAL_ERROR;
 8005564:	2301      	movs	r3, #1
 8005566:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800556a:	e1ec      	b.n	8005946 <UART_SetConfig+0xb26>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	69db      	ldr	r3, [r3, #28]
 8005570:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005574:	f040 8100 	bne.w	8005778 <UART_SetConfig+0x958>
  {
    switch (clocksource)
 8005578:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800557c:	2b40      	cmp	r3, #64	; 0x40
 800557e:	f200 80b7 	bhi.w	80056f0 <UART_SetConfig+0x8d0>
 8005582:	a201      	add	r2, pc, #4	; (adr r2, 8005588 <UART_SetConfig+0x768>)
 8005584:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005588:	0800568d 	.word	0x0800568d
 800558c:	08005695 	.word	0x08005695
 8005590:	080056f1 	.word	0x080056f1
 8005594:	080056f1 	.word	0x080056f1
 8005598:	0800569d 	.word	0x0800569d
 800559c:	080056f1 	.word	0x080056f1
 80055a0:	080056f1 	.word	0x080056f1
 80055a4:	080056f1 	.word	0x080056f1
 80055a8:	080056ad 	.word	0x080056ad
 80055ac:	080056f1 	.word	0x080056f1
 80055b0:	080056f1 	.word	0x080056f1
 80055b4:	080056f1 	.word	0x080056f1
 80055b8:	080056f1 	.word	0x080056f1
 80055bc:	080056f1 	.word	0x080056f1
 80055c0:	080056f1 	.word	0x080056f1
 80055c4:	080056f1 	.word	0x080056f1
 80055c8:	080056bd 	.word	0x080056bd
 80055cc:	080056f1 	.word	0x080056f1
 80055d0:	080056f1 	.word	0x080056f1
 80055d4:	080056f1 	.word	0x080056f1
 80055d8:	080056f1 	.word	0x080056f1
 80055dc:	080056f1 	.word	0x080056f1
 80055e0:	080056f1 	.word	0x080056f1
 80055e4:	080056f1 	.word	0x080056f1
 80055e8:	080056f1 	.word	0x080056f1
 80055ec:	080056f1 	.word	0x080056f1
 80055f0:	080056f1 	.word	0x080056f1
 80055f4:	080056f1 	.word	0x080056f1
 80055f8:	080056f1 	.word	0x080056f1
 80055fc:	080056f1 	.word	0x080056f1
 8005600:	080056f1 	.word	0x080056f1
 8005604:	080056f1 	.word	0x080056f1
 8005608:	080056e3 	.word	0x080056e3
 800560c:	080056f1 	.word	0x080056f1
 8005610:	080056f1 	.word	0x080056f1
 8005614:	080056f1 	.word	0x080056f1
 8005618:	080056f1 	.word	0x080056f1
 800561c:	080056f1 	.word	0x080056f1
 8005620:	080056f1 	.word	0x080056f1
 8005624:	080056f1 	.word	0x080056f1
 8005628:	080056f1 	.word	0x080056f1
 800562c:	080056f1 	.word	0x080056f1
 8005630:	080056f1 	.word	0x080056f1
 8005634:	080056f1 	.word	0x080056f1
 8005638:	080056f1 	.word	0x080056f1
 800563c:	080056f1 	.word	0x080056f1
 8005640:	080056f1 	.word	0x080056f1
 8005644:	080056f1 	.word	0x080056f1
 8005648:	080056f1 	.word	0x080056f1
 800564c:	080056f1 	.word	0x080056f1
 8005650:	080056f1 	.word	0x080056f1
 8005654:	080056f1 	.word	0x080056f1
 8005658:	080056f1 	.word	0x080056f1
 800565c:	080056f1 	.word	0x080056f1
 8005660:	080056f1 	.word	0x080056f1
 8005664:	080056f1 	.word	0x080056f1
 8005668:	080056f1 	.word	0x080056f1
 800566c:	080056f1 	.word	0x080056f1
 8005670:	080056f1 	.word	0x080056f1
 8005674:	080056f1 	.word	0x080056f1
 8005678:	080056f1 	.word	0x080056f1
 800567c:	080056f1 	.word	0x080056f1
 8005680:	080056f1 	.word	0x080056f1
 8005684:	080056f1 	.word	0x080056f1
 8005688:	080056e9 	.word	0x080056e9
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800568c:	f7fe f84c 	bl	8003728 <HAL_RCC_GetPCLK1Freq>
 8005690:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8005692:	e033      	b.n	80056fc <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005694:	f7fe f85e 	bl	8003754 <HAL_RCC_GetPCLK2Freq>
 8005698:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800569a:	e02f      	b.n	80056fc <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800569c:	f107 0314 	add.w	r3, r7, #20
 80056a0:	4618      	mov	r0, r3
 80056a2:	f7fe ff71 	bl	8004588 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80056a6:	69bb      	ldr	r3, [r7, #24]
 80056a8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80056aa:	e027      	b.n	80056fc <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80056ac:	f107 0308 	add.w	r3, r7, #8
 80056b0:	4618      	mov	r0, r3
 80056b2:	f7ff f8b5 	bl	8004820 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80056ba:	e01f      	b.n	80056fc <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80056bc:	4b2b      	ldr	r3, [pc, #172]	; (800576c <UART_SetConfig+0x94c>)
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f003 0320 	and.w	r3, r3, #32
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d009      	beq.n	80056dc <UART_SetConfig+0x8bc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80056c8:	4b28      	ldr	r3, [pc, #160]	; (800576c <UART_SetConfig+0x94c>)
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	08db      	lsrs	r3, r3, #3
 80056ce:	f003 0303 	and.w	r3, r3, #3
 80056d2:	4a27      	ldr	r2, [pc, #156]	; (8005770 <UART_SetConfig+0x950>)
 80056d4:	fa22 f303 	lsr.w	r3, r2, r3
 80056d8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80056da:	e00f      	b.n	80056fc <UART_SetConfig+0x8dc>
          pclk = (uint32_t) HSI_VALUE;
 80056dc:	4b24      	ldr	r3, [pc, #144]	; (8005770 <UART_SetConfig+0x950>)
 80056de:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80056e0:	e00c      	b.n	80056fc <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80056e2:	4b24      	ldr	r3, [pc, #144]	; (8005774 <UART_SetConfig+0x954>)
 80056e4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80056e6:	e009      	b.n	80056fc <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80056e8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80056ec:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80056ee:	e005      	b.n	80056fc <UART_SetConfig+0x8dc>
      default:
        pclk = 0U;
 80056f0:	2300      	movs	r3, #0
 80056f2:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80056f4:	2301      	movs	r3, #1
 80056f6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80056fa:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80056fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056fe:	2b00      	cmp	r3, #0
 8005700:	f000 8121 	beq.w	8005946 <UART_SetConfig+0xb26>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005708:	4a17      	ldr	r2, [pc, #92]	; (8005768 <UART_SetConfig+0x948>)
 800570a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800570e:	461a      	mov	r2, r3
 8005710:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005712:	fbb3 f3f2 	udiv	r3, r3, r2
 8005716:	005a      	lsls	r2, r3, #1
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	685b      	ldr	r3, [r3, #4]
 800571c:	085b      	lsrs	r3, r3, #1
 800571e:	441a      	add	r2, r3
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	685b      	ldr	r3, [r3, #4]
 8005724:	fbb2 f3f3 	udiv	r3, r2, r3
 8005728:	b29b      	uxth	r3, r3
 800572a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800572c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800572e:	2b0f      	cmp	r3, #15
 8005730:	d916      	bls.n	8005760 <UART_SetConfig+0x940>
 8005732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005734:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005738:	d212      	bcs.n	8005760 <UART_SetConfig+0x940>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800573a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800573c:	b29b      	uxth	r3, r3
 800573e:	f023 030f 	bic.w	r3, r3, #15
 8005742:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005746:	085b      	lsrs	r3, r3, #1
 8005748:	b29b      	uxth	r3, r3
 800574a:	f003 0307 	and.w	r3, r3, #7
 800574e:	b29a      	uxth	r2, r3
 8005750:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005752:	4313      	orrs	r3, r2
 8005754:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800575c:	60da      	str	r2, [r3, #12]
 800575e:	e0f2      	b.n	8005946 <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 8005760:	2301      	movs	r3, #1
 8005762:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8005766:	e0ee      	b.n	8005946 <UART_SetConfig+0xb26>
 8005768:	08005f94 	.word	0x08005f94
 800576c:	58024400 	.word	0x58024400
 8005770:	03d09000 	.word	0x03d09000
 8005774:	003d0900 	.word	0x003d0900
      }
    }
  }
  else
  {
    switch (clocksource)
 8005778:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800577c:	2b40      	cmp	r3, #64	; 0x40
 800577e:	f200 80b7 	bhi.w	80058f0 <UART_SetConfig+0xad0>
 8005782:	a201      	add	r2, pc, #4	; (adr r2, 8005788 <UART_SetConfig+0x968>)
 8005784:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005788:	0800588d 	.word	0x0800588d
 800578c:	08005895 	.word	0x08005895
 8005790:	080058f1 	.word	0x080058f1
 8005794:	080058f1 	.word	0x080058f1
 8005798:	0800589d 	.word	0x0800589d
 800579c:	080058f1 	.word	0x080058f1
 80057a0:	080058f1 	.word	0x080058f1
 80057a4:	080058f1 	.word	0x080058f1
 80057a8:	080058ad 	.word	0x080058ad
 80057ac:	080058f1 	.word	0x080058f1
 80057b0:	080058f1 	.word	0x080058f1
 80057b4:	080058f1 	.word	0x080058f1
 80057b8:	080058f1 	.word	0x080058f1
 80057bc:	080058f1 	.word	0x080058f1
 80057c0:	080058f1 	.word	0x080058f1
 80057c4:	080058f1 	.word	0x080058f1
 80057c8:	080058bd 	.word	0x080058bd
 80057cc:	080058f1 	.word	0x080058f1
 80057d0:	080058f1 	.word	0x080058f1
 80057d4:	080058f1 	.word	0x080058f1
 80057d8:	080058f1 	.word	0x080058f1
 80057dc:	080058f1 	.word	0x080058f1
 80057e0:	080058f1 	.word	0x080058f1
 80057e4:	080058f1 	.word	0x080058f1
 80057e8:	080058f1 	.word	0x080058f1
 80057ec:	080058f1 	.word	0x080058f1
 80057f0:	080058f1 	.word	0x080058f1
 80057f4:	080058f1 	.word	0x080058f1
 80057f8:	080058f1 	.word	0x080058f1
 80057fc:	080058f1 	.word	0x080058f1
 8005800:	080058f1 	.word	0x080058f1
 8005804:	080058f1 	.word	0x080058f1
 8005808:	080058e3 	.word	0x080058e3
 800580c:	080058f1 	.word	0x080058f1
 8005810:	080058f1 	.word	0x080058f1
 8005814:	080058f1 	.word	0x080058f1
 8005818:	080058f1 	.word	0x080058f1
 800581c:	080058f1 	.word	0x080058f1
 8005820:	080058f1 	.word	0x080058f1
 8005824:	080058f1 	.word	0x080058f1
 8005828:	080058f1 	.word	0x080058f1
 800582c:	080058f1 	.word	0x080058f1
 8005830:	080058f1 	.word	0x080058f1
 8005834:	080058f1 	.word	0x080058f1
 8005838:	080058f1 	.word	0x080058f1
 800583c:	080058f1 	.word	0x080058f1
 8005840:	080058f1 	.word	0x080058f1
 8005844:	080058f1 	.word	0x080058f1
 8005848:	080058f1 	.word	0x080058f1
 800584c:	080058f1 	.word	0x080058f1
 8005850:	080058f1 	.word	0x080058f1
 8005854:	080058f1 	.word	0x080058f1
 8005858:	080058f1 	.word	0x080058f1
 800585c:	080058f1 	.word	0x080058f1
 8005860:	080058f1 	.word	0x080058f1
 8005864:	080058f1 	.word	0x080058f1
 8005868:	080058f1 	.word	0x080058f1
 800586c:	080058f1 	.word	0x080058f1
 8005870:	080058f1 	.word	0x080058f1
 8005874:	080058f1 	.word	0x080058f1
 8005878:	080058f1 	.word	0x080058f1
 800587c:	080058f1 	.word	0x080058f1
 8005880:	080058f1 	.word	0x080058f1
 8005884:	080058f1 	.word	0x080058f1
 8005888:	080058e9 	.word	0x080058e9
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800588c:	f7fd ff4c 	bl	8003728 <HAL_RCC_GetPCLK1Freq>
 8005890:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8005892:	e033      	b.n	80058fc <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005894:	f7fd ff5e 	bl	8003754 <HAL_RCC_GetPCLK2Freq>
 8005898:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800589a:	e02f      	b.n	80058fc <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800589c:	f107 0314 	add.w	r3, r7, #20
 80058a0:	4618      	mov	r0, r3
 80058a2:	f7fe fe71 	bl	8004588 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80058a6:	69bb      	ldr	r3, [r7, #24]
 80058a8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80058aa:	e027      	b.n	80058fc <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80058ac:	f107 0308 	add.w	r3, r7, #8
 80058b0:	4618      	mov	r0, r3
 80058b2:	f7fe ffb5 	bl	8004820 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80058ba:	e01f      	b.n	80058fc <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80058bc:	4b2c      	ldr	r3, [pc, #176]	; (8005970 <UART_SetConfig+0xb50>)
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f003 0320 	and.w	r3, r3, #32
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d009      	beq.n	80058dc <UART_SetConfig+0xabc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80058c8:	4b29      	ldr	r3, [pc, #164]	; (8005970 <UART_SetConfig+0xb50>)
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	08db      	lsrs	r3, r3, #3
 80058ce:	f003 0303 	and.w	r3, r3, #3
 80058d2:	4a28      	ldr	r2, [pc, #160]	; (8005974 <UART_SetConfig+0xb54>)
 80058d4:	fa22 f303 	lsr.w	r3, r2, r3
 80058d8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80058da:	e00f      	b.n	80058fc <UART_SetConfig+0xadc>
          pclk = (uint32_t) HSI_VALUE;
 80058dc:	4b25      	ldr	r3, [pc, #148]	; (8005974 <UART_SetConfig+0xb54>)
 80058de:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80058e0:	e00c      	b.n	80058fc <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80058e2:	4b25      	ldr	r3, [pc, #148]	; (8005978 <UART_SetConfig+0xb58>)
 80058e4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80058e6:	e009      	b.n	80058fc <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80058e8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80058ec:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80058ee:	e005      	b.n	80058fc <UART_SetConfig+0xadc>
      default:
        pclk = 0U;
 80058f0:	2300      	movs	r3, #0
 80058f2:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80058f4:	2301      	movs	r3, #1
 80058f6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80058fa:	bf00      	nop
    }

    if (pclk != 0U)
 80058fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d021      	beq.n	8005946 <UART_SetConfig+0xb26>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005906:	4a1d      	ldr	r2, [pc, #116]	; (800597c <UART_SetConfig+0xb5c>)
 8005908:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800590c:	461a      	mov	r2, r3
 800590e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005910:	fbb3 f2f2 	udiv	r2, r3, r2
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	685b      	ldr	r3, [r3, #4]
 8005918:	085b      	lsrs	r3, r3, #1
 800591a:	441a      	add	r2, r3
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	685b      	ldr	r3, [r3, #4]
 8005920:	fbb2 f3f3 	udiv	r3, r2, r3
 8005924:	b29b      	uxth	r3, r3
 8005926:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800592a:	2b0f      	cmp	r3, #15
 800592c:	d908      	bls.n	8005940 <UART_SetConfig+0xb20>
 800592e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005930:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005934:	d204      	bcs.n	8005940 <UART_SetConfig+0xb20>
      {
        huart->Instance->BRR = usartdiv;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800593c:	60da      	str	r2, [r3, #12]
 800593e:	e002      	b.n	8005946 <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 8005940:	2301      	movs	r3, #1
 8005942:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	2201      	movs	r2, #1
 800594a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	2201      	movs	r2, #1
 8005952:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	2200      	movs	r2, #0
 800595a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2200      	movs	r2, #0
 8005960:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8005962:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8005966:	4618      	mov	r0, r3
 8005968:	3738      	adds	r7, #56	; 0x38
 800596a:	46bd      	mov	sp, r7
 800596c:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8005970:	58024400 	.word	0x58024400
 8005974:	03d09000 	.word	0x03d09000
 8005978:	003d0900 	.word	0x003d0900
 800597c:	08005f94 	.word	0x08005f94

08005980 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005980:	b480      	push	{r7}
 8005982:	b083      	sub	sp, #12
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800598c:	f003 0301 	and.w	r3, r3, #1
 8005990:	2b00      	cmp	r3, #0
 8005992:	d00a      	beq.n	80059aa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	685b      	ldr	r3, [r3, #4]
 800599a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	430a      	orrs	r2, r1
 80059a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059ae:	f003 0302 	and.w	r3, r3, #2
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d00a      	beq.n	80059cc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	685b      	ldr	r3, [r3, #4]
 80059bc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	430a      	orrs	r2, r1
 80059ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059d0:	f003 0304 	and.w	r3, r3, #4
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d00a      	beq.n	80059ee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	685b      	ldr	r3, [r3, #4]
 80059de:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	430a      	orrs	r2, r1
 80059ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059f2:	f003 0308 	and.w	r3, r3, #8
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d00a      	beq.n	8005a10 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	685b      	ldr	r3, [r3, #4]
 8005a00:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	430a      	orrs	r2, r1
 8005a0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a14:	f003 0310 	and.w	r3, r3, #16
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d00a      	beq.n	8005a32 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	689b      	ldr	r3, [r3, #8]
 8005a22:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	430a      	orrs	r2, r1
 8005a30:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a36:	f003 0320 	and.w	r3, r3, #32
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d00a      	beq.n	8005a54 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	689b      	ldr	r3, [r3, #8]
 8005a44:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	430a      	orrs	r2, r1
 8005a52:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d01a      	beq.n	8005a96 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	685b      	ldr	r3, [r3, #4]
 8005a66:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	430a      	orrs	r2, r1
 8005a74:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a7a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005a7e:	d10a      	bne.n	8005a96 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	685b      	ldr	r3, [r3, #4]
 8005a86:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	430a      	orrs	r2, r1
 8005a94:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d00a      	beq.n	8005ab8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	685b      	ldr	r3, [r3, #4]
 8005aa8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	430a      	orrs	r2, r1
 8005ab6:	605a      	str	r2, [r3, #4]
  }
}
 8005ab8:	bf00      	nop
 8005aba:	370c      	adds	r7, #12
 8005abc:	46bd      	mov	sp, r7
 8005abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac2:	4770      	bx	lr

08005ac4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b086      	sub	sp, #24
 8005ac8:	af02      	add	r7, sp, #8
 8005aca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2200      	movs	r2, #0
 8005ad0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8005ad4:	f7fb fa68 	bl	8000fa8 <HAL_GetTick>
 8005ad8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f003 0308 	and.w	r3, r3, #8
 8005ae4:	2b08      	cmp	r3, #8
 8005ae6:	d10e      	bne.n	8005b06 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005ae8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005aec:	9300      	str	r3, [sp, #0]
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	2200      	movs	r2, #0
 8005af2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005af6:	6878      	ldr	r0, [r7, #4]
 8005af8:	f000 f82c 	bl	8005b54 <UART_WaitOnFlagUntilTimeout>
 8005afc:	4603      	mov	r3, r0
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d001      	beq.n	8005b06 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005b02:	2303      	movs	r3, #3
 8005b04:	e022      	b.n	8005b4c <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f003 0304 	and.w	r3, r3, #4
 8005b10:	2b04      	cmp	r3, #4
 8005b12:	d10e      	bne.n	8005b32 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005b14:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005b18:	9300      	str	r3, [sp, #0]
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005b22:	6878      	ldr	r0, [r7, #4]
 8005b24:	f000 f816 	bl	8005b54 <UART_WaitOnFlagUntilTimeout>
 8005b28:	4603      	mov	r3, r0
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d001      	beq.n	8005b32 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005b2e:	2303      	movs	r3, #3
 8005b30:	e00c      	b.n	8005b4c <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	2220      	movs	r2, #32
 8005b36:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	2220      	movs	r2, #32
 8005b3e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	2200      	movs	r2, #0
 8005b46:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8005b4a:	2300      	movs	r3, #0
}
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	3710      	adds	r7, #16
 8005b50:	46bd      	mov	sp, r7
 8005b52:	bd80      	pop	{r7, pc}

08005b54 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b084      	sub	sp, #16
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	60f8      	str	r0, [r7, #12]
 8005b5c:	60b9      	str	r1, [r7, #8]
 8005b5e:	603b      	str	r3, [r7, #0]
 8005b60:	4613      	mov	r3, r2
 8005b62:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b64:	e062      	b.n	8005c2c <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b66:	69bb      	ldr	r3, [r7, #24]
 8005b68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b6c:	d05e      	beq.n	8005c2c <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b6e:	f7fb fa1b 	bl	8000fa8 <HAL_GetTick>
 8005b72:	4602      	mov	r2, r0
 8005b74:	683b      	ldr	r3, [r7, #0]
 8005b76:	1ad3      	subs	r3, r2, r3
 8005b78:	69ba      	ldr	r2, [r7, #24]
 8005b7a:	429a      	cmp	r2, r3
 8005b7c:	d302      	bcc.n	8005b84 <UART_WaitOnFlagUntilTimeout+0x30>
 8005b7e:	69bb      	ldr	r3, [r7, #24]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d11d      	bne.n	8005bc0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	681a      	ldr	r2, [r3, #0]
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005b92:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	689a      	ldr	r2, [r3, #8]
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f022 0201 	bic.w	r2, r2, #1
 8005ba2:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	2220      	movs	r2, #32
 8005ba8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	2220      	movs	r2, #32
 8005bb0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8005bbc:	2303      	movs	r3, #3
 8005bbe:	e045      	b.n	8005c4c <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f003 0304 	and.w	r3, r3, #4
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d02e      	beq.n	8005c2c <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	69db      	ldr	r3, [r3, #28]
 8005bd4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005bd8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005bdc:	d126      	bne.n	8005c2c <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005be6:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	681a      	ldr	r2, [r3, #0]
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005bf6:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	689a      	ldr	r2, [r3, #8]
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f022 0201 	bic.w	r2, r2, #1
 8005c06:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	2220      	movs	r2, #32
 8005c0c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	2220      	movs	r2, #32
 8005c14:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	2220      	movs	r2, #32
 8005c1c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	2200      	movs	r2, #0
 8005c24:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 8005c28:	2303      	movs	r3, #3
 8005c2a:	e00f      	b.n	8005c4c <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	69da      	ldr	r2, [r3, #28]
 8005c32:	68bb      	ldr	r3, [r7, #8]
 8005c34:	4013      	ands	r3, r2
 8005c36:	68ba      	ldr	r2, [r7, #8]
 8005c38:	429a      	cmp	r2, r3
 8005c3a:	bf0c      	ite	eq
 8005c3c:	2301      	moveq	r3, #1
 8005c3e:	2300      	movne	r3, #0
 8005c40:	b2db      	uxtb	r3, r3
 8005c42:	461a      	mov	r2, r3
 8005c44:	79fb      	ldrb	r3, [r7, #7]
 8005c46:	429a      	cmp	r2, r3
 8005c48:	d08d      	beq.n	8005b66 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005c4a:	2300      	movs	r3, #0
}
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	3710      	adds	r7, #16
 8005c50:	46bd      	mov	sp, r7
 8005c52:	bd80      	pop	{r7, pc}

08005c54 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005c54:	b480      	push	{r7}
 8005c56:	b085      	sub	sp, #20
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8005c62:	2b01      	cmp	r3, #1
 8005c64:	d101      	bne.n	8005c6a <HAL_UARTEx_DisableFifoMode+0x16>
 8005c66:	2302      	movs	r3, #2
 8005c68:	e027      	b.n	8005cba <HAL_UARTEx_DisableFifoMode+0x66>
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	2201      	movs	r2, #1
 8005c6e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	2224      	movs	r2, #36	; 0x24
 8005c76:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	681a      	ldr	r2, [r3, #0]
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f022 0201 	bic.w	r2, r2, #1
 8005c90:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005c98:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	68fa      	ldr	r2, [r7, #12]
 8005ca6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2220      	movs	r2, #32
 8005cac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8005cb8:	2300      	movs	r3, #0
}
 8005cba:	4618      	mov	r0, r3
 8005cbc:	3714      	adds	r7, #20
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc4:	4770      	bx	lr

08005cc6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005cc6:	b580      	push	{r7, lr}
 8005cc8:	b084      	sub	sp, #16
 8005cca:	af00      	add	r7, sp, #0
 8005ccc:	6078      	str	r0, [r7, #4]
 8005cce:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8005cd6:	2b01      	cmp	r3, #1
 8005cd8:	d101      	bne.n	8005cde <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005cda:	2302      	movs	r3, #2
 8005cdc:	e02d      	b.n	8005d3a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	2201      	movs	r2, #1
 8005ce2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	2224      	movs	r2, #36	; 0x24
 8005cea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	681a      	ldr	r2, [r3, #0]
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f022 0201 	bic.w	r2, r2, #1
 8005d04:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	689b      	ldr	r3, [r3, #8]
 8005d0c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	683a      	ldr	r2, [r7, #0]
 8005d16:	430a      	orrs	r2, r1
 8005d18:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005d1a:	6878      	ldr	r0, [r7, #4]
 8005d1c:	f000 f850 	bl	8005dc0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	68fa      	ldr	r2, [r7, #12]
 8005d26:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2220      	movs	r2, #32
 8005d2c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2200      	movs	r2, #0
 8005d34:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8005d38:	2300      	movs	r3, #0
}
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	3710      	adds	r7, #16
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	bd80      	pop	{r7, pc}

08005d42 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005d42:	b580      	push	{r7, lr}
 8005d44:	b084      	sub	sp, #16
 8005d46:	af00      	add	r7, sp, #0
 8005d48:	6078      	str	r0, [r7, #4]
 8005d4a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8005d52:	2b01      	cmp	r3, #1
 8005d54:	d101      	bne.n	8005d5a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005d56:	2302      	movs	r3, #2
 8005d58:	e02d      	b.n	8005db6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	2201      	movs	r2, #1
 8005d5e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	2224      	movs	r2, #36	; 0x24
 8005d66:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	681a      	ldr	r2, [r3, #0]
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f022 0201 	bic.w	r2, r2, #1
 8005d80:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	689b      	ldr	r3, [r3, #8]
 8005d88:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	683a      	ldr	r2, [r7, #0]
 8005d92:	430a      	orrs	r2, r1
 8005d94:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005d96:	6878      	ldr	r0, [r7, #4]
 8005d98:	f000 f812 	bl	8005dc0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	68fa      	ldr	r2, [r7, #12]
 8005da2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2220      	movs	r2, #32
 8005da8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2200      	movs	r2, #0
 8005db0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8005db4:	2300      	movs	r3, #0
}
 8005db6:	4618      	mov	r0, r3
 8005db8:	3710      	adds	r7, #16
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	bd80      	pop	{r7, pc}
	...

08005dc0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005dc0:	b480      	push	{r7}
 8005dc2:	b089      	sub	sp, #36	; 0x24
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8005dc8:	4a2f      	ldr	r2, [pc, #188]	; (8005e88 <UARTEx_SetNbDataToProcess+0xc8>)
 8005dca:	f107 0314 	add.w	r3, r7, #20
 8005dce:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005dd2:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8005dd6:	4a2d      	ldr	r2, [pc, #180]	; (8005e8c <UARTEx_SetNbDataToProcess+0xcc>)
 8005dd8:	f107 030c 	add.w	r3, r7, #12
 8005ddc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005de0:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d108      	bne.n	8005dfe <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2201      	movs	r2, #1
 8005df0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2201      	movs	r2, #1
 8005df8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005dfc:	e03d      	b.n	8005e7a <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005dfe:	2310      	movs	r3, #16
 8005e00:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005e02:	2310      	movs	r3, #16
 8005e04:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	689b      	ldr	r3, [r3, #8]
 8005e0c:	0e5b      	lsrs	r3, r3, #25
 8005e0e:	b2db      	uxtb	r3, r3
 8005e10:	f003 0307 	and.w	r3, r3, #7
 8005e14:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	689b      	ldr	r3, [r3, #8]
 8005e1c:	0f5b      	lsrs	r3, r3, #29
 8005e1e:	b2db      	uxtb	r3, r3
 8005e20:	f003 0307 	and.w	r3, r3, #7
 8005e24:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8005e26:	7fbb      	ldrb	r3, [r7, #30]
 8005e28:	7f3a      	ldrb	r2, [r7, #28]
 8005e2a:	f107 0120 	add.w	r1, r7, #32
 8005e2e:	440a      	add	r2, r1
 8005e30:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8005e34:	fb02 f303 	mul.w	r3, r2, r3
 8005e38:	7f3a      	ldrb	r2, [r7, #28]
 8005e3a:	f107 0120 	add.w	r1, r7, #32
 8005e3e:	440a      	add	r2, r1
 8005e40:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8005e44:	fb93 f3f2 	sdiv	r3, r3, r2
 8005e48:	b29a      	uxth	r2, r3
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8005e50:	7ffb      	ldrb	r3, [r7, #31]
 8005e52:	7f7a      	ldrb	r2, [r7, #29]
 8005e54:	f107 0120 	add.w	r1, r7, #32
 8005e58:	440a      	add	r2, r1
 8005e5a:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8005e5e:	fb02 f303 	mul.w	r3, r2, r3
 8005e62:	7f7a      	ldrb	r2, [r7, #29]
 8005e64:	f107 0120 	add.w	r1, r7, #32
 8005e68:	440a      	add	r2, r1
 8005e6a:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8005e6e:	fb93 f3f2 	sdiv	r3, r3, r2
 8005e72:	b29a      	uxth	r2, r3
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005e7a:	bf00      	nop
 8005e7c:	3724      	adds	r7, #36	; 0x24
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e84:	4770      	bx	lr
 8005e86:	bf00      	nop
 8005e88:	08005f64 	.word	0x08005f64
 8005e8c:	08005f6c 	.word	0x08005f6c

08005e90 <__libc_init_array>:
 8005e90:	b570      	push	{r4, r5, r6, lr}
 8005e92:	4e0d      	ldr	r6, [pc, #52]	; (8005ec8 <__libc_init_array+0x38>)
 8005e94:	4c0d      	ldr	r4, [pc, #52]	; (8005ecc <__libc_init_array+0x3c>)
 8005e96:	1ba4      	subs	r4, r4, r6
 8005e98:	10a4      	asrs	r4, r4, #2
 8005e9a:	2500      	movs	r5, #0
 8005e9c:	42a5      	cmp	r5, r4
 8005e9e:	d109      	bne.n	8005eb4 <__libc_init_array+0x24>
 8005ea0:	4e0b      	ldr	r6, [pc, #44]	; (8005ed0 <__libc_init_array+0x40>)
 8005ea2:	4c0c      	ldr	r4, [pc, #48]	; (8005ed4 <__libc_init_array+0x44>)
 8005ea4:	f000 f82c 	bl	8005f00 <_init>
 8005ea8:	1ba4      	subs	r4, r4, r6
 8005eaa:	10a4      	asrs	r4, r4, #2
 8005eac:	2500      	movs	r5, #0
 8005eae:	42a5      	cmp	r5, r4
 8005eb0:	d105      	bne.n	8005ebe <__libc_init_array+0x2e>
 8005eb2:	bd70      	pop	{r4, r5, r6, pc}
 8005eb4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005eb8:	4798      	blx	r3
 8005eba:	3501      	adds	r5, #1
 8005ebc:	e7ee      	b.n	8005e9c <__libc_init_array+0xc>
 8005ebe:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005ec2:	4798      	blx	r3
 8005ec4:	3501      	adds	r5, #1
 8005ec6:	e7f2      	b.n	8005eae <__libc_init_array+0x1e>
 8005ec8:	08005fb4 	.word	0x08005fb4
 8005ecc:	08005fb4 	.word	0x08005fb4
 8005ed0:	08005fb4 	.word	0x08005fb4
 8005ed4:	08005fb8 	.word	0x08005fb8

08005ed8 <memcpy>:
 8005ed8:	b510      	push	{r4, lr}
 8005eda:	1e43      	subs	r3, r0, #1
 8005edc:	440a      	add	r2, r1
 8005ede:	4291      	cmp	r1, r2
 8005ee0:	d100      	bne.n	8005ee4 <memcpy+0xc>
 8005ee2:	bd10      	pop	{r4, pc}
 8005ee4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005ee8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005eec:	e7f7      	b.n	8005ede <memcpy+0x6>

08005eee <memset>:
 8005eee:	4402      	add	r2, r0
 8005ef0:	4603      	mov	r3, r0
 8005ef2:	4293      	cmp	r3, r2
 8005ef4:	d100      	bne.n	8005ef8 <memset+0xa>
 8005ef6:	4770      	bx	lr
 8005ef8:	f803 1b01 	strb.w	r1, [r3], #1
 8005efc:	e7f9      	b.n	8005ef2 <memset+0x4>
	...

08005f00 <_init>:
 8005f00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f02:	bf00      	nop
 8005f04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f06:	bc08      	pop	{r3}
 8005f08:	469e      	mov	lr, r3
 8005f0a:	4770      	bx	lr

08005f0c <_fini>:
 8005f0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f0e:	bf00      	nop
 8005f10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f12:	bc08      	pop	{r3}
 8005f14:	469e      	mov	lr, r3
 8005f16:	4770      	bx	lr
